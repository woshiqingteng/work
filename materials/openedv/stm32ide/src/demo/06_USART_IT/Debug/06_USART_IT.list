
06_USART_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000571c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08005908  08005908  00015908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ca4  08005ca4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08005ca4  08005ca4  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ca4  08005ca4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ca4  08005ca4  00015ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ca8  08005ca8  00015ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200001d4  08005e80  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08005e80  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007d71  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a3a  00000000  00000000  00027fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000780  00000000  00000000  000299f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a4  00000000  00000000  0002a170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ba4  00000000  00000000  0002a714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a2b0  00000000  00000000  000442b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009235a  00000000  00000000  0004e568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c34  00000000  00000000  000e08c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e34f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	080058ec 	.word	0x080058ec

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	080058ec 	.word	0x080058ec

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b74:	4b43      	ldr	r3, [pc, #268]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a42      	ldr	r2, [pc, #264]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8c:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a3c      	ldr	r2, [pc, #240]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0310 	and.w	r3, r3, #16
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbc:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a30      	ldr	r2, [pc, #192]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0308 	and.w	r3, r3, #8
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2120      	movs	r1, #32
 8000bd8:	482b      	ldr	r0, [pc, #172]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bda:	f000 ff03 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2120      	movs	r1, #32
 8000be2:	482a      	ldr	r0, [pc, #168]	; (8000c8c <MX_GPIO_Init+0x12c>)
 8000be4:	f000 fefe 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bee:	4827      	ldr	r0, [pc, #156]	; (8000c8c <MX_GPIO_Init+0x12c>)
 8000bf0:	f000 fef8 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8000bf4:	2318      	movs	r3, #24
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	4820      	ldr	r0, [pc, #128]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000c08:	f000 fd58 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000c0c:	2320      	movs	r3, #32
 8000c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4619      	mov	r1, r3
 8000c22:	4819      	ldr	r0, [pc, #100]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000c24:	f000 fd4a 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4815      	ldr	r0, [pc, #84]	; (8000c90 <MX_GPIO_Init+0x130>)
 8000c3c:	f000 fd3e 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000c40:	2320      	movs	r3, #32
 8000c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_GPIO_Init+0x12c>)
 8000c58:	f000 fd30 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_GPIO_Init+0x12c>)
 8000c76:	f000 fd21 	bl	80016bc <HAL_GPIO_Init>

}
 8000c7a:	bf00      	nop
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40011800 	.word	0x40011800
 8000c8c:	40010c00 	.word	0x40010c00
 8000c90:	40010800 	.word	0x40010800

08000c94 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_UART_RxCpltCallback+0x38>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d10d      	bne.n	8000cc2 <HAL_UART_RxCpltCallback+0x2e>
	{
		LED0_TOGGLE();
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <HAL_UART_RxCpltCallback+0x3c>)
 8000caa:	f000 feb3 	bl	8001a14 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit_IT(&huart1, revbuf, sizeof(revbuf));
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <HAL_UART_RxCpltCallback+0x40>)
 8000cb2:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <HAL_UART_RxCpltCallback+0x44>)
 8000cb4:	f001 fbab 	bl	800240e <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart1, revbuf, sizeof(revbuf));
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4906      	ldr	r1, [pc, #24]	; (8000cd4 <HAL_UART_RxCpltCallback+0x40>)
 8000cbc:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <HAL_UART_RxCpltCallback+0x44>)
 8000cbe:	f001 fbdb 	bl	8002478 <HAL_UART_Receive_IT>
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40013800 	.word	0x40013800
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	200001f0 	.word	0x200001f0
 8000cd8:	200001f8 	.word	0x200001f8

08000cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce0:	f000 fa3a 	bl	8001158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce4:	f000 f80e 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce8:	f7ff ff3a 	bl	8000b60 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cec:	f000 f990 	bl	8001010 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, revbuf, sizeof(revbuf));
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4902      	ldr	r1, [pc, #8]	; (8000cfc <main+0x20>)
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <main+0x24>)
 8000cf6:	f001 fbbf 	bl	8002478 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <main+0x1e>
 8000cfc:	200001f0 	.word	0x200001f0
 8000d00:	200001f8 	.word	0x200001f8

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b090      	sub	sp, #64	; 0x40
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0318 	add.w	r3, r7, #24
 8000d0e:	2228      	movs	r2, #40	; 0x28
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 fea7 	bl	8003a66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 fe7b 	bl	8001a48 <HAL_RCC_OscConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d58:	f000 f819 	bl	8000d8e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d60:	2302      	movs	r3, #2
 8000d62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2102      	movs	r1, #2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 f8e8 	bl	8001f4c <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d82:	f000 f804 	bl	8000d8e <Error_Handler>
  }
}
 8000d86:	bf00      	nop
 8000d88:	3740      	adds	r7, #64	; 0x40
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d92:	b672      	cpsid	i
}
 8000d94:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <Error_Handler+0x8>

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_MspInit+0x5c>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <HAL_MspInit+0x5c>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6193      	str	r3, [r2, #24]
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_MspInit+0x5c>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_MspInit+0x5c>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_MspInit+0x5c>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_MspInit+0x5c>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_MspInit+0x60>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_MspInit+0x60>)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010000 	.word	0x40010000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <MemManage_Handler+0x4>

08000e0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr

08000e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e42:	f000 f9cf 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <USART1_IRQHandler+0x10>)
 8000e52:	f001 fb37 	bl	80024c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200001f8 	.word	0x200001f8

08000e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return 1;
 8000e64:	2301      	movs	r3, #1
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr

08000e6e <_kill>:

int _kill(int pid, int sig)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e78:	f002 fe48 	bl	8003b0c <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2216      	movs	r2, #22
 8000e80:	601a      	str	r2, [r3, #0]
  return -1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <_exit>:

void _exit (int status)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e96:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffe7 	bl	8000e6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ea0:	e7fe      	b.n	8000ea0 <_exit+0x12>

08000ea2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	e00a      	b.n	8000eca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb4:	f3af 8000 	nop.w
 8000eb8:	4601      	mov	r1, r0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	60ba      	str	r2, [r7, #8]
 8000ec0:	b2ca      	uxtb	r2, r1
 8000ec2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	dbf0      	blt.n	8000eb4 <_read+0x12>
  }

  return len;
 8000ed2:	687b      	ldr	r3, [r7, #4]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	e009      	b.n	8000f02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	60ba      	str	r2, [r7, #8]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f878 	bl	8000fec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dbf1      	blt.n	8000eee <_write+0x12>
  }
  return len;
 8000f0a:	687b      	ldr	r3, [r7, #4]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <_close>:

int _close(int file)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <_isatty>:

int _isatty(int file)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f002 fdb2 	bl	8003b0c <__errno>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	220c      	movs	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <_sbrk+0x64>)
 8000fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20010000 	.word	0x20010000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	200001f4 	.word	0x200001f4
 8000fdc:	20000390 	.word	0x20000390

08000fe0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <__io_putchar>:
/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 8000ff4:	1d39      	adds	r1, r7, #4
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <__io_putchar+0x20>)
 8000ffe:	f001 f983 	bl	8002308 <HAL_UART_Transmit>
	 return ch;
 8001002:	687b      	ldr	r3, [r7, #4]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001f8 	.word	0x200001f8

08001010 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <MX_USART1_UART_Init+0x50>)
 8001018:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_USART1_UART_Init+0x4c>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USART1_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_USART1_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001048:	f001 f90e 	bl	8002268 <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001052:	f7ff fe9c 	bl	8000d8e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001f8 	.word	0x200001f8
 8001060:	40013800 	.word	0x40013800

08001064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a20      	ldr	r2, [pc, #128]	; (8001100 <HAL_UART_MspInit+0x9c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d139      	bne.n	80010f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <HAL_UART_MspInit+0xa0>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <HAL_UART_MspInit+0xa0>)
 800108a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <HAL_UART_MspInit+0xa0>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <HAL_UART_MspInit+0xa0>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a18      	ldr	r2, [pc, #96]	; (8001104 <HAL_UART_MspInit+0xa0>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_UART_MspInit+0xa0>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	4619      	mov	r1, r3
 80010c8:	480f      	ldr	r0, [pc, #60]	; (8001108 <HAL_UART_MspInit+0xa4>)
 80010ca:	f000 faf7 	bl	80016bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4619      	mov	r1, r3
 80010e2:	4809      	ldr	r0, [pc, #36]	; (8001108 <HAL_UART_MspInit+0xa4>)
 80010e4:	f000 faea 	bl	80016bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2103      	movs	r1, #3
 80010ec:	2025      	movs	r0, #37	; 0x25
 80010ee:	f000 f96c 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010f2:	2025      	movs	r0, #37	; 0x25
 80010f4:	f000 f985 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40013800 	.word	0x40013800
 8001104:	40021000 	.word	0x40021000
 8001108:	40010800 	.word	0x40010800

0800110c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800110c:	f7ff ff68 	bl	8000fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001112:	490c      	ldr	r1, [pc, #48]	; (8001144 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001114:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001128:	4c09      	ldr	r4, [pc, #36]	; (8001150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001136:	f002 fcef 	bl	8003b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113a:	f7ff fdcf 	bl	8000cdc <main>
  bx lr
 800113e:	4770      	bx	lr
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001148:	08005cac 	.word	0x08005cac
  ldr r2, =_sbss
 800114c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001150:	20000390 	.word	0x20000390

08001154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC1_2_IRQHandler>
	...

08001158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_Init+0x28>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_Init+0x28>)
 8001162:	f043 0310 	orr.w	r3, r3, #16
 8001166:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001168:	2003      	movs	r0, #3
 800116a:	f000 f923 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116e:	200f      	movs	r0, #15
 8001170:	f000 f808 	bl	8001184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001174:	f7ff fe10 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40022000 	.word	0x40022000

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x54>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x58>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f93b 	bl	800141e <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00e      	b.n	80011d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	d80a      	bhi.n	80011ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f000 f903 	bl	80013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <HAL_InitTick+0x5c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_IncTick+0x1c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_IncTick+0x20>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a03      	ldr	r2, [pc, #12]	; (8001204 <HAL_IncTick+0x20>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	20000008 	.word	0x20000008
 8001204:	20000240 	.word	0x20000240

08001208 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b02      	ldr	r3, [pc, #8]	; (8001218 <HAL_GetTick+0x10>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	20000240 	.word	0x20000240

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4906      	ldr	r1, [pc, #24]	; (80012b4 <__NVIC_EnableIRQ+0x34>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff90 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff2d 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff42 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff90 	bl	800130c <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5f 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff35 	bl	8001280 <__NVIC_EnableIRQ>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffa2 	bl	8001370 <SysTick_Config>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001436:	b480      	push	{r7}
 8001438:	b085      	sub	sp, #20
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d008      	beq.n	8001460 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2204      	movs	r2, #4
 8001452:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e020      	b.n	80014a2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 020e 	bic.w	r2, r2, #14
 800146e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001488:	2101      	movs	r1, #1
 800148a:	fa01 f202 	lsl.w	r2, r1, r2
 800148e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d005      	beq.n	80014d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2204      	movs	r2, #4
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e0d6      	b.n	800167e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 020e 	bic.w	r2, r2, #14
 80014de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b64      	ldr	r3, [pc, #400]	; (8001688 <HAL_DMA_Abort_IT+0x1dc>)
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d958      	bls.n	80015ae <HAL_DMA_Abort_IT+0x102>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a62      	ldr	r2, [pc, #392]	; (800168c <HAL_DMA_Abort_IT+0x1e0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d04f      	beq.n	80015a6 <HAL_DMA_Abort_IT+0xfa>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a61      	ldr	r2, [pc, #388]	; (8001690 <HAL_DMA_Abort_IT+0x1e4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d048      	beq.n	80015a2 <HAL_DMA_Abort_IT+0xf6>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a5f      	ldr	r2, [pc, #380]	; (8001694 <HAL_DMA_Abort_IT+0x1e8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d040      	beq.n	800159c <HAL_DMA_Abort_IT+0xf0>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a5e      	ldr	r2, [pc, #376]	; (8001698 <HAL_DMA_Abort_IT+0x1ec>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d038      	beq.n	8001596 <HAL_DMA_Abort_IT+0xea>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a5c      	ldr	r2, [pc, #368]	; (800169c <HAL_DMA_Abort_IT+0x1f0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d030      	beq.n	8001590 <HAL_DMA_Abort_IT+0xe4>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a5b      	ldr	r2, [pc, #364]	; (80016a0 <HAL_DMA_Abort_IT+0x1f4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d028      	beq.n	800158a <HAL_DMA_Abort_IT+0xde>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a52      	ldr	r2, [pc, #328]	; (8001688 <HAL_DMA_Abort_IT+0x1dc>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d020      	beq.n	8001584 <HAL_DMA_Abort_IT+0xd8>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a57      	ldr	r2, [pc, #348]	; (80016a4 <HAL_DMA_Abort_IT+0x1f8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d019      	beq.n	8001580 <HAL_DMA_Abort_IT+0xd4>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a55      	ldr	r2, [pc, #340]	; (80016a8 <HAL_DMA_Abort_IT+0x1fc>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d012      	beq.n	800157c <HAL_DMA_Abort_IT+0xd0>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a54      	ldr	r2, [pc, #336]	; (80016ac <HAL_DMA_Abort_IT+0x200>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d00a      	beq.n	8001576 <HAL_DMA_Abort_IT+0xca>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a52      	ldr	r2, [pc, #328]	; (80016b0 <HAL_DMA_Abort_IT+0x204>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d102      	bne.n	8001570 <HAL_DMA_Abort_IT+0xc4>
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	e01b      	b.n	80015a8 <HAL_DMA_Abort_IT+0xfc>
 8001570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001574:	e018      	b.n	80015a8 <HAL_DMA_Abort_IT+0xfc>
 8001576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157a:	e015      	b.n	80015a8 <HAL_DMA_Abort_IT+0xfc>
 800157c:	2310      	movs	r3, #16
 800157e:	e013      	b.n	80015a8 <HAL_DMA_Abort_IT+0xfc>
 8001580:	2301      	movs	r3, #1
 8001582:	e011      	b.n	80015a8 <HAL_DMA_Abort_IT+0xfc>
 8001584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001588:	e00e      	b.n	80015a8 <HAL_DMA_Abort_IT+0xfc>
 800158a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800158e:	e00b      	b.n	80015a8 <HAL_DMA_Abort_IT+0xfc>
 8001590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001594:	e008      	b.n	80015a8 <HAL_DMA_Abort_IT+0xfc>
 8001596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159a:	e005      	b.n	80015a8 <HAL_DMA_Abort_IT+0xfc>
 800159c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a0:	e002      	b.n	80015a8 <HAL_DMA_Abort_IT+0xfc>
 80015a2:	2310      	movs	r3, #16
 80015a4:	e000      	b.n	80015a8 <HAL_DMA_Abort_IT+0xfc>
 80015a6:	2301      	movs	r3, #1
 80015a8:	4a42      	ldr	r2, [pc, #264]	; (80016b4 <HAL_DMA_Abort_IT+0x208>)
 80015aa:	6053      	str	r3, [r2, #4]
 80015ac:	e057      	b.n	800165e <HAL_DMA_Abort_IT+0x1b2>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a36      	ldr	r2, [pc, #216]	; (800168c <HAL_DMA_Abort_IT+0x1e0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d04f      	beq.n	8001658 <HAL_DMA_Abort_IT+0x1ac>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a34      	ldr	r2, [pc, #208]	; (8001690 <HAL_DMA_Abort_IT+0x1e4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d048      	beq.n	8001654 <HAL_DMA_Abort_IT+0x1a8>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a33      	ldr	r2, [pc, #204]	; (8001694 <HAL_DMA_Abort_IT+0x1e8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d040      	beq.n	800164e <HAL_DMA_Abort_IT+0x1a2>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a31      	ldr	r2, [pc, #196]	; (8001698 <HAL_DMA_Abort_IT+0x1ec>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d038      	beq.n	8001648 <HAL_DMA_Abort_IT+0x19c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a30      	ldr	r2, [pc, #192]	; (800169c <HAL_DMA_Abort_IT+0x1f0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d030      	beq.n	8001642 <HAL_DMA_Abort_IT+0x196>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2e      	ldr	r2, [pc, #184]	; (80016a0 <HAL_DMA_Abort_IT+0x1f4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d028      	beq.n	800163c <HAL_DMA_Abort_IT+0x190>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a26      	ldr	r2, [pc, #152]	; (8001688 <HAL_DMA_Abort_IT+0x1dc>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d020      	beq.n	8001636 <HAL_DMA_Abort_IT+0x18a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a2a      	ldr	r2, [pc, #168]	; (80016a4 <HAL_DMA_Abort_IT+0x1f8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d019      	beq.n	8001632 <HAL_DMA_Abort_IT+0x186>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a29      	ldr	r2, [pc, #164]	; (80016a8 <HAL_DMA_Abort_IT+0x1fc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d012      	beq.n	800162e <HAL_DMA_Abort_IT+0x182>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <HAL_DMA_Abort_IT+0x200>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00a      	beq.n	8001628 <HAL_DMA_Abort_IT+0x17c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a26      	ldr	r2, [pc, #152]	; (80016b0 <HAL_DMA_Abort_IT+0x204>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d102      	bne.n	8001622 <HAL_DMA_Abort_IT+0x176>
 800161c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001620:	e01b      	b.n	800165a <HAL_DMA_Abort_IT+0x1ae>
 8001622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001626:	e018      	b.n	800165a <HAL_DMA_Abort_IT+0x1ae>
 8001628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162c:	e015      	b.n	800165a <HAL_DMA_Abort_IT+0x1ae>
 800162e:	2310      	movs	r3, #16
 8001630:	e013      	b.n	800165a <HAL_DMA_Abort_IT+0x1ae>
 8001632:	2301      	movs	r3, #1
 8001634:	e011      	b.n	800165a <HAL_DMA_Abort_IT+0x1ae>
 8001636:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800163a:	e00e      	b.n	800165a <HAL_DMA_Abort_IT+0x1ae>
 800163c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001640:	e00b      	b.n	800165a <HAL_DMA_Abort_IT+0x1ae>
 8001642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001646:	e008      	b.n	800165a <HAL_DMA_Abort_IT+0x1ae>
 8001648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164c:	e005      	b.n	800165a <HAL_DMA_Abort_IT+0x1ae>
 800164e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001652:	e002      	b.n	800165a <HAL_DMA_Abort_IT+0x1ae>
 8001654:	2310      	movs	r3, #16
 8001656:	e000      	b.n	800165a <HAL_DMA_Abort_IT+0x1ae>
 8001658:	2301      	movs	r3, #1
 800165a:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_DMA_Abort_IT+0x20c>)
 800165c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	4798      	blx	r3
    } 
  }
  return status;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40020080 	.word	0x40020080
 800168c:	40020008 	.word	0x40020008
 8001690:	4002001c 	.word	0x4002001c
 8001694:	40020030 	.word	0x40020030
 8001698:	40020044 	.word	0x40020044
 800169c:	40020058 	.word	0x40020058
 80016a0:	4002006c 	.word	0x4002006c
 80016a4:	40020408 	.word	0x40020408
 80016a8:	4002041c 	.word	0x4002041c
 80016ac:	40020430 	.word	0x40020430
 80016b0:	40020444 	.word	0x40020444
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40020000 	.word	0x40020000

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b08b      	sub	sp, #44	; 0x2c
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ce:	e179      	b.n	80019c4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d0:	2201      	movs	r2, #1
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	f040 8168 	bne.w	80019be <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a96      	ldr	r2, [pc, #600]	; (800194c <HAL_GPIO_Init+0x290>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d05e      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 80016f8:	4a94      	ldr	r2, [pc, #592]	; (800194c <HAL_GPIO_Init+0x290>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d875      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 80016fe:	4a94      	ldr	r2, [pc, #592]	; (8001950 <HAL_GPIO_Init+0x294>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d058      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 8001704:	4a92      	ldr	r2, [pc, #584]	; (8001950 <HAL_GPIO_Init+0x294>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d86f      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 800170a:	4a92      	ldr	r2, [pc, #584]	; (8001954 <HAL_GPIO_Init+0x298>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d052      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 8001710:	4a90      	ldr	r2, [pc, #576]	; (8001954 <HAL_GPIO_Init+0x298>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d869      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 8001716:	4a90      	ldr	r2, [pc, #576]	; (8001958 <HAL_GPIO_Init+0x29c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d04c      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 800171c:	4a8e      	ldr	r2, [pc, #568]	; (8001958 <HAL_GPIO_Init+0x29c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d863      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 8001722:	4a8e      	ldr	r2, [pc, #568]	; (800195c <HAL_GPIO_Init+0x2a0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d046      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 8001728:	4a8c      	ldr	r2, [pc, #560]	; (800195c <HAL_GPIO_Init+0x2a0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d85d      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 800172e:	2b12      	cmp	r3, #18
 8001730:	d82a      	bhi.n	8001788 <HAL_GPIO_Init+0xcc>
 8001732:	2b12      	cmp	r3, #18
 8001734:	d859      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 8001736:	a201      	add	r2, pc, #4	; (adr r2, 800173c <HAL_GPIO_Init+0x80>)
 8001738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173c:	080017b7 	.word	0x080017b7
 8001740:	08001791 	.word	0x08001791
 8001744:	080017a3 	.word	0x080017a3
 8001748:	080017e5 	.word	0x080017e5
 800174c:	080017eb 	.word	0x080017eb
 8001750:	080017eb 	.word	0x080017eb
 8001754:	080017eb 	.word	0x080017eb
 8001758:	080017eb 	.word	0x080017eb
 800175c:	080017eb 	.word	0x080017eb
 8001760:	080017eb 	.word	0x080017eb
 8001764:	080017eb 	.word	0x080017eb
 8001768:	080017eb 	.word	0x080017eb
 800176c:	080017eb 	.word	0x080017eb
 8001770:	080017eb 	.word	0x080017eb
 8001774:	080017eb 	.word	0x080017eb
 8001778:	080017eb 	.word	0x080017eb
 800177c:	080017eb 	.word	0x080017eb
 8001780:	08001799 	.word	0x08001799
 8001784:	080017ad 	.word	0x080017ad
 8001788:	4a75      	ldr	r2, [pc, #468]	; (8001960 <HAL_GPIO_Init+0x2a4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800178e:	e02c      	b.n	80017ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e029      	b.n	80017ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	3304      	adds	r3, #4
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e024      	b.n	80017ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	3308      	adds	r3, #8
 80017a8:	623b      	str	r3, [r7, #32]
          break;
 80017aa:	e01f      	b.n	80017ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	330c      	adds	r3, #12
 80017b2:	623b      	str	r3, [r7, #32]
          break;
 80017b4:	e01a      	b.n	80017ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017be:	2304      	movs	r3, #4
 80017c0:	623b      	str	r3, [r7, #32]
          break;
 80017c2:	e013      	b.n	80017ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d105      	bne.n	80017d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017cc:	2308      	movs	r3, #8
 80017ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	611a      	str	r2, [r3, #16]
          break;
 80017d6:	e009      	b.n	80017ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d8:	2308      	movs	r3, #8
 80017da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	615a      	str	r2, [r3, #20]
          break;
 80017e2:	e003      	b.n	80017ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
          break;
 80017e8:	e000      	b.n	80017ec <HAL_GPIO_Init+0x130>
          break;
 80017ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2bff      	cmp	r3, #255	; 0xff
 80017f0:	d801      	bhi.n	80017f6 <HAL_GPIO_Init+0x13a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	e001      	b.n	80017fa <HAL_GPIO_Init+0x13e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3304      	adds	r3, #4
 80017fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2bff      	cmp	r3, #255	; 0xff
 8001800:	d802      	bhi.n	8001808 <HAL_GPIO_Init+0x14c>
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	e002      	b.n	800180e <HAL_GPIO_Init+0x152>
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	3b08      	subs	r3, #8
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	210f      	movs	r1, #15
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	401a      	ands	r2, r3
 8001820:	6a39      	ldr	r1, [r7, #32]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	431a      	orrs	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 80c1 	beq.w	80019be <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800183c:	4b49      	ldr	r3, [pc, #292]	; (8001964 <HAL_GPIO_Init+0x2a8>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a48      	ldr	r2, [pc, #288]	; (8001964 <HAL_GPIO_Init+0x2a8>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b46      	ldr	r3, [pc, #280]	; (8001964 <HAL_GPIO_Init+0x2a8>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001854:	4a44      	ldr	r2, [pc, #272]	; (8001968 <HAL_GPIO_Init+0x2ac>)
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a3c      	ldr	r2, [pc, #240]	; (800196c <HAL_GPIO_Init+0x2b0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d01f      	beq.n	80018c0 <HAL_GPIO_Init+0x204>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a3b      	ldr	r2, [pc, #236]	; (8001970 <HAL_GPIO_Init+0x2b4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d019      	beq.n	80018bc <HAL_GPIO_Init+0x200>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a3a      	ldr	r2, [pc, #232]	; (8001974 <HAL_GPIO_Init+0x2b8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d013      	beq.n	80018b8 <HAL_GPIO_Init+0x1fc>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a39      	ldr	r2, [pc, #228]	; (8001978 <HAL_GPIO_Init+0x2bc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00d      	beq.n	80018b4 <HAL_GPIO_Init+0x1f8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a38      	ldr	r2, [pc, #224]	; (800197c <HAL_GPIO_Init+0x2c0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_Init+0x1f4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a37      	ldr	r2, [pc, #220]	; (8001980 <HAL_GPIO_Init+0x2c4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_GPIO_Init+0x1f0>
 80018a8:	2305      	movs	r3, #5
 80018aa:	e00a      	b.n	80018c2 <HAL_GPIO_Init+0x206>
 80018ac:	2306      	movs	r3, #6
 80018ae:	e008      	b.n	80018c2 <HAL_GPIO_Init+0x206>
 80018b0:	2304      	movs	r3, #4
 80018b2:	e006      	b.n	80018c2 <HAL_GPIO_Init+0x206>
 80018b4:	2303      	movs	r3, #3
 80018b6:	e004      	b.n	80018c2 <HAL_GPIO_Init+0x206>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x206>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_GPIO_Init+0x206>
 80018c0:	2300      	movs	r3, #0
 80018c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c4:	f002 0203 	and.w	r2, r2, #3
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	4093      	lsls	r3, r2
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018d2:	4925      	ldr	r1, [pc, #148]	; (8001968 <HAL_GPIO_Init+0x2ac>)
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <HAL_GPIO_Init+0x2c8>)
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	4924      	ldr	r1, [pc, #144]	; (8001984 <HAL_GPIO_Init+0x2c8>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <HAL_GPIO_Init+0x2c8>)
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	4920      	ldr	r1, [pc, #128]	; (8001984 <HAL_GPIO_Init+0x2c8>)
 8001904:	4013      	ands	r3, r2
 8001906:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_GPIO_Init+0x2c8>)
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	491a      	ldr	r1, [pc, #104]	; (8001984 <HAL_GPIO_Init+0x2c8>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	60cb      	str	r3, [r1, #12]
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_GPIO_Init+0x2c8>)
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	43db      	mvns	r3, r3
 800192a:	4916      	ldr	r1, [pc, #88]	; (8001984 <HAL_GPIO_Init+0x2c8>)
 800192c:	4013      	ands	r3, r2
 800192e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d025      	beq.n	8001988 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_GPIO_Init+0x2c8>)
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4910      	ldr	r1, [pc, #64]	; (8001984 <HAL_GPIO_Init+0x2c8>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
 8001948:	e025      	b.n	8001996 <HAL_GPIO_Init+0x2da>
 800194a:	bf00      	nop
 800194c:	10320000 	.word	0x10320000
 8001950:	10310000 	.word	0x10310000
 8001954:	10220000 	.word	0x10220000
 8001958:	10210000 	.word	0x10210000
 800195c:	10120000 	.word	0x10120000
 8001960:	10110000 	.word	0x10110000
 8001964:	40021000 	.word	0x40021000
 8001968:	40010000 	.word	0x40010000
 800196c:	40010800 	.word	0x40010800
 8001970:	40010c00 	.word	0x40010c00
 8001974:	40011000 	.word	0x40011000
 8001978:	40011400 	.word	0x40011400
 800197c:	40011800 	.word	0x40011800
 8001980:	40011c00 	.word	0x40011c00
 8001984:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_GPIO_Init+0x324>)
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	43db      	mvns	r3, r3
 8001990:	4913      	ldr	r1, [pc, #76]	; (80019e0 <HAL_GPIO_Init+0x324>)
 8001992:	4013      	ands	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_GPIO_Init+0x324>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	490e      	ldr	r1, [pc, #56]	; (80019e0 <HAL_GPIO_Init+0x324>)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
 80019ae:	e006      	b.n	80019be <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_GPIO_Init+0x324>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <HAL_GPIO_Init+0x324>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	3301      	adds	r3, #1
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f47f ae7e 	bne.w	80016d0 <HAL_GPIO_Init+0x14>
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	372c      	adds	r7, #44	; 0x2c
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a00:	e003      	b.n	8001a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	041a      	lsls	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	611a      	str	r2, [r3, #16]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	041a      	lsls	r2, r3, #16
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43d9      	mvns	r1, r3
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	400b      	ands	r3, r1
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	611a      	str	r2, [r3, #16]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
	...

08001a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e272      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8087 	beq.w	8001b76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a68:	4b92      	ldr	r3, [pc, #584]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d00c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a74:	4b8f      	ldr	r3, [pc, #572]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d112      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x5e>
 8001a80:	4b8c      	ldr	r3, [pc, #560]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d10b      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8e:	4b89      	ldr	r3, [pc, #548]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d06c      	beq.n	8001b74 <HAL_RCC_OscConfig+0x12c>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d168      	bne.n	8001b74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e24c      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x76>
 8001ab0:	4b80      	ldr	r3, [pc, #512]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a7f      	ldr	r2, [pc, #508]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	e02e      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x98>
 8001ac6:	4b7b      	ldr	r3, [pc, #492]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7a      	ldr	r2, [pc, #488]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b78      	ldr	r3, [pc, #480]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a77      	ldr	r2, [pc, #476]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e01d      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0xbc>
 8001aea:	4b72      	ldr	r3, [pc, #456]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a71      	ldr	r2, [pc, #452]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a6e      	ldr	r2, [pc, #440]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001b04:	4b6b      	ldr	r3, [pc, #428]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a6a      	ldr	r2, [pc, #424]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b68      	ldr	r3, [pc, #416]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a67      	ldr	r2, [pc, #412]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fb70 	bl	8001208 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fb6c 	bl	8001208 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e200      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b5d      	ldr	r3, [pc, #372]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0xe4>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fb5c 	bl	8001208 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fb58 	bl	8001208 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1ec      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	4b53      	ldr	r3, [pc, #332]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x10c>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d063      	beq.n	8001c4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b82:	4b4c      	ldr	r3, [pc, #304]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b8e:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d11c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x18c>
 8001b9a:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d116      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_RCC_OscConfig+0x176>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e1c0      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbe:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4939      	ldr	r1, [pc, #228]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd2:	e03a      	b.n	8001c4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_RCC_OscConfig+0x270>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7ff fb11 	bl	8001208 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bea:	f7ff fb0d 	bl	8001208 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e1a1      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c08:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4927      	ldr	r1, [pc, #156]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
 8001c1c:	e015      	b.n	8001c4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1e:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <HAL_RCC_OscConfig+0x270>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff faf0 	bl	8001208 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff faec 	bl	8001208 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e180      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d03a      	beq.n	8001ccc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d019      	beq.n	8001c92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_RCC_OscConfig+0x274>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c64:	f7ff fad0 	bl	8001208 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6c:	f7ff facc 	bl	8001208 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e160      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f000 face 	bl	800222c <RCC_Delay>
 8001c90:	e01c      	b.n	8001ccc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_RCC_OscConfig+0x274>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7ff fab6 	bl	8001208 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9e:	e00f      	b.n	8001cc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fab2 	bl	8001208 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d908      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e146      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	42420000 	.word	0x42420000
 8001cbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	4b92      	ldr	r3, [pc, #584]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e9      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80a6 	beq.w	8001e26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	4b8b      	ldr	r3, [pc, #556]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10d      	bne.n	8001d06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b88      	ldr	r3, [pc, #544]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4a87      	ldr	r2, [pc, #540]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	61d3      	str	r3, [r2, #28]
 8001cf6:	4b85      	ldr	r3, [pc, #532]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d02:	2301      	movs	r3, #1
 8001d04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b82      	ldr	r3, [pc, #520]	; (8001f10 <HAL_RCC_OscConfig+0x4c8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d118      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d12:	4b7f      	ldr	r3, [pc, #508]	; (8001f10 <HAL_RCC_OscConfig+0x4c8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7e      	ldr	r2, [pc, #504]	; (8001f10 <HAL_RCC_OscConfig+0x4c8>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fa73 	bl	8001208 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d26:	f7ff fa6f 	bl	8001208 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b64      	cmp	r3, #100	; 0x64
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e103      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <HAL_RCC_OscConfig+0x4c8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x312>
 8001d4c:	4b6f      	ldr	r3, [pc, #444]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a6e      	ldr	r2, [pc, #440]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6213      	str	r3, [r2, #32]
 8001d58:	e02d      	b.n	8001db6 <HAL_RCC_OscConfig+0x36e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x334>
 8001d62:	4b6a      	ldr	r3, [pc, #424]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a69      	ldr	r2, [pc, #420]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a66      	ldr	r2, [pc, #408]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	6213      	str	r3, [r2, #32]
 8001d7a:	e01c      	b.n	8001db6 <HAL_RCC_OscConfig+0x36e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d10c      	bne.n	8001d9e <HAL_RCC_OscConfig+0x356>
 8001d84:	4b61      	ldr	r3, [pc, #388]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a60      	ldr	r2, [pc, #384]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	4b5e      	ldr	r3, [pc, #376]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4a5d      	ldr	r2, [pc, #372]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6213      	str	r3, [r2, #32]
 8001d9c:	e00b      	b.n	8001db6 <HAL_RCC_OscConfig+0x36e>
 8001d9e:	4b5b      	ldr	r3, [pc, #364]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a5a      	ldr	r2, [pc, #360]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	6213      	str	r3, [r2, #32]
 8001daa:	4b58      	ldr	r3, [pc, #352]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a57      	ldr	r2, [pc, #348]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d015      	beq.n	8001dea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fa23 	bl	8001208 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f7ff fa1f 	bl	8001208 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e0b1      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	4b4b      	ldr	r3, [pc, #300]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0ee      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x37e>
 8001de8:	e014      	b.n	8001e14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dea:	f7ff fa0d 	bl	8001208 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df2:	f7ff fa09 	bl	8001208 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e09b      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1ee      	bne.n	8001df2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d105      	bne.n	8001e26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1a:	4b3c      	ldr	r3, [pc, #240]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a3b      	ldr	r2, [pc, #236]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8087 	beq.w	8001f3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e30:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d061      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d146      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e44:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <HAL_RCC_OscConfig+0x4cc>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f9dd 	bl	8001208 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff f9d9 	bl	8001208 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e06d      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e64:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d108      	bne.n	8001e8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	4921      	ldr	r1, [pc, #132]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a19      	ldr	r1, [r3, #32]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	491b      	ldr	r1, [pc, #108]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_RCC_OscConfig+0x4cc>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7ff f9ad 	bl	8001208 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7ff f9a9 	bl	8001208 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e03d      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x46a>
 8001ed0:	e035      	b.n	8001f3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <HAL_RCC_OscConfig+0x4cc>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f996 	bl	8001208 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff f992 	bl	8001208 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e026      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x498>
 8001efe:	e01e      	b.n	8001f3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e019      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40007000 	.word	0x40007000
 8001f14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_OscConfig+0x500>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000

08001f4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0d0      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f60:	4b6a      	ldr	r3, [pc, #424]	; (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d910      	bls.n	8001f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b67      	ldr	r3, [pc, #412]	; (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 0207 	bic.w	r2, r3, #7
 8001f76:	4965      	ldr	r1, [pc, #404]	; (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b63      	ldr	r3, [pc, #396]	; (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0b8      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa8:	4b59      	ldr	r3, [pc, #356]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4a58      	ldr	r2, [pc, #352]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc0:	4b53      	ldr	r3, [pc, #332]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a52      	ldr	r2, [pc, #328]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b50      	ldr	r3, [pc, #320]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	494d      	ldr	r1, [pc, #308]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d040      	beq.n	800206c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	4b47      	ldr	r3, [pc, #284]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d115      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e07f      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200a:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e073      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201a:	4b3d      	ldr	r3, [pc, #244]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e06b      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202a:	4b39      	ldr	r3, [pc, #228]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f023 0203 	bic.w	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4936      	ldr	r1, [pc, #216]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800203c:	f7ff f8e4 	bl	8001208 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	e00a      	b.n	800205a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002044:	f7ff f8e0 	bl	8001208 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e053      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 020c 	and.w	r2, r3, #12
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	429a      	cmp	r2, r3
 800206a:	d1eb      	bne.n	8002044 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800206c:	4b27      	ldr	r3, [pc, #156]	; (800210c <HAL_RCC_ClockConfig+0x1c0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d210      	bcs.n	800209c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b24      	ldr	r3, [pc, #144]	; (800210c <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	4922      	ldr	r1, [pc, #136]	; (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b20      	ldr	r3, [pc, #128]	; (800210c <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e032      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4916      	ldr	r1, [pc, #88]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	490e      	ldr	r1, [pc, #56]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020da:	f000 f821 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80020de:	4602      	mov	r2, r0
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	490a      	ldr	r1, [pc, #40]	; (8002114 <HAL_RCC_ClockConfig+0x1c8>)
 80020ec:	5ccb      	ldrb	r3, [r1, r3]
 80020ee:	fa22 f303 	lsr.w	r3, r2, r3
 80020f2:	4a09      	ldr	r2, [pc, #36]	; (8002118 <HAL_RCC_ClockConfig+0x1cc>)
 80020f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_RCC_ClockConfig+0x1d0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff f842 	bl	8001184 <HAL_InitTick>

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40022000 	.word	0x40022000
 8002110:	40021000 	.word	0x40021000
 8002114:	08005908 	.word	0x08005908
 8002118:	20000000 	.word	0x20000000
 800211c:	20000004 	.word	0x20000004

08002120 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b04      	cmp	r3, #4
 8002148:	d002      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x30>
 800214a:	2b08      	cmp	r3, #8
 800214c:	d003      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0x36>
 800214e:	e027      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002152:	613b      	str	r3, [r7, #16]
      break;
 8002154:	e027      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	0c9b      	lsrs	r3, r3, #18
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	4a17      	ldr	r2, [pc, #92]	; (80021bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d010      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	0c5b      	lsrs	r3, r3, #17
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002182:	fb03 f202 	mul.w	r2, r3, r2
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e004      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a0c      	ldr	r2, [pc, #48]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002194:	fb02 f303 	mul.w	r3, r2, r3
 8002198:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	613b      	str	r3, [r7, #16]
      break;
 800219e:	e002      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021a2:	613b      	str	r3, [r7, #16]
      break;
 80021a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021a6:	693b      	ldr	r3, [r7, #16]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	007a1200 	.word	0x007a1200
 80021bc:	08005920 	.word	0x08005920
 80021c0:	08005930 	.word	0x08005930
 80021c4:	003d0900 	.word	0x003d0900

080021c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021cc:	4b02      	ldr	r3, [pc, #8]	; (80021d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	20000000 	.word	0x20000000

080021dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e0:	f7ff fff2 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	08005918 	.word	0x08005918

08002204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002208:	f7ff ffde 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	0adb      	lsrs	r3, r3, #11
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4903      	ldr	r1, [pc, #12]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	08005918 	.word	0x08005918

0800222c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <RCC_Delay+0x34>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <RCC_Delay+0x38>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0a5b      	lsrs	r3, r3, #9
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002248:	bf00      	nop
  }
  while (Delay --);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	60fa      	str	r2, [r7, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f9      	bne.n	8002248 <RCC_Delay+0x1c>
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	20000000 	.word	0x20000000
 8002264:	10624dd3 	.word	0x10624dd3

08002268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e042      	b.n	8002300 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe fee8 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2224      	movs	r2, #36	; 0x24
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fdfb 	bl	8002ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b20      	cmp	r3, #32
 8002326:	d16d      	bne.n	8002404 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_UART_Transmit+0x2c>
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e066      	b.n	8002406 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2221      	movs	r2, #33	; 0x21
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002346:	f7fe ff5f 	bl	8001208 <HAL_GetTick>
 800234a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	88fa      	ldrh	r2, [r7, #6]
 8002350:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002360:	d108      	bne.n	8002374 <HAL_UART_Transmit+0x6c>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d104      	bne.n	8002374 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	e003      	b.n	800237c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800237c:	e02a      	b.n	80023d4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2200      	movs	r2, #0
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 fb4a 	bl	8002a22 <UART_WaitOnFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e036      	b.n	8002406 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10b      	bne.n	80023b6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	3302      	adds	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	e007      	b.n	80023c6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	3301      	adds	r3, #1
 80023c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1cf      	bne.n	800237e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2200      	movs	r2, #0
 80023e6:	2140      	movs	r1, #64	; 0x40
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fb1a 	bl	8002a22 <UART_WaitOnFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e006      	b.n	8002406 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e000      	b.n	8002406 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002404:	2302      	movs	r3, #2
  }
}
 8002406:	4618      	mov	r0, r3
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	4613      	mov	r3, r2
 800241a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b20      	cmp	r3, #32
 8002426:	d121      	bne.n	800246c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_UART_Transmit_IT+0x26>
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e01a      	b.n	800246e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	88fa      	ldrh	r2, [r7, #6]
 8002448:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2221      	movs	r2, #33	; 0x21
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002466:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	4613      	mov	r3, r2
 8002484:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b20      	cmp	r3, #32
 8002490:	d112      	bne.n	80024b8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_UART_Receive_IT+0x26>
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00b      	b.n	80024ba <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	461a      	mov	r2, r3
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fb25 	bl	8002afe <UART_Start_Receive_IT>
 80024b4:	4603      	mov	r3, r0
 80024b6:	e000      	b.n	80024ba <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b0ba      	sub	sp, #232	; 0xe8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10f      	bne.n	800252a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_UART_IRQHandler+0x66>
 8002516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fc01 	bl	8002d2a <UART_Receive_IT>
      return;
 8002528:	e25b      	b.n	80029e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800252a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80de 	beq.w	80026f0 <HAL_UART_IRQHandler+0x22c>
 8002534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d106      	bne.n	800254e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002544:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80d1 	beq.w	80026f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800254e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_UART_IRQHandler+0xae>
 800255a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_UART_IRQHandler+0xd2>
 800257e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f043 0202 	orr.w	r2, r3, #2
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_UART_IRQHandler+0xf6>
 80025a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f043 0204 	orr.w	r2, r3, #4
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d011      	beq.n	80025ea <HAL_UART_IRQHandler+0x126>
 80025c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f043 0208 	orr.w	r2, r3, #8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 81f2 	beq.w	80029d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_UART_IRQHandler+0x14e>
 8002600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fb8c 	bl	8002d2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf14      	ite	ne
 8002620:	2301      	movne	r3, #1
 8002622:	2300      	moveq	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d103      	bne.n	800263e <HAL_UART_IRQHandler+0x17a>
 8002636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800263a:	2b00      	cmp	r3, #0
 800263c:	d04f      	beq.n	80026de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa96 	bl	8002b70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d041      	beq.n	80026d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3314      	adds	r3, #20
 8002658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002660:	e853 3f00 	ldrex	r3, [r3]
 8002664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800266c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3314      	adds	r3, #20
 800267a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800267e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002686:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800268a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800268e:	e841 2300 	strex	r3, r2, [r1]
 8002692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1d9      	bne.n	8002652 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d013      	beq.n	80026ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026aa:	4a7e      	ldr	r2, [pc, #504]	; (80028a4 <HAL_UART_IRQHandler+0x3e0>)
 80026ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fefa 	bl	80014ac <HAL_DMA_Abort_IT>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d016      	beq.n	80026ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026c8:	4610      	mov	r0, r2
 80026ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026cc:	e00e      	b.n	80026ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f993 	bl	80029fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	e00a      	b.n	80026ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f98f 	bl	80029fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	e006      	b.n	80026ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f98b 	bl	80029fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80026ea:	e175      	b.n	80029d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ec:	bf00      	nop
    return;
 80026ee:	e173      	b.n	80029d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	f040 814f 	bne.w	8002998 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8148 	beq.w	8002998 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8141 	beq.w	8002998 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80b6 	beq.w	80028a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002748:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8145 	beq.w	80029dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800275a:	429a      	cmp	r2, r3
 800275c:	f080 813e 	bcs.w	80029dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002766:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b20      	cmp	r3, #32
 8002770:	f000 8088 	beq.w	8002884 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	330c      	adds	r3, #12
 800277a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002782:	e853 3f00 	ldrex	r3, [r3]
 8002786:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800278a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800278e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002792:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027b0:	e841 2300 	strex	r3, r2, [r1]
 80027b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1d9      	bne.n	8002774 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3314      	adds	r3, #20
 80027c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ca:	e853 3f00 	ldrex	r3, [r3]
 80027ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3314      	adds	r3, #20
 80027e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027f0:	e841 2300 	strex	r3, r2, [r1]
 80027f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e1      	bne.n	80027c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3314      	adds	r3, #20
 8002802:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002806:	e853 3f00 	ldrex	r3, [r3]
 800280a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800280c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3314      	adds	r3, #20
 800281c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002820:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002822:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002824:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002826:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002828:	e841 2300 	strex	r3, r2, [r1]
 800282c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800282e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1e3      	bne.n	80027fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	330c      	adds	r3, #12
 8002848:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284c:	e853 3f00 	ldrex	r3, [r3]
 8002850:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002854:	f023 0310 	bic.w	r3, r3, #16
 8002858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	330c      	adds	r3, #12
 8002862:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002866:	65ba      	str	r2, [r7, #88]	; 0x58
 8002868:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800286c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e3      	bne.n	8002842 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fdd9 	bl	8001436 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002892:	b29b      	uxth	r3, r3
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	b29b      	uxth	r3, r3
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f8b6 	bl	8002a0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028a0:	e09c      	b.n	80029dc <HAL_UART_IRQHandler+0x518>
 80028a2:	bf00      	nop
 80028a4:	08002c35 	.word	0x08002c35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 808e 	beq.w	80029e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8089 	beq.w	80029e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	330c      	adds	r3, #12
 80028d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	e853 3f00 	ldrex	r3, [r3]
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028f2:	647a      	str	r2, [r7, #68]	; 0x44
 80028f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028fa:	e841 2300 	strex	r3, r2, [r1]
 80028fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e3      	bne.n	80028ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3314      	adds	r3, #20
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	e853 3f00 	ldrex	r3, [r3]
 8002914:	623b      	str	r3, [r7, #32]
   return(result);
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3314      	adds	r3, #20
 8002926:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800292a:	633a      	str	r2, [r7, #48]	; 0x30
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002932:	e841 2300 	strex	r3, r2, [r1]
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1e3      	bne.n	8002906 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	330c      	adds	r3, #12
 8002952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	e853 3f00 	ldrex	r3, [r3]
 800295a:	60fb      	str	r3, [r7, #12]
   return(result);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0310 	bic.w	r3, r3, #16
 8002962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	330c      	adds	r3, #12
 800296c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002970:	61fa      	str	r2, [r7, #28]
 8002972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002974:	69b9      	ldr	r1, [r7, #24]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	e841 2300 	strex	r3, r2, [r1]
 800297c:	617b      	str	r3, [r7, #20]
   return(result);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1e3      	bne.n	800294c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800298a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800298e:	4619      	mov	r1, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f83b 	bl	8002a0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002996:	e023      	b.n	80029e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <HAL_UART_IRQHandler+0x4f4>
 80029a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f953 	bl	8002c5c <UART_Transmit_IT>
    return;
 80029b6:	e014      	b.n	80029e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00e      	beq.n	80029e2 <HAL_UART_IRQHandler+0x51e>
 80029c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f992 	bl	8002cfa <UART_EndTransmit_IT>
    return;
 80029d6:	e004      	b.n	80029e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80029d8:	bf00      	nop
 80029da:	e002      	b.n	80029e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80029dc:	bf00      	nop
 80029de:	e000      	b.n	80029e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80029e0:	bf00      	nop
  }
}
 80029e2:	37e8      	adds	r7, #232	; 0xe8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b090      	sub	sp, #64	; 0x40
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a32:	e050      	b.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	d04c      	beq.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a42:	f7fe fbe1 	bl	8001208 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d241      	bcs.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	330c      	adds	r3, #12
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	e853 3f00 	ldrex	r3, [r3]
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	330c      	adds	r3, #12
 8002a70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a72:	637a      	str	r2, [r7, #52]	; 0x34
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a7a:	e841 2300 	strex	r3, r2, [r1]
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1e5      	bne.n	8002a52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3314      	adds	r3, #20
 8002a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	613b      	str	r3, [r7, #16]
   return(result);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3314      	adds	r3, #20
 8002aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aa6:	623a      	str	r2, [r7, #32]
 8002aa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aaa:	69f9      	ldr	r1, [r7, #28]
 8002aac:	6a3a      	ldr	r2, [r7, #32]
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e5      	bne.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e00f      	b.n	8002af6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d09f      	beq.n	8002a34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3740      	adds	r7, #64	; 0x40
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	88fa      	ldrh	r2, [r7, #6]
 8002b16:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	88fa      	ldrh	r2, [r7, #6]
 8002b1c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2222      	movs	r2, #34	; 0x22
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b42:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0220 	orr.w	r2, r2, #32
 8002b62:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b095      	sub	sp, #84	; 0x54
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	330c      	adds	r3, #12
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	e853 3f00 	ldrex	r3, [r3]
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	330c      	adds	r3, #12
 8002b96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b98:	643a      	str	r2, [r7, #64]	; 0x40
 8002b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ba0:	e841 2300 	strex	r3, r2, [r1]
 8002ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e5      	bne.n	8002b78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3314      	adds	r3, #20
 8002bb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	e853 3f00 	ldrex	r3, [r3]
 8002bba:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3314      	adds	r3, #20
 8002bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd4:	e841 2300 	strex	r3, r2, [r1]
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e5      	bne.n	8002bac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d119      	bne.n	8002c1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	e853 3f00 	ldrex	r3, [r3]
 8002bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f023 0310 	bic.w	r3, r3, #16
 8002bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	330c      	adds	r3, #12
 8002c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c08:	61ba      	str	r2, [r7, #24]
 8002c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0c:	6979      	ldr	r1, [r7, #20]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	e841 2300 	strex	r3, r2, [r1]
 8002c14:	613b      	str	r3, [r7, #16]
   return(result);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e5      	bne.n	8002be8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c2a:	bf00      	nop
 8002c2c:	3754      	adds	r7, #84	; 0x54
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f7ff fed3 	bl	80029fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b21      	cmp	r3, #33	; 0x21
 8002c6e:	d13e      	bne.n	8002cee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c78:	d114      	bne.n	8002ca4 <UART_Transmit_IT+0x48>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d110      	bne.n	8002ca4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	1c9a      	adds	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	621a      	str	r2, [r3, #32]
 8002ca2:	e008      	b.n	8002cb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	1c59      	adds	r1, r3, #1
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6211      	str	r1, [r2, #32]
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10f      	bne.n	8002cea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e000      	b.n	8002cf0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
  }
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff fe64 	bl	80029e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b08c      	sub	sp, #48	; 0x30
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b22      	cmp	r3, #34	; 0x22
 8002d3c:	f040 80ae 	bne.w	8002e9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d48:	d117      	bne.n	8002d7a <UART_Receive_IT+0x50>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d113      	bne.n	8002d7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	1c9a      	adds	r2, r3, #2
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
 8002d78:	e026      	b.n	8002dc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8c:	d007      	beq.n	8002d9e <UART_Receive_IT+0x74>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <UART_Receive_IT+0x82>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	e008      	b.n	8002dbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d15d      	bne.n	8002e98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0220 	bic.w	r2, r2, #32
 8002dea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d135      	bne.n	8002e8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	330c      	adds	r3, #12
 8002e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	e853 3f00 	ldrex	r3, [r3]
 8002e36:	613b      	str	r3, [r7, #16]
   return(result);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f023 0310 	bic.w	r3, r3, #16
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	623a      	str	r2, [r7, #32]
 8002e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4c:	69f9      	ldr	r1, [r7, #28]
 8002e4e:	6a3a      	ldr	r2, [r7, #32]
 8002e50:	e841 2300 	strex	r3, r2, [r1]
 8002e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e5      	bne.n	8002e28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d10a      	bne.n	8002e80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff fdc0 	bl	8002a0c <HAL_UARTEx_RxEventCallback>
 8002e8c:	e002      	b.n	8002e94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd ff00 	bl	8000c94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e002      	b.n	8002e9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e000      	b.n	8002e9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3730      	adds	r7, #48	; 0x30
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ee2:	f023 030c 	bic.w	r3, r3, #12
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	430b      	orrs	r3, r1
 8002eee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2c      	ldr	r2, [pc, #176]	; (8002fbc <UART_SetConfig+0x114>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d103      	bne.n	8002f18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f10:	f7ff f978 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	e002      	b.n	8002f1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f18:	f7ff f960 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8002f1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009a      	lsls	r2, r3, #2
 8002f28:	441a      	add	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <UART_SetConfig+0x118>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	0119      	lsls	r1, r3, #4
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009a      	lsls	r2, r3, #2
 8002f48:	441a      	add	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f54:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <UART_SetConfig+0x118>)
 8002f56:	fba3 0302 	umull	r0, r3, r3, r2
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2064      	movs	r0, #100	; 0x64
 8002f5e:	fb00 f303 	mul.w	r3, r0, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	3332      	adds	r3, #50	; 0x32
 8002f68:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <UART_SetConfig+0x118>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f74:	4419      	add	r1, r3
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009a      	lsls	r2, r3, #2
 8002f80:	441a      	add	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <UART_SetConfig+0x118>)
 8002f8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2064      	movs	r0, #100	; 0x64
 8002f96:	fb00 f303 	mul.w	r3, r0, r3
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	3332      	adds	r3, #50	; 0x32
 8002fa0:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <UART_SetConfig+0x118>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	f003 020f 	and.w	r2, r3, #15
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	440a      	add	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	51eb851f 	.word	0x51eb851f

08002fc4 <__cvt>:
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fca:	461f      	mov	r7, r3
 8002fcc:	bfbb      	ittet	lt
 8002fce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002fd2:	461f      	movlt	r7, r3
 8002fd4:	2300      	movge	r3, #0
 8002fd6:	232d      	movlt	r3, #45	; 0x2d
 8002fd8:	b088      	sub	sp, #32
 8002fda:	4614      	mov	r4, r2
 8002fdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002fde:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002fe0:	7013      	strb	r3, [r2, #0]
 8002fe2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002fe4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002fe8:	f023 0820 	bic.w	r8, r3, #32
 8002fec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ff0:	d005      	beq.n	8002ffe <__cvt+0x3a>
 8002ff2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002ff6:	d100      	bne.n	8002ffa <__cvt+0x36>
 8002ff8:	3501      	adds	r5, #1
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e000      	b.n	8003000 <__cvt+0x3c>
 8002ffe:	2303      	movs	r3, #3
 8003000:	aa07      	add	r2, sp, #28
 8003002:	9204      	str	r2, [sp, #16]
 8003004:	aa06      	add	r2, sp, #24
 8003006:	e9cd a202 	strd	sl, r2, [sp, #8]
 800300a:	e9cd 3500 	strd	r3, r5, [sp]
 800300e:	4622      	mov	r2, r4
 8003010:	463b      	mov	r3, r7
 8003012:	f000 fe41 	bl	8003c98 <_dtoa_r>
 8003016:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800301a:	4606      	mov	r6, r0
 800301c:	d102      	bne.n	8003024 <__cvt+0x60>
 800301e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003020:	07db      	lsls	r3, r3, #31
 8003022:	d522      	bpl.n	800306a <__cvt+0xa6>
 8003024:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003028:	eb06 0905 	add.w	r9, r6, r5
 800302c:	d110      	bne.n	8003050 <__cvt+0x8c>
 800302e:	7833      	ldrb	r3, [r6, #0]
 8003030:	2b30      	cmp	r3, #48	; 0x30
 8003032:	d10a      	bne.n	800304a <__cvt+0x86>
 8003034:	2200      	movs	r2, #0
 8003036:	2300      	movs	r3, #0
 8003038:	4620      	mov	r0, r4
 800303a:	4639      	mov	r1, r7
 800303c:	f7fd fd20 	bl	8000a80 <__aeabi_dcmpeq>
 8003040:	b918      	cbnz	r0, 800304a <__cvt+0x86>
 8003042:	f1c5 0501 	rsb	r5, r5, #1
 8003046:	f8ca 5000 	str.w	r5, [sl]
 800304a:	f8da 3000 	ldr.w	r3, [sl]
 800304e:	4499      	add	r9, r3
 8003050:	2200      	movs	r2, #0
 8003052:	2300      	movs	r3, #0
 8003054:	4620      	mov	r0, r4
 8003056:	4639      	mov	r1, r7
 8003058:	f7fd fd12 	bl	8000a80 <__aeabi_dcmpeq>
 800305c:	b108      	cbz	r0, 8003062 <__cvt+0x9e>
 800305e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003062:	2230      	movs	r2, #48	; 0x30
 8003064:	9b07      	ldr	r3, [sp, #28]
 8003066:	454b      	cmp	r3, r9
 8003068:	d307      	bcc.n	800307a <__cvt+0xb6>
 800306a:	4630      	mov	r0, r6
 800306c:	9b07      	ldr	r3, [sp, #28]
 800306e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003070:	1b9b      	subs	r3, r3, r6
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	b008      	add	sp, #32
 8003076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800307a:	1c59      	adds	r1, r3, #1
 800307c:	9107      	str	r1, [sp, #28]
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	e7f0      	b.n	8003064 <__cvt+0xa0>

08003082 <__exponent>:
 8003082:	4603      	mov	r3, r0
 8003084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003086:	2900      	cmp	r1, #0
 8003088:	f803 2b02 	strb.w	r2, [r3], #2
 800308c:	bfb6      	itet	lt
 800308e:	222d      	movlt	r2, #45	; 0x2d
 8003090:	222b      	movge	r2, #43	; 0x2b
 8003092:	4249      	neglt	r1, r1
 8003094:	2909      	cmp	r1, #9
 8003096:	7042      	strb	r2, [r0, #1]
 8003098:	dd2a      	ble.n	80030f0 <__exponent+0x6e>
 800309a:	f10d 0207 	add.w	r2, sp, #7
 800309e:	4617      	mov	r7, r2
 80030a0:	260a      	movs	r6, #10
 80030a2:	fb91 f5f6 	sdiv	r5, r1, r6
 80030a6:	4694      	mov	ip, r2
 80030a8:	fb06 1415 	mls	r4, r6, r5, r1
 80030ac:	3430      	adds	r4, #48	; 0x30
 80030ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80030b2:	460c      	mov	r4, r1
 80030b4:	2c63      	cmp	r4, #99	; 0x63
 80030b6:	4629      	mov	r1, r5
 80030b8:	f102 32ff 	add.w	r2, r2, #4294967295
 80030bc:	dcf1      	bgt.n	80030a2 <__exponent+0x20>
 80030be:	3130      	adds	r1, #48	; 0x30
 80030c0:	f1ac 0402 	sub.w	r4, ip, #2
 80030c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80030c8:	4622      	mov	r2, r4
 80030ca:	1c41      	adds	r1, r0, #1
 80030cc:	42ba      	cmp	r2, r7
 80030ce:	d30a      	bcc.n	80030e6 <__exponent+0x64>
 80030d0:	f10d 0209 	add.w	r2, sp, #9
 80030d4:	eba2 020c 	sub.w	r2, r2, ip
 80030d8:	42bc      	cmp	r4, r7
 80030da:	bf88      	it	hi
 80030dc:	2200      	movhi	r2, #0
 80030de:	4413      	add	r3, r2
 80030e0:	1a18      	subs	r0, r3, r0
 80030e2:	b003      	add	sp, #12
 80030e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80030ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80030ee:	e7ed      	b.n	80030cc <__exponent+0x4a>
 80030f0:	2330      	movs	r3, #48	; 0x30
 80030f2:	3130      	adds	r1, #48	; 0x30
 80030f4:	7083      	strb	r3, [r0, #2]
 80030f6:	70c1      	strb	r1, [r0, #3]
 80030f8:	1d03      	adds	r3, r0, #4
 80030fa:	e7f1      	b.n	80030e0 <__exponent+0x5e>

080030fc <_printf_float>:
 80030fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003100:	b091      	sub	sp, #68	; 0x44
 8003102:	460c      	mov	r4, r1
 8003104:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003108:	4616      	mov	r6, r2
 800310a:	461f      	mov	r7, r3
 800310c:	4605      	mov	r5, r0
 800310e:	f000 fcb3 	bl	8003a78 <_localeconv_r>
 8003112:	6803      	ldr	r3, [r0, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	9309      	str	r3, [sp, #36]	; 0x24
 8003118:	f7fd f886 	bl	8000228 <strlen>
 800311c:	2300      	movs	r3, #0
 800311e:	930e      	str	r3, [sp, #56]	; 0x38
 8003120:	f8d8 3000 	ldr.w	r3, [r8]
 8003124:	900a      	str	r0, [sp, #40]	; 0x28
 8003126:	3307      	adds	r3, #7
 8003128:	f023 0307 	bic.w	r3, r3, #7
 800312c:	f103 0208 	add.w	r2, r3, #8
 8003130:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003134:	f8d4 b000 	ldr.w	fp, [r4]
 8003138:	f8c8 2000 	str.w	r2, [r8]
 800313c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003140:	4652      	mov	r2, sl
 8003142:	4643      	mov	r3, r8
 8003144:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003148:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800314c:	930b      	str	r3, [sp, #44]	; 0x2c
 800314e:	f04f 32ff 	mov.w	r2, #4294967295
 8003152:	4650      	mov	r0, sl
 8003154:	4b9c      	ldr	r3, [pc, #624]	; (80033c8 <_printf_float+0x2cc>)
 8003156:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003158:	f7fd fcc4 	bl	8000ae4 <__aeabi_dcmpun>
 800315c:	bb70      	cbnz	r0, 80031bc <_printf_float+0xc0>
 800315e:	f04f 32ff 	mov.w	r2, #4294967295
 8003162:	4650      	mov	r0, sl
 8003164:	4b98      	ldr	r3, [pc, #608]	; (80033c8 <_printf_float+0x2cc>)
 8003166:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003168:	f7fd fc9e 	bl	8000aa8 <__aeabi_dcmple>
 800316c:	bb30      	cbnz	r0, 80031bc <_printf_float+0xc0>
 800316e:	2200      	movs	r2, #0
 8003170:	2300      	movs	r3, #0
 8003172:	4650      	mov	r0, sl
 8003174:	4641      	mov	r1, r8
 8003176:	f7fd fc8d 	bl	8000a94 <__aeabi_dcmplt>
 800317a:	b110      	cbz	r0, 8003182 <_printf_float+0x86>
 800317c:	232d      	movs	r3, #45	; 0x2d
 800317e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003182:	4a92      	ldr	r2, [pc, #584]	; (80033cc <_printf_float+0x2d0>)
 8003184:	4b92      	ldr	r3, [pc, #584]	; (80033d0 <_printf_float+0x2d4>)
 8003186:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800318a:	bf94      	ite	ls
 800318c:	4690      	movls	r8, r2
 800318e:	4698      	movhi	r8, r3
 8003190:	2303      	movs	r3, #3
 8003192:	f04f 0a00 	mov.w	sl, #0
 8003196:	6123      	str	r3, [r4, #16]
 8003198:	f02b 0304 	bic.w	r3, fp, #4
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	4633      	mov	r3, r6
 80031a0:	4621      	mov	r1, r4
 80031a2:	4628      	mov	r0, r5
 80031a4:	9700      	str	r7, [sp, #0]
 80031a6:	aa0f      	add	r2, sp, #60	; 0x3c
 80031a8:	f000 f9d6 	bl	8003558 <_printf_common>
 80031ac:	3001      	adds	r0, #1
 80031ae:	f040 8090 	bne.w	80032d2 <_printf_float+0x1d6>
 80031b2:	f04f 30ff 	mov.w	r0, #4294967295
 80031b6:	b011      	add	sp, #68	; 0x44
 80031b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031bc:	4652      	mov	r2, sl
 80031be:	4643      	mov	r3, r8
 80031c0:	4650      	mov	r0, sl
 80031c2:	4641      	mov	r1, r8
 80031c4:	f7fd fc8e 	bl	8000ae4 <__aeabi_dcmpun>
 80031c8:	b148      	cbz	r0, 80031de <_printf_float+0xe2>
 80031ca:	f1b8 0f00 	cmp.w	r8, #0
 80031ce:	bfb8      	it	lt
 80031d0:	232d      	movlt	r3, #45	; 0x2d
 80031d2:	4a80      	ldr	r2, [pc, #512]	; (80033d4 <_printf_float+0x2d8>)
 80031d4:	bfb8      	it	lt
 80031d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80031da:	4b7f      	ldr	r3, [pc, #508]	; (80033d8 <_printf_float+0x2dc>)
 80031dc:	e7d3      	b.n	8003186 <_printf_float+0x8a>
 80031de:	6863      	ldr	r3, [r4, #4]
 80031e0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	d142      	bne.n	800326e <_printf_float+0x172>
 80031e8:	2306      	movs	r3, #6
 80031ea:	6063      	str	r3, [r4, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	9206      	str	r2, [sp, #24]
 80031f0:	aa0e      	add	r2, sp, #56	; 0x38
 80031f2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80031f6:	aa0d      	add	r2, sp, #52	; 0x34
 80031f8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80031fc:	9203      	str	r2, [sp, #12]
 80031fe:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003202:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003206:	6023      	str	r3, [r4, #0]
 8003208:	6863      	ldr	r3, [r4, #4]
 800320a:	4652      	mov	r2, sl
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	4628      	mov	r0, r5
 8003210:	4643      	mov	r3, r8
 8003212:	910b      	str	r1, [sp, #44]	; 0x2c
 8003214:	f7ff fed6 	bl	8002fc4 <__cvt>
 8003218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800321a:	4680      	mov	r8, r0
 800321c:	2947      	cmp	r1, #71	; 0x47
 800321e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003220:	d108      	bne.n	8003234 <_printf_float+0x138>
 8003222:	1cc8      	adds	r0, r1, #3
 8003224:	db02      	blt.n	800322c <_printf_float+0x130>
 8003226:	6863      	ldr	r3, [r4, #4]
 8003228:	4299      	cmp	r1, r3
 800322a:	dd40      	ble.n	80032ae <_printf_float+0x1b2>
 800322c:	f1a9 0902 	sub.w	r9, r9, #2
 8003230:	fa5f f989 	uxtb.w	r9, r9
 8003234:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003238:	d81f      	bhi.n	800327a <_printf_float+0x17e>
 800323a:	464a      	mov	r2, r9
 800323c:	3901      	subs	r1, #1
 800323e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003242:	910d      	str	r1, [sp, #52]	; 0x34
 8003244:	f7ff ff1d 	bl	8003082 <__exponent>
 8003248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800324a:	4682      	mov	sl, r0
 800324c:	1813      	adds	r3, r2, r0
 800324e:	2a01      	cmp	r2, #1
 8003250:	6123      	str	r3, [r4, #16]
 8003252:	dc02      	bgt.n	800325a <_printf_float+0x15e>
 8003254:	6822      	ldr	r2, [r4, #0]
 8003256:	07d2      	lsls	r2, r2, #31
 8003258:	d501      	bpl.n	800325e <_printf_float+0x162>
 800325a:	3301      	adds	r3, #1
 800325c:	6123      	str	r3, [r4, #16]
 800325e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003262:	2b00      	cmp	r3, #0
 8003264:	d09b      	beq.n	800319e <_printf_float+0xa2>
 8003266:	232d      	movs	r3, #45	; 0x2d
 8003268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800326c:	e797      	b.n	800319e <_printf_float+0xa2>
 800326e:	2947      	cmp	r1, #71	; 0x47
 8003270:	d1bc      	bne.n	80031ec <_printf_float+0xf0>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1ba      	bne.n	80031ec <_printf_float+0xf0>
 8003276:	2301      	movs	r3, #1
 8003278:	e7b7      	b.n	80031ea <_printf_float+0xee>
 800327a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800327e:	d118      	bne.n	80032b2 <_printf_float+0x1b6>
 8003280:	2900      	cmp	r1, #0
 8003282:	6863      	ldr	r3, [r4, #4]
 8003284:	dd0b      	ble.n	800329e <_printf_float+0x1a2>
 8003286:	6121      	str	r1, [r4, #16]
 8003288:	b913      	cbnz	r3, 8003290 <_printf_float+0x194>
 800328a:	6822      	ldr	r2, [r4, #0]
 800328c:	07d0      	lsls	r0, r2, #31
 800328e:	d502      	bpl.n	8003296 <_printf_float+0x19a>
 8003290:	3301      	adds	r3, #1
 8003292:	440b      	add	r3, r1
 8003294:	6123      	str	r3, [r4, #16]
 8003296:	f04f 0a00 	mov.w	sl, #0
 800329a:	65a1      	str	r1, [r4, #88]	; 0x58
 800329c:	e7df      	b.n	800325e <_printf_float+0x162>
 800329e:	b913      	cbnz	r3, 80032a6 <_printf_float+0x1aa>
 80032a0:	6822      	ldr	r2, [r4, #0]
 80032a2:	07d2      	lsls	r2, r2, #31
 80032a4:	d501      	bpl.n	80032aa <_printf_float+0x1ae>
 80032a6:	3302      	adds	r3, #2
 80032a8:	e7f4      	b.n	8003294 <_printf_float+0x198>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e7f2      	b.n	8003294 <_printf_float+0x198>
 80032ae:	f04f 0967 	mov.w	r9, #103	; 0x67
 80032b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032b4:	4299      	cmp	r1, r3
 80032b6:	db05      	blt.n	80032c4 <_printf_float+0x1c8>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	6121      	str	r1, [r4, #16]
 80032bc:	07d8      	lsls	r0, r3, #31
 80032be:	d5ea      	bpl.n	8003296 <_printf_float+0x19a>
 80032c0:	1c4b      	adds	r3, r1, #1
 80032c2:	e7e7      	b.n	8003294 <_printf_float+0x198>
 80032c4:	2900      	cmp	r1, #0
 80032c6:	bfcc      	ite	gt
 80032c8:	2201      	movgt	r2, #1
 80032ca:	f1c1 0202 	rsble	r2, r1, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	e7e0      	b.n	8003294 <_printf_float+0x198>
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	055a      	lsls	r2, r3, #21
 80032d6:	d407      	bmi.n	80032e8 <_printf_float+0x1ec>
 80032d8:	6923      	ldr	r3, [r4, #16]
 80032da:	4642      	mov	r2, r8
 80032dc:	4631      	mov	r1, r6
 80032de:	4628      	mov	r0, r5
 80032e0:	47b8      	blx	r7
 80032e2:	3001      	adds	r0, #1
 80032e4:	d12b      	bne.n	800333e <_printf_float+0x242>
 80032e6:	e764      	b.n	80031b2 <_printf_float+0xb6>
 80032e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80032ec:	f240 80dd 	bls.w	80034aa <_printf_float+0x3ae>
 80032f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80032f4:	2200      	movs	r2, #0
 80032f6:	2300      	movs	r3, #0
 80032f8:	f7fd fbc2 	bl	8000a80 <__aeabi_dcmpeq>
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d033      	beq.n	8003368 <_printf_float+0x26c>
 8003300:	2301      	movs	r3, #1
 8003302:	4631      	mov	r1, r6
 8003304:	4628      	mov	r0, r5
 8003306:	4a35      	ldr	r2, [pc, #212]	; (80033dc <_printf_float+0x2e0>)
 8003308:	47b8      	blx	r7
 800330a:	3001      	adds	r0, #1
 800330c:	f43f af51 	beq.w	80031b2 <_printf_float+0xb6>
 8003310:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003314:	429a      	cmp	r2, r3
 8003316:	db02      	blt.n	800331e <_printf_float+0x222>
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	07d8      	lsls	r0, r3, #31
 800331c:	d50f      	bpl.n	800333e <_printf_float+0x242>
 800331e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003322:	4631      	mov	r1, r6
 8003324:	4628      	mov	r0, r5
 8003326:	47b8      	blx	r7
 8003328:	3001      	adds	r0, #1
 800332a:	f43f af42 	beq.w	80031b2 <_printf_float+0xb6>
 800332e:	f04f 0800 	mov.w	r8, #0
 8003332:	f104 091a 	add.w	r9, r4, #26
 8003336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003338:	3b01      	subs	r3, #1
 800333a:	4543      	cmp	r3, r8
 800333c:	dc09      	bgt.n	8003352 <_printf_float+0x256>
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	079b      	lsls	r3, r3, #30
 8003342:	f100 8104 	bmi.w	800354e <_printf_float+0x452>
 8003346:	68e0      	ldr	r0, [r4, #12]
 8003348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800334a:	4298      	cmp	r0, r3
 800334c:	bfb8      	it	lt
 800334e:	4618      	movlt	r0, r3
 8003350:	e731      	b.n	80031b6 <_printf_float+0xba>
 8003352:	2301      	movs	r3, #1
 8003354:	464a      	mov	r2, r9
 8003356:	4631      	mov	r1, r6
 8003358:	4628      	mov	r0, r5
 800335a:	47b8      	blx	r7
 800335c:	3001      	adds	r0, #1
 800335e:	f43f af28 	beq.w	80031b2 <_printf_float+0xb6>
 8003362:	f108 0801 	add.w	r8, r8, #1
 8003366:	e7e6      	b.n	8003336 <_printf_float+0x23a>
 8003368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800336a:	2b00      	cmp	r3, #0
 800336c:	dc38      	bgt.n	80033e0 <_printf_float+0x2e4>
 800336e:	2301      	movs	r3, #1
 8003370:	4631      	mov	r1, r6
 8003372:	4628      	mov	r0, r5
 8003374:	4a19      	ldr	r2, [pc, #100]	; (80033dc <_printf_float+0x2e0>)
 8003376:	47b8      	blx	r7
 8003378:	3001      	adds	r0, #1
 800337a:	f43f af1a 	beq.w	80031b2 <_printf_float+0xb6>
 800337e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003382:	4313      	orrs	r3, r2
 8003384:	d102      	bne.n	800338c <_printf_float+0x290>
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	07d9      	lsls	r1, r3, #31
 800338a:	d5d8      	bpl.n	800333e <_printf_float+0x242>
 800338c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003390:	4631      	mov	r1, r6
 8003392:	4628      	mov	r0, r5
 8003394:	47b8      	blx	r7
 8003396:	3001      	adds	r0, #1
 8003398:	f43f af0b 	beq.w	80031b2 <_printf_float+0xb6>
 800339c:	f04f 0900 	mov.w	r9, #0
 80033a0:	f104 0a1a 	add.w	sl, r4, #26
 80033a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033a6:	425b      	negs	r3, r3
 80033a8:	454b      	cmp	r3, r9
 80033aa:	dc01      	bgt.n	80033b0 <_printf_float+0x2b4>
 80033ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033ae:	e794      	b.n	80032da <_printf_float+0x1de>
 80033b0:	2301      	movs	r3, #1
 80033b2:	4652      	mov	r2, sl
 80033b4:	4631      	mov	r1, r6
 80033b6:	4628      	mov	r0, r5
 80033b8:	47b8      	blx	r7
 80033ba:	3001      	adds	r0, #1
 80033bc:	f43f aef9 	beq.w	80031b2 <_printf_float+0xb6>
 80033c0:	f109 0901 	add.w	r9, r9, #1
 80033c4:	e7ee      	b.n	80033a4 <_printf_float+0x2a8>
 80033c6:	bf00      	nop
 80033c8:	7fefffff 	.word	0x7fefffff
 80033cc:	08005932 	.word	0x08005932
 80033d0:	08005936 	.word	0x08005936
 80033d4:	0800593a 	.word	0x0800593a
 80033d8:	0800593e 	.word	0x0800593e
 80033dc:	08005942 	.word	0x08005942
 80033e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033e4:	429a      	cmp	r2, r3
 80033e6:	bfa8      	it	ge
 80033e8:	461a      	movge	r2, r3
 80033ea:	2a00      	cmp	r2, #0
 80033ec:	4691      	mov	r9, r2
 80033ee:	dc37      	bgt.n	8003460 <_printf_float+0x364>
 80033f0:	f04f 0b00 	mov.w	fp, #0
 80033f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033f8:	f104 021a 	add.w	r2, r4, #26
 80033fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003400:	ebaa 0309 	sub.w	r3, sl, r9
 8003404:	455b      	cmp	r3, fp
 8003406:	dc33      	bgt.n	8003470 <_printf_float+0x374>
 8003408:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800340c:	429a      	cmp	r2, r3
 800340e:	db3b      	blt.n	8003488 <_printf_float+0x38c>
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	07da      	lsls	r2, r3, #31
 8003414:	d438      	bmi.n	8003488 <_printf_float+0x38c>
 8003416:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800341a:	eba2 0903 	sub.w	r9, r2, r3
 800341e:	eba2 020a 	sub.w	r2, r2, sl
 8003422:	4591      	cmp	r9, r2
 8003424:	bfa8      	it	ge
 8003426:	4691      	movge	r9, r2
 8003428:	f1b9 0f00 	cmp.w	r9, #0
 800342c:	dc34      	bgt.n	8003498 <_printf_float+0x39c>
 800342e:	f04f 0800 	mov.w	r8, #0
 8003432:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003436:	f104 0a1a 	add.w	sl, r4, #26
 800343a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	eba3 0309 	sub.w	r3, r3, r9
 8003444:	4543      	cmp	r3, r8
 8003446:	f77f af7a 	ble.w	800333e <_printf_float+0x242>
 800344a:	2301      	movs	r3, #1
 800344c:	4652      	mov	r2, sl
 800344e:	4631      	mov	r1, r6
 8003450:	4628      	mov	r0, r5
 8003452:	47b8      	blx	r7
 8003454:	3001      	adds	r0, #1
 8003456:	f43f aeac 	beq.w	80031b2 <_printf_float+0xb6>
 800345a:	f108 0801 	add.w	r8, r8, #1
 800345e:	e7ec      	b.n	800343a <_printf_float+0x33e>
 8003460:	4613      	mov	r3, r2
 8003462:	4631      	mov	r1, r6
 8003464:	4642      	mov	r2, r8
 8003466:	4628      	mov	r0, r5
 8003468:	47b8      	blx	r7
 800346a:	3001      	adds	r0, #1
 800346c:	d1c0      	bne.n	80033f0 <_printf_float+0x2f4>
 800346e:	e6a0      	b.n	80031b2 <_printf_float+0xb6>
 8003470:	2301      	movs	r3, #1
 8003472:	4631      	mov	r1, r6
 8003474:	4628      	mov	r0, r5
 8003476:	920b      	str	r2, [sp, #44]	; 0x2c
 8003478:	47b8      	blx	r7
 800347a:	3001      	adds	r0, #1
 800347c:	f43f ae99 	beq.w	80031b2 <_printf_float+0xb6>
 8003480:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003482:	f10b 0b01 	add.w	fp, fp, #1
 8003486:	e7b9      	b.n	80033fc <_printf_float+0x300>
 8003488:	4631      	mov	r1, r6
 800348a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800348e:	4628      	mov	r0, r5
 8003490:	47b8      	blx	r7
 8003492:	3001      	adds	r0, #1
 8003494:	d1bf      	bne.n	8003416 <_printf_float+0x31a>
 8003496:	e68c      	b.n	80031b2 <_printf_float+0xb6>
 8003498:	464b      	mov	r3, r9
 800349a:	4631      	mov	r1, r6
 800349c:	4628      	mov	r0, r5
 800349e:	eb08 020a 	add.w	r2, r8, sl
 80034a2:	47b8      	blx	r7
 80034a4:	3001      	adds	r0, #1
 80034a6:	d1c2      	bne.n	800342e <_printf_float+0x332>
 80034a8:	e683      	b.n	80031b2 <_printf_float+0xb6>
 80034aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034ac:	2a01      	cmp	r2, #1
 80034ae:	dc01      	bgt.n	80034b4 <_printf_float+0x3b8>
 80034b0:	07db      	lsls	r3, r3, #31
 80034b2:	d539      	bpl.n	8003528 <_printf_float+0x42c>
 80034b4:	2301      	movs	r3, #1
 80034b6:	4642      	mov	r2, r8
 80034b8:	4631      	mov	r1, r6
 80034ba:	4628      	mov	r0, r5
 80034bc:	47b8      	blx	r7
 80034be:	3001      	adds	r0, #1
 80034c0:	f43f ae77 	beq.w	80031b2 <_printf_float+0xb6>
 80034c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034c8:	4631      	mov	r1, r6
 80034ca:	4628      	mov	r0, r5
 80034cc:	47b8      	blx	r7
 80034ce:	3001      	adds	r0, #1
 80034d0:	f43f ae6f 	beq.w	80031b2 <_printf_float+0xb6>
 80034d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034d8:	2200      	movs	r2, #0
 80034da:	2300      	movs	r3, #0
 80034dc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80034e0:	f7fd face 	bl	8000a80 <__aeabi_dcmpeq>
 80034e4:	b9d8      	cbnz	r0, 800351e <_printf_float+0x422>
 80034e6:	f109 33ff 	add.w	r3, r9, #4294967295
 80034ea:	f108 0201 	add.w	r2, r8, #1
 80034ee:	4631      	mov	r1, r6
 80034f0:	4628      	mov	r0, r5
 80034f2:	47b8      	blx	r7
 80034f4:	3001      	adds	r0, #1
 80034f6:	d10e      	bne.n	8003516 <_printf_float+0x41a>
 80034f8:	e65b      	b.n	80031b2 <_printf_float+0xb6>
 80034fa:	2301      	movs	r3, #1
 80034fc:	464a      	mov	r2, r9
 80034fe:	4631      	mov	r1, r6
 8003500:	4628      	mov	r0, r5
 8003502:	47b8      	blx	r7
 8003504:	3001      	adds	r0, #1
 8003506:	f43f ae54 	beq.w	80031b2 <_printf_float+0xb6>
 800350a:	f108 0801 	add.w	r8, r8, #1
 800350e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003510:	3b01      	subs	r3, #1
 8003512:	4543      	cmp	r3, r8
 8003514:	dcf1      	bgt.n	80034fa <_printf_float+0x3fe>
 8003516:	4653      	mov	r3, sl
 8003518:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800351c:	e6de      	b.n	80032dc <_printf_float+0x1e0>
 800351e:	f04f 0800 	mov.w	r8, #0
 8003522:	f104 091a 	add.w	r9, r4, #26
 8003526:	e7f2      	b.n	800350e <_printf_float+0x412>
 8003528:	2301      	movs	r3, #1
 800352a:	4642      	mov	r2, r8
 800352c:	e7df      	b.n	80034ee <_printf_float+0x3f2>
 800352e:	2301      	movs	r3, #1
 8003530:	464a      	mov	r2, r9
 8003532:	4631      	mov	r1, r6
 8003534:	4628      	mov	r0, r5
 8003536:	47b8      	blx	r7
 8003538:	3001      	adds	r0, #1
 800353a:	f43f ae3a 	beq.w	80031b2 <_printf_float+0xb6>
 800353e:	f108 0801 	add.w	r8, r8, #1
 8003542:	68e3      	ldr	r3, [r4, #12]
 8003544:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003546:	1a5b      	subs	r3, r3, r1
 8003548:	4543      	cmp	r3, r8
 800354a:	dcf0      	bgt.n	800352e <_printf_float+0x432>
 800354c:	e6fb      	b.n	8003346 <_printf_float+0x24a>
 800354e:	f04f 0800 	mov.w	r8, #0
 8003552:	f104 0919 	add.w	r9, r4, #25
 8003556:	e7f4      	b.n	8003542 <_printf_float+0x446>

08003558 <_printf_common>:
 8003558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800355c:	4616      	mov	r6, r2
 800355e:	4699      	mov	r9, r3
 8003560:	688a      	ldr	r2, [r1, #8]
 8003562:	690b      	ldr	r3, [r1, #16]
 8003564:	4607      	mov	r7, r0
 8003566:	4293      	cmp	r3, r2
 8003568:	bfb8      	it	lt
 800356a:	4613      	movlt	r3, r2
 800356c:	6033      	str	r3, [r6, #0]
 800356e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003572:	460c      	mov	r4, r1
 8003574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003578:	b10a      	cbz	r2, 800357e <_printf_common+0x26>
 800357a:	3301      	adds	r3, #1
 800357c:	6033      	str	r3, [r6, #0]
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	0699      	lsls	r1, r3, #26
 8003582:	bf42      	ittt	mi
 8003584:	6833      	ldrmi	r3, [r6, #0]
 8003586:	3302      	addmi	r3, #2
 8003588:	6033      	strmi	r3, [r6, #0]
 800358a:	6825      	ldr	r5, [r4, #0]
 800358c:	f015 0506 	ands.w	r5, r5, #6
 8003590:	d106      	bne.n	80035a0 <_printf_common+0x48>
 8003592:	f104 0a19 	add.w	sl, r4, #25
 8003596:	68e3      	ldr	r3, [r4, #12]
 8003598:	6832      	ldr	r2, [r6, #0]
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	42ab      	cmp	r3, r5
 800359e:	dc2b      	bgt.n	80035f8 <_printf_common+0xa0>
 80035a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035a4:	1e13      	subs	r3, r2, #0
 80035a6:	6822      	ldr	r2, [r4, #0]
 80035a8:	bf18      	it	ne
 80035aa:	2301      	movne	r3, #1
 80035ac:	0692      	lsls	r2, r2, #26
 80035ae:	d430      	bmi.n	8003612 <_printf_common+0xba>
 80035b0:	4649      	mov	r1, r9
 80035b2:	4638      	mov	r0, r7
 80035b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035b8:	47c0      	blx	r8
 80035ba:	3001      	adds	r0, #1
 80035bc:	d023      	beq.n	8003606 <_printf_common+0xae>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	6922      	ldr	r2, [r4, #16]
 80035c2:	f003 0306 	and.w	r3, r3, #6
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	bf14      	ite	ne
 80035ca:	2500      	movne	r5, #0
 80035cc:	6833      	ldreq	r3, [r6, #0]
 80035ce:	f04f 0600 	mov.w	r6, #0
 80035d2:	bf08      	it	eq
 80035d4:	68e5      	ldreq	r5, [r4, #12]
 80035d6:	f104 041a 	add.w	r4, r4, #26
 80035da:	bf08      	it	eq
 80035dc:	1aed      	subeq	r5, r5, r3
 80035de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035e2:	bf08      	it	eq
 80035e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035e8:	4293      	cmp	r3, r2
 80035ea:	bfc4      	itt	gt
 80035ec:	1a9b      	subgt	r3, r3, r2
 80035ee:	18ed      	addgt	r5, r5, r3
 80035f0:	42b5      	cmp	r5, r6
 80035f2:	d11a      	bne.n	800362a <_printf_common+0xd2>
 80035f4:	2000      	movs	r0, #0
 80035f6:	e008      	b.n	800360a <_printf_common+0xb2>
 80035f8:	2301      	movs	r3, #1
 80035fa:	4652      	mov	r2, sl
 80035fc:	4649      	mov	r1, r9
 80035fe:	4638      	mov	r0, r7
 8003600:	47c0      	blx	r8
 8003602:	3001      	adds	r0, #1
 8003604:	d103      	bne.n	800360e <_printf_common+0xb6>
 8003606:	f04f 30ff 	mov.w	r0, #4294967295
 800360a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800360e:	3501      	adds	r5, #1
 8003610:	e7c1      	b.n	8003596 <_printf_common+0x3e>
 8003612:	2030      	movs	r0, #48	; 0x30
 8003614:	18e1      	adds	r1, r4, r3
 8003616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003620:	4422      	add	r2, r4
 8003622:	3302      	adds	r3, #2
 8003624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003628:	e7c2      	b.n	80035b0 <_printf_common+0x58>
 800362a:	2301      	movs	r3, #1
 800362c:	4622      	mov	r2, r4
 800362e:	4649      	mov	r1, r9
 8003630:	4638      	mov	r0, r7
 8003632:	47c0      	blx	r8
 8003634:	3001      	adds	r0, #1
 8003636:	d0e6      	beq.n	8003606 <_printf_common+0xae>
 8003638:	3601      	adds	r6, #1
 800363a:	e7d9      	b.n	80035f0 <_printf_common+0x98>

0800363c <_printf_i>:
 800363c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003640:	7e0f      	ldrb	r7, [r1, #24]
 8003642:	4691      	mov	r9, r2
 8003644:	2f78      	cmp	r7, #120	; 0x78
 8003646:	4680      	mov	r8, r0
 8003648:	460c      	mov	r4, r1
 800364a:	469a      	mov	sl, r3
 800364c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800364e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003652:	d807      	bhi.n	8003664 <_printf_i+0x28>
 8003654:	2f62      	cmp	r7, #98	; 0x62
 8003656:	d80a      	bhi.n	800366e <_printf_i+0x32>
 8003658:	2f00      	cmp	r7, #0
 800365a:	f000 80d5 	beq.w	8003808 <_printf_i+0x1cc>
 800365e:	2f58      	cmp	r7, #88	; 0x58
 8003660:	f000 80c1 	beq.w	80037e6 <_printf_i+0x1aa>
 8003664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800366c:	e03a      	b.n	80036e4 <_printf_i+0xa8>
 800366e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003672:	2b15      	cmp	r3, #21
 8003674:	d8f6      	bhi.n	8003664 <_printf_i+0x28>
 8003676:	a101      	add	r1, pc, #4	; (adr r1, 800367c <_printf_i+0x40>)
 8003678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800367c:	080036d5 	.word	0x080036d5
 8003680:	080036e9 	.word	0x080036e9
 8003684:	08003665 	.word	0x08003665
 8003688:	08003665 	.word	0x08003665
 800368c:	08003665 	.word	0x08003665
 8003690:	08003665 	.word	0x08003665
 8003694:	080036e9 	.word	0x080036e9
 8003698:	08003665 	.word	0x08003665
 800369c:	08003665 	.word	0x08003665
 80036a0:	08003665 	.word	0x08003665
 80036a4:	08003665 	.word	0x08003665
 80036a8:	080037ef 	.word	0x080037ef
 80036ac:	08003715 	.word	0x08003715
 80036b0:	080037a9 	.word	0x080037a9
 80036b4:	08003665 	.word	0x08003665
 80036b8:	08003665 	.word	0x08003665
 80036bc:	08003811 	.word	0x08003811
 80036c0:	08003665 	.word	0x08003665
 80036c4:	08003715 	.word	0x08003715
 80036c8:	08003665 	.word	0x08003665
 80036cc:	08003665 	.word	0x08003665
 80036d0:	080037b1 	.word	0x080037b1
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	1d1a      	adds	r2, r3, #4
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	602a      	str	r2, [r5, #0]
 80036dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0a0      	b.n	800382a <_printf_i+0x1ee>
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	682b      	ldr	r3, [r5, #0]
 80036ec:	0607      	lsls	r7, r0, #24
 80036ee:	f103 0104 	add.w	r1, r3, #4
 80036f2:	6029      	str	r1, [r5, #0]
 80036f4:	d501      	bpl.n	80036fa <_printf_i+0xbe>
 80036f6:	681e      	ldr	r6, [r3, #0]
 80036f8:	e003      	b.n	8003702 <_printf_i+0xc6>
 80036fa:	0646      	lsls	r6, r0, #25
 80036fc:	d5fb      	bpl.n	80036f6 <_printf_i+0xba>
 80036fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003702:	2e00      	cmp	r6, #0
 8003704:	da03      	bge.n	800370e <_printf_i+0xd2>
 8003706:	232d      	movs	r3, #45	; 0x2d
 8003708:	4276      	negs	r6, r6
 800370a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800370e:	230a      	movs	r3, #10
 8003710:	4859      	ldr	r0, [pc, #356]	; (8003878 <_printf_i+0x23c>)
 8003712:	e012      	b.n	800373a <_printf_i+0xfe>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	6820      	ldr	r0, [r4, #0]
 8003718:	1d19      	adds	r1, r3, #4
 800371a:	6029      	str	r1, [r5, #0]
 800371c:	0605      	lsls	r5, r0, #24
 800371e:	d501      	bpl.n	8003724 <_printf_i+0xe8>
 8003720:	681e      	ldr	r6, [r3, #0]
 8003722:	e002      	b.n	800372a <_printf_i+0xee>
 8003724:	0641      	lsls	r1, r0, #25
 8003726:	d5fb      	bpl.n	8003720 <_printf_i+0xe4>
 8003728:	881e      	ldrh	r6, [r3, #0]
 800372a:	2f6f      	cmp	r7, #111	; 0x6f
 800372c:	bf0c      	ite	eq
 800372e:	2308      	moveq	r3, #8
 8003730:	230a      	movne	r3, #10
 8003732:	4851      	ldr	r0, [pc, #324]	; (8003878 <_printf_i+0x23c>)
 8003734:	2100      	movs	r1, #0
 8003736:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800373a:	6865      	ldr	r5, [r4, #4]
 800373c:	2d00      	cmp	r5, #0
 800373e:	bfa8      	it	ge
 8003740:	6821      	ldrge	r1, [r4, #0]
 8003742:	60a5      	str	r5, [r4, #8]
 8003744:	bfa4      	itt	ge
 8003746:	f021 0104 	bicge.w	r1, r1, #4
 800374a:	6021      	strge	r1, [r4, #0]
 800374c:	b90e      	cbnz	r6, 8003752 <_printf_i+0x116>
 800374e:	2d00      	cmp	r5, #0
 8003750:	d04b      	beq.n	80037ea <_printf_i+0x1ae>
 8003752:	4615      	mov	r5, r2
 8003754:	fbb6 f1f3 	udiv	r1, r6, r3
 8003758:	fb03 6711 	mls	r7, r3, r1, r6
 800375c:	5dc7      	ldrb	r7, [r0, r7]
 800375e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003762:	4637      	mov	r7, r6
 8003764:	42bb      	cmp	r3, r7
 8003766:	460e      	mov	r6, r1
 8003768:	d9f4      	bls.n	8003754 <_printf_i+0x118>
 800376a:	2b08      	cmp	r3, #8
 800376c:	d10b      	bne.n	8003786 <_printf_i+0x14a>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	07de      	lsls	r6, r3, #31
 8003772:	d508      	bpl.n	8003786 <_printf_i+0x14a>
 8003774:	6923      	ldr	r3, [r4, #16]
 8003776:	6861      	ldr	r1, [r4, #4]
 8003778:	4299      	cmp	r1, r3
 800377a:	bfde      	ittt	le
 800377c:	2330      	movle	r3, #48	; 0x30
 800377e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003782:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003786:	1b52      	subs	r2, r2, r5
 8003788:	6122      	str	r2, [r4, #16]
 800378a:	464b      	mov	r3, r9
 800378c:	4621      	mov	r1, r4
 800378e:	4640      	mov	r0, r8
 8003790:	f8cd a000 	str.w	sl, [sp]
 8003794:	aa03      	add	r2, sp, #12
 8003796:	f7ff fedf 	bl	8003558 <_printf_common>
 800379a:	3001      	adds	r0, #1
 800379c:	d14a      	bne.n	8003834 <_printf_i+0x1f8>
 800379e:	f04f 30ff 	mov.w	r0, #4294967295
 80037a2:	b004      	add	sp, #16
 80037a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	f043 0320 	orr.w	r3, r3, #32
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	2778      	movs	r7, #120	; 0x78
 80037b2:	4832      	ldr	r0, [pc, #200]	; (800387c <_printf_i+0x240>)
 80037b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	6829      	ldr	r1, [r5, #0]
 80037bc:	061f      	lsls	r7, r3, #24
 80037be:	f851 6b04 	ldr.w	r6, [r1], #4
 80037c2:	d402      	bmi.n	80037ca <_printf_i+0x18e>
 80037c4:	065f      	lsls	r7, r3, #25
 80037c6:	bf48      	it	mi
 80037c8:	b2b6      	uxthmi	r6, r6
 80037ca:	07df      	lsls	r7, r3, #31
 80037cc:	bf48      	it	mi
 80037ce:	f043 0320 	orrmi.w	r3, r3, #32
 80037d2:	6029      	str	r1, [r5, #0]
 80037d4:	bf48      	it	mi
 80037d6:	6023      	strmi	r3, [r4, #0]
 80037d8:	b91e      	cbnz	r6, 80037e2 <_printf_i+0x1a6>
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	f023 0320 	bic.w	r3, r3, #32
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	2310      	movs	r3, #16
 80037e4:	e7a6      	b.n	8003734 <_printf_i+0xf8>
 80037e6:	4824      	ldr	r0, [pc, #144]	; (8003878 <_printf_i+0x23c>)
 80037e8:	e7e4      	b.n	80037b4 <_printf_i+0x178>
 80037ea:	4615      	mov	r5, r2
 80037ec:	e7bd      	b.n	800376a <_printf_i+0x12e>
 80037ee:	682b      	ldr	r3, [r5, #0]
 80037f0:	6826      	ldr	r6, [r4, #0]
 80037f2:	1d18      	adds	r0, r3, #4
 80037f4:	6961      	ldr	r1, [r4, #20]
 80037f6:	6028      	str	r0, [r5, #0]
 80037f8:	0635      	lsls	r5, r6, #24
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	d501      	bpl.n	8003802 <_printf_i+0x1c6>
 80037fe:	6019      	str	r1, [r3, #0]
 8003800:	e002      	b.n	8003808 <_printf_i+0x1cc>
 8003802:	0670      	lsls	r0, r6, #25
 8003804:	d5fb      	bpl.n	80037fe <_printf_i+0x1c2>
 8003806:	8019      	strh	r1, [r3, #0]
 8003808:	2300      	movs	r3, #0
 800380a:	4615      	mov	r5, r2
 800380c:	6123      	str	r3, [r4, #16]
 800380e:	e7bc      	b.n	800378a <_printf_i+0x14e>
 8003810:	682b      	ldr	r3, [r5, #0]
 8003812:	2100      	movs	r1, #0
 8003814:	1d1a      	adds	r2, r3, #4
 8003816:	602a      	str	r2, [r5, #0]
 8003818:	681d      	ldr	r5, [r3, #0]
 800381a:	6862      	ldr	r2, [r4, #4]
 800381c:	4628      	mov	r0, r5
 800381e:	f000 f9a1 	bl	8003b64 <memchr>
 8003822:	b108      	cbz	r0, 8003828 <_printf_i+0x1ec>
 8003824:	1b40      	subs	r0, r0, r5
 8003826:	6060      	str	r0, [r4, #4]
 8003828:	6863      	ldr	r3, [r4, #4]
 800382a:	6123      	str	r3, [r4, #16]
 800382c:	2300      	movs	r3, #0
 800382e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003832:	e7aa      	b.n	800378a <_printf_i+0x14e>
 8003834:	462a      	mov	r2, r5
 8003836:	4649      	mov	r1, r9
 8003838:	4640      	mov	r0, r8
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	47d0      	blx	sl
 800383e:	3001      	adds	r0, #1
 8003840:	d0ad      	beq.n	800379e <_printf_i+0x162>
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	079b      	lsls	r3, r3, #30
 8003846:	d413      	bmi.n	8003870 <_printf_i+0x234>
 8003848:	68e0      	ldr	r0, [r4, #12]
 800384a:	9b03      	ldr	r3, [sp, #12]
 800384c:	4298      	cmp	r0, r3
 800384e:	bfb8      	it	lt
 8003850:	4618      	movlt	r0, r3
 8003852:	e7a6      	b.n	80037a2 <_printf_i+0x166>
 8003854:	2301      	movs	r3, #1
 8003856:	4632      	mov	r2, r6
 8003858:	4649      	mov	r1, r9
 800385a:	4640      	mov	r0, r8
 800385c:	47d0      	blx	sl
 800385e:	3001      	adds	r0, #1
 8003860:	d09d      	beq.n	800379e <_printf_i+0x162>
 8003862:	3501      	adds	r5, #1
 8003864:	68e3      	ldr	r3, [r4, #12]
 8003866:	9903      	ldr	r1, [sp, #12]
 8003868:	1a5b      	subs	r3, r3, r1
 800386a:	42ab      	cmp	r3, r5
 800386c:	dcf2      	bgt.n	8003854 <_printf_i+0x218>
 800386e:	e7eb      	b.n	8003848 <_printf_i+0x20c>
 8003870:	2500      	movs	r5, #0
 8003872:	f104 0619 	add.w	r6, r4, #25
 8003876:	e7f5      	b.n	8003864 <_printf_i+0x228>
 8003878:	08005944 	.word	0x08005944
 800387c:	08005955 	.word	0x08005955

08003880 <std>:
 8003880:	2300      	movs	r3, #0
 8003882:	b510      	push	{r4, lr}
 8003884:	4604      	mov	r4, r0
 8003886:	e9c0 3300 	strd	r3, r3, [r0]
 800388a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800388e:	6083      	str	r3, [r0, #8]
 8003890:	8181      	strh	r1, [r0, #12]
 8003892:	6643      	str	r3, [r0, #100]	; 0x64
 8003894:	81c2      	strh	r2, [r0, #14]
 8003896:	6183      	str	r3, [r0, #24]
 8003898:	4619      	mov	r1, r3
 800389a:	2208      	movs	r2, #8
 800389c:	305c      	adds	r0, #92	; 0x5c
 800389e:	f000 f8e2 	bl	8003a66 <memset>
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <std+0x38>)
 80038a4:	6224      	str	r4, [r4, #32]
 80038a6:	6263      	str	r3, [r4, #36]	; 0x24
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <std+0x3c>)
 80038aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <std+0x40>)
 80038ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <std+0x44>)
 80038b2:	6323      	str	r3, [r4, #48]	; 0x30
 80038b4:	bd10      	pop	{r4, pc}
 80038b6:	bf00      	nop
 80038b8:	080039e1 	.word	0x080039e1
 80038bc:	08003a03 	.word	0x08003a03
 80038c0:	08003a3b 	.word	0x08003a3b
 80038c4:	08003a5f 	.word	0x08003a5f

080038c8 <stdio_exit_handler>:
 80038c8:	4a02      	ldr	r2, [pc, #8]	; (80038d4 <stdio_exit_handler+0xc>)
 80038ca:	4903      	ldr	r1, [pc, #12]	; (80038d8 <stdio_exit_handler+0x10>)
 80038cc:	4803      	ldr	r0, [pc, #12]	; (80038dc <stdio_exit_handler+0x14>)
 80038ce:	f000 b869 	b.w	80039a4 <_fwalk_sglue>
 80038d2:	bf00      	nop
 80038d4:	2000000c 	.word	0x2000000c
 80038d8:	0800524d 	.word	0x0800524d
 80038dc:	20000018 	.word	0x20000018

080038e0 <cleanup_stdio>:
 80038e0:	6841      	ldr	r1, [r0, #4]
 80038e2:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <cleanup_stdio+0x34>)
 80038e4:	b510      	push	{r4, lr}
 80038e6:	4299      	cmp	r1, r3
 80038e8:	4604      	mov	r4, r0
 80038ea:	d001      	beq.n	80038f0 <cleanup_stdio+0x10>
 80038ec:	f001 fcae 	bl	800524c <_fflush_r>
 80038f0:	68a1      	ldr	r1, [r4, #8]
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <cleanup_stdio+0x38>)
 80038f4:	4299      	cmp	r1, r3
 80038f6:	d002      	beq.n	80038fe <cleanup_stdio+0x1e>
 80038f8:	4620      	mov	r0, r4
 80038fa:	f001 fca7 	bl	800524c <_fflush_r>
 80038fe:	68e1      	ldr	r1, [r4, #12]
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <cleanup_stdio+0x3c>)
 8003902:	4299      	cmp	r1, r3
 8003904:	d004      	beq.n	8003910 <cleanup_stdio+0x30>
 8003906:	4620      	mov	r0, r4
 8003908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800390c:	f001 bc9e 	b.w	800524c <_fflush_r>
 8003910:	bd10      	pop	{r4, pc}
 8003912:	bf00      	nop
 8003914:	20000244 	.word	0x20000244
 8003918:	200002ac 	.word	0x200002ac
 800391c:	20000314 	.word	0x20000314

08003920 <global_stdio_init.part.0>:
 8003920:	b510      	push	{r4, lr}
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <global_stdio_init.part.0+0x30>)
 8003924:	4c0b      	ldr	r4, [pc, #44]	; (8003954 <global_stdio_init.part.0+0x34>)
 8003926:	4a0c      	ldr	r2, [pc, #48]	; (8003958 <global_stdio_init.part.0+0x38>)
 8003928:	4620      	mov	r0, r4
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	2104      	movs	r1, #4
 800392e:	2200      	movs	r2, #0
 8003930:	f7ff ffa6 	bl	8003880 <std>
 8003934:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003938:	2201      	movs	r2, #1
 800393a:	2109      	movs	r1, #9
 800393c:	f7ff ffa0 	bl	8003880 <std>
 8003940:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003944:	2202      	movs	r2, #2
 8003946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800394a:	2112      	movs	r1, #18
 800394c:	f7ff bf98 	b.w	8003880 <std>
 8003950:	2000037c 	.word	0x2000037c
 8003954:	20000244 	.word	0x20000244
 8003958:	080038c9 	.word	0x080038c9

0800395c <__sfp_lock_acquire>:
 800395c:	4801      	ldr	r0, [pc, #4]	; (8003964 <__sfp_lock_acquire+0x8>)
 800395e:	f000 b8ff 	b.w	8003b60 <__retarget_lock_acquire_recursive>
 8003962:	bf00      	nop
 8003964:	20000385 	.word	0x20000385

08003968 <__sfp_lock_release>:
 8003968:	4801      	ldr	r0, [pc, #4]	; (8003970 <__sfp_lock_release+0x8>)
 800396a:	f000 b8fa 	b.w	8003b62 <__retarget_lock_release_recursive>
 800396e:	bf00      	nop
 8003970:	20000385 	.word	0x20000385

08003974 <__sinit>:
 8003974:	b510      	push	{r4, lr}
 8003976:	4604      	mov	r4, r0
 8003978:	f7ff fff0 	bl	800395c <__sfp_lock_acquire>
 800397c:	6a23      	ldr	r3, [r4, #32]
 800397e:	b11b      	cbz	r3, 8003988 <__sinit+0x14>
 8003980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003984:	f7ff bff0 	b.w	8003968 <__sfp_lock_release>
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <__sinit+0x28>)
 800398a:	6223      	str	r3, [r4, #32]
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <__sinit+0x2c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f5      	bne.n	8003980 <__sinit+0xc>
 8003994:	f7ff ffc4 	bl	8003920 <global_stdio_init.part.0>
 8003998:	e7f2      	b.n	8003980 <__sinit+0xc>
 800399a:	bf00      	nop
 800399c:	080038e1 	.word	0x080038e1
 80039a0:	2000037c 	.word	0x2000037c

080039a4 <_fwalk_sglue>:
 80039a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039a8:	4607      	mov	r7, r0
 80039aa:	4688      	mov	r8, r1
 80039ac:	4614      	mov	r4, r2
 80039ae:	2600      	movs	r6, #0
 80039b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039b4:	f1b9 0901 	subs.w	r9, r9, #1
 80039b8:	d505      	bpl.n	80039c6 <_fwalk_sglue+0x22>
 80039ba:	6824      	ldr	r4, [r4, #0]
 80039bc:	2c00      	cmp	r4, #0
 80039be:	d1f7      	bne.n	80039b0 <_fwalk_sglue+0xc>
 80039c0:	4630      	mov	r0, r6
 80039c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039c6:	89ab      	ldrh	r3, [r5, #12]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d907      	bls.n	80039dc <_fwalk_sglue+0x38>
 80039cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039d0:	3301      	adds	r3, #1
 80039d2:	d003      	beq.n	80039dc <_fwalk_sglue+0x38>
 80039d4:	4629      	mov	r1, r5
 80039d6:	4638      	mov	r0, r7
 80039d8:	47c0      	blx	r8
 80039da:	4306      	orrs	r6, r0
 80039dc:	3568      	adds	r5, #104	; 0x68
 80039de:	e7e9      	b.n	80039b4 <_fwalk_sglue+0x10>

080039e0 <__sread>:
 80039e0:	b510      	push	{r4, lr}
 80039e2:	460c      	mov	r4, r1
 80039e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e8:	f000 f86c 	bl	8003ac4 <_read_r>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	bfab      	itete	ge
 80039f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039f2:	89a3      	ldrhlt	r3, [r4, #12]
 80039f4:	181b      	addge	r3, r3, r0
 80039f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039fa:	bfac      	ite	ge
 80039fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80039fe:	81a3      	strhlt	r3, [r4, #12]
 8003a00:	bd10      	pop	{r4, pc}

08003a02 <__swrite>:
 8003a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a06:	461f      	mov	r7, r3
 8003a08:	898b      	ldrh	r3, [r1, #12]
 8003a0a:	4605      	mov	r5, r0
 8003a0c:	05db      	lsls	r3, r3, #23
 8003a0e:	460c      	mov	r4, r1
 8003a10:	4616      	mov	r6, r2
 8003a12:	d505      	bpl.n	8003a20 <__swrite+0x1e>
 8003a14:	2302      	movs	r3, #2
 8003a16:	2200      	movs	r2, #0
 8003a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a1c:	f000 f840 	bl	8003aa0 <_lseek_r>
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	4632      	mov	r2, r6
 8003a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a28:	81a3      	strh	r3, [r4, #12]
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	463b      	mov	r3, r7
 8003a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a36:	f000 b857 	b.w	8003ae8 <_write_r>

08003a3a <__sseek>:
 8003a3a:	b510      	push	{r4, lr}
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a42:	f000 f82d 	bl	8003aa0 <_lseek_r>
 8003a46:	1c43      	adds	r3, r0, #1
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	bf15      	itete	ne
 8003a4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a56:	81a3      	strheq	r3, [r4, #12]
 8003a58:	bf18      	it	ne
 8003a5a:	81a3      	strhne	r3, [r4, #12]
 8003a5c:	bd10      	pop	{r4, pc}

08003a5e <__sclose>:
 8003a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a62:	f000 b80d 	b.w	8003a80 <_close_r>

08003a66 <memset>:
 8003a66:	4603      	mov	r3, r0
 8003a68:	4402      	add	r2, r0
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d100      	bne.n	8003a70 <memset+0xa>
 8003a6e:	4770      	bx	lr
 8003a70:	f803 1b01 	strb.w	r1, [r3], #1
 8003a74:	e7f9      	b.n	8003a6a <memset+0x4>
	...

08003a78 <_localeconv_r>:
 8003a78:	4800      	ldr	r0, [pc, #0]	; (8003a7c <_localeconv_r+0x4>)
 8003a7a:	4770      	bx	lr
 8003a7c:	20000158 	.word	0x20000158

08003a80 <_close_r>:
 8003a80:	b538      	push	{r3, r4, r5, lr}
 8003a82:	2300      	movs	r3, #0
 8003a84:	4d05      	ldr	r5, [pc, #20]	; (8003a9c <_close_r+0x1c>)
 8003a86:	4604      	mov	r4, r0
 8003a88:	4608      	mov	r0, r1
 8003a8a:	602b      	str	r3, [r5, #0]
 8003a8c:	f7fd fa42 	bl	8000f14 <_close>
 8003a90:	1c43      	adds	r3, r0, #1
 8003a92:	d102      	bne.n	8003a9a <_close_r+0x1a>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	b103      	cbz	r3, 8003a9a <_close_r+0x1a>
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	20000380 	.word	0x20000380

08003aa0 <_lseek_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	4d05      	ldr	r5, [pc, #20]	; (8003ac0 <_lseek_r+0x20>)
 8003aac:	602a      	str	r2, [r5, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f7fd fa54 	bl	8000f5c <_lseek>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d102      	bne.n	8003abe <_lseek_r+0x1e>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	b103      	cbz	r3, 8003abe <_lseek_r+0x1e>
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
 8003ac0:	20000380 	.word	0x20000380

08003ac4 <_read_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	2200      	movs	r2, #0
 8003ace:	4d05      	ldr	r5, [pc, #20]	; (8003ae4 <_read_r+0x20>)
 8003ad0:	602a      	str	r2, [r5, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f7fd f9e5 	bl	8000ea2 <_read>
 8003ad8:	1c43      	adds	r3, r0, #1
 8003ada:	d102      	bne.n	8003ae2 <_read_r+0x1e>
 8003adc:	682b      	ldr	r3, [r5, #0]
 8003ade:	b103      	cbz	r3, 8003ae2 <_read_r+0x1e>
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	20000380 	.word	0x20000380

08003ae8 <_write_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	4604      	mov	r4, r0
 8003aec:	4608      	mov	r0, r1
 8003aee:	4611      	mov	r1, r2
 8003af0:	2200      	movs	r2, #0
 8003af2:	4d05      	ldr	r5, [pc, #20]	; (8003b08 <_write_r+0x20>)
 8003af4:	602a      	str	r2, [r5, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	f7fd f9f0 	bl	8000edc <_write>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	d102      	bne.n	8003b06 <_write_r+0x1e>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	b103      	cbz	r3, 8003b06 <_write_r+0x1e>
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	bd38      	pop	{r3, r4, r5, pc}
 8003b08:	20000380 	.word	0x20000380

08003b0c <__errno>:
 8003b0c:	4b01      	ldr	r3, [pc, #4]	; (8003b14 <__errno+0x8>)
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000064 	.word	0x20000064

08003b18 <__libc_init_array>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	2600      	movs	r6, #0
 8003b1c:	4d0c      	ldr	r5, [pc, #48]	; (8003b50 <__libc_init_array+0x38>)
 8003b1e:	4c0d      	ldr	r4, [pc, #52]	; (8003b54 <__libc_init_array+0x3c>)
 8003b20:	1b64      	subs	r4, r4, r5
 8003b22:	10a4      	asrs	r4, r4, #2
 8003b24:	42a6      	cmp	r6, r4
 8003b26:	d109      	bne.n	8003b3c <__libc_init_array+0x24>
 8003b28:	f001 fee0 	bl	80058ec <_init>
 8003b2c:	2600      	movs	r6, #0
 8003b2e:	4d0a      	ldr	r5, [pc, #40]	; (8003b58 <__libc_init_array+0x40>)
 8003b30:	4c0a      	ldr	r4, [pc, #40]	; (8003b5c <__libc_init_array+0x44>)
 8003b32:	1b64      	subs	r4, r4, r5
 8003b34:	10a4      	asrs	r4, r4, #2
 8003b36:	42a6      	cmp	r6, r4
 8003b38:	d105      	bne.n	8003b46 <__libc_init_array+0x2e>
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}
 8003b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b40:	4798      	blx	r3
 8003b42:	3601      	adds	r6, #1
 8003b44:	e7ee      	b.n	8003b24 <__libc_init_array+0xc>
 8003b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4a:	4798      	blx	r3
 8003b4c:	3601      	adds	r6, #1
 8003b4e:	e7f2      	b.n	8003b36 <__libc_init_array+0x1e>
 8003b50:	08005ca4 	.word	0x08005ca4
 8003b54:	08005ca4 	.word	0x08005ca4
 8003b58:	08005ca4 	.word	0x08005ca4
 8003b5c:	08005ca8 	.word	0x08005ca8

08003b60 <__retarget_lock_acquire_recursive>:
 8003b60:	4770      	bx	lr

08003b62 <__retarget_lock_release_recursive>:
 8003b62:	4770      	bx	lr

08003b64 <memchr>:
 8003b64:	4603      	mov	r3, r0
 8003b66:	b510      	push	{r4, lr}
 8003b68:	b2c9      	uxtb	r1, r1
 8003b6a:	4402      	add	r2, r0
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	d101      	bne.n	8003b76 <memchr+0x12>
 8003b72:	2000      	movs	r0, #0
 8003b74:	e003      	b.n	8003b7e <memchr+0x1a>
 8003b76:	7804      	ldrb	r4, [r0, #0]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	428c      	cmp	r4, r1
 8003b7c:	d1f6      	bne.n	8003b6c <memchr+0x8>
 8003b7e:	bd10      	pop	{r4, pc}

08003b80 <quorem>:
 8003b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b84:	6903      	ldr	r3, [r0, #16]
 8003b86:	690c      	ldr	r4, [r1, #16]
 8003b88:	4607      	mov	r7, r0
 8003b8a:	42a3      	cmp	r3, r4
 8003b8c:	db7f      	blt.n	8003c8e <quorem+0x10e>
 8003b8e:	3c01      	subs	r4, #1
 8003b90:	f100 0514 	add.w	r5, r0, #20
 8003b94:	f101 0814 	add.w	r8, r1, #20
 8003b98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ba2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003bb2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003bb6:	d331      	bcc.n	8003c1c <quorem+0x9c>
 8003bb8:	f04f 0e00 	mov.w	lr, #0
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	46ac      	mov	ip, r5
 8003bc0:	46f2      	mov	sl, lr
 8003bc2:	f850 2b04 	ldr.w	r2, [r0], #4
 8003bc6:	b293      	uxth	r3, r2
 8003bc8:	fb06 e303 	mla	r3, r6, r3, lr
 8003bcc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003bd0:	0c1a      	lsrs	r2, r3, #16
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	fb06 220e 	mla	r2, r6, lr, r2
 8003bd8:	ebaa 0303 	sub.w	r3, sl, r3
 8003bdc:	f8dc a000 	ldr.w	sl, [ip]
 8003be0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003be4:	fa1f fa8a 	uxth.w	sl, sl
 8003be8:	4453      	add	r3, sl
 8003bea:	f8dc a000 	ldr.w	sl, [ip]
 8003bee:	b292      	uxth	r2, r2
 8003bf0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003bf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bfe:	4581      	cmp	r9, r0
 8003c00:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003c04:	f84c 3b04 	str.w	r3, [ip], #4
 8003c08:	d2db      	bcs.n	8003bc2 <quorem+0x42>
 8003c0a:	f855 300b 	ldr.w	r3, [r5, fp]
 8003c0e:	b92b      	cbnz	r3, 8003c1c <quorem+0x9c>
 8003c10:	9b01      	ldr	r3, [sp, #4]
 8003c12:	3b04      	subs	r3, #4
 8003c14:	429d      	cmp	r5, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	d32d      	bcc.n	8003c76 <quorem+0xf6>
 8003c1a:	613c      	str	r4, [r7, #16]
 8003c1c:	4638      	mov	r0, r7
 8003c1e:	f001 f995 	bl	8004f4c <__mcmp>
 8003c22:	2800      	cmp	r0, #0
 8003c24:	db23      	blt.n	8003c6e <quorem+0xee>
 8003c26:	4629      	mov	r1, r5
 8003c28:	2000      	movs	r0, #0
 8003c2a:	3601      	adds	r6, #1
 8003c2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c30:	f8d1 c000 	ldr.w	ip, [r1]
 8003c34:	b293      	uxth	r3, r2
 8003c36:	1ac3      	subs	r3, r0, r3
 8003c38:	0c12      	lsrs	r2, r2, #16
 8003c3a:	fa1f f08c 	uxth.w	r0, ip
 8003c3e:	4403      	add	r3, r0
 8003c40:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003c44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c4e:	45c1      	cmp	r9, r8
 8003c50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003c54:	f841 3b04 	str.w	r3, [r1], #4
 8003c58:	d2e8      	bcs.n	8003c2c <quorem+0xac>
 8003c5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c62:	b922      	cbnz	r2, 8003c6e <quorem+0xee>
 8003c64:	3b04      	subs	r3, #4
 8003c66:	429d      	cmp	r5, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	d30a      	bcc.n	8003c82 <quorem+0x102>
 8003c6c:	613c      	str	r4, [r7, #16]
 8003c6e:	4630      	mov	r0, r6
 8003c70:	b003      	add	sp, #12
 8003c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	3b04      	subs	r3, #4
 8003c7a:	2a00      	cmp	r2, #0
 8003c7c:	d1cd      	bne.n	8003c1a <quorem+0x9a>
 8003c7e:	3c01      	subs	r4, #1
 8003c80:	e7c8      	b.n	8003c14 <quorem+0x94>
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	3b04      	subs	r3, #4
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	d1f0      	bne.n	8003c6c <quorem+0xec>
 8003c8a:	3c01      	subs	r4, #1
 8003c8c:	e7eb      	b.n	8003c66 <quorem+0xe6>
 8003c8e:	2000      	movs	r0, #0
 8003c90:	e7ee      	b.n	8003c70 <quorem+0xf0>
 8003c92:	0000      	movs	r0, r0
 8003c94:	0000      	movs	r0, r0
	...

08003c98 <_dtoa_r>:
 8003c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	4616      	mov	r6, r2
 8003c9e:	461f      	mov	r7, r3
 8003ca0:	69c4      	ldr	r4, [r0, #28]
 8003ca2:	b099      	sub	sp, #100	; 0x64
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003caa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003cae:	b974      	cbnz	r4, 8003cce <_dtoa_r+0x36>
 8003cb0:	2010      	movs	r0, #16
 8003cb2:	f000 fe1d 	bl	80048f0 <malloc>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	61e8      	str	r0, [r5, #28]
 8003cba:	b920      	cbnz	r0, 8003cc6 <_dtoa_r+0x2e>
 8003cbc:	21ef      	movs	r1, #239	; 0xef
 8003cbe:	4bac      	ldr	r3, [pc, #688]	; (8003f70 <_dtoa_r+0x2d8>)
 8003cc0:	48ac      	ldr	r0, [pc, #688]	; (8003f74 <_dtoa_r+0x2dc>)
 8003cc2:	f001 fb09 	bl	80052d8 <__assert_func>
 8003cc6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003cca:	6004      	str	r4, [r0, #0]
 8003ccc:	60c4      	str	r4, [r0, #12]
 8003cce:	69eb      	ldr	r3, [r5, #28]
 8003cd0:	6819      	ldr	r1, [r3, #0]
 8003cd2:	b151      	cbz	r1, 8003cea <_dtoa_r+0x52>
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	4093      	lsls	r3, r2
 8003cda:	604a      	str	r2, [r1, #4]
 8003cdc:	608b      	str	r3, [r1, #8]
 8003cde:	4628      	mov	r0, r5
 8003ce0:	f000 fefa 	bl	8004ad8 <_Bfree>
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	69eb      	ldr	r3, [r5, #28]
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	1e3b      	subs	r3, r7, #0
 8003cec:	bfaf      	iteee	ge
 8003cee:	2300      	movge	r3, #0
 8003cf0:	2201      	movlt	r2, #1
 8003cf2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003cf6:	9305      	strlt	r3, [sp, #20]
 8003cf8:	bfa8      	it	ge
 8003cfa:	f8c8 3000 	strge.w	r3, [r8]
 8003cfe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003d02:	4b9d      	ldr	r3, [pc, #628]	; (8003f78 <_dtoa_r+0x2e0>)
 8003d04:	bfb8      	it	lt
 8003d06:	f8c8 2000 	strlt.w	r2, [r8]
 8003d0a:	ea33 0309 	bics.w	r3, r3, r9
 8003d0e:	d119      	bne.n	8003d44 <_dtoa_r+0xac>
 8003d10:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003d1c:	4333      	orrs	r3, r6
 8003d1e:	f000 8589 	beq.w	8004834 <_dtoa_r+0xb9c>
 8003d22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d24:	b953      	cbnz	r3, 8003d3c <_dtoa_r+0xa4>
 8003d26:	4b95      	ldr	r3, [pc, #596]	; (8003f7c <_dtoa_r+0x2e4>)
 8003d28:	e023      	b.n	8003d72 <_dtoa_r+0xda>
 8003d2a:	4b95      	ldr	r3, [pc, #596]	; (8003f80 <_dtoa_r+0x2e8>)
 8003d2c:	9303      	str	r3, [sp, #12]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	9803      	ldr	r0, [sp, #12]
 8003d36:	b019      	add	sp, #100	; 0x64
 8003d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3c:	4b8f      	ldr	r3, [pc, #572]	; (8003f7c <_dtoa_r+0x2e4>)
 8003d3e:	9303      	str	r3, [sp, #12]
 8003d40:	3303      	adds	r3, #3
 8003d42:	e7f5      	b.n	8003d30 <_dtoa_r+0x98>
 8003d44:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003d48:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003d4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d50:	2200      	movs	r2, #0
 8003d52:	2300      	movs	r3, #0
 8003d54:	f7fc fe94 	bl	8000a80 <__aeabi_dcmpeq>
 8003d58:	4680      	mov	r8, r0
 8003d5a:	b160      	cbz	r0, 8003d76 <_dtoa_r+0xde>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8562 	beq.w	800482e <_dtoa_r+0xb96>
 8003d6a:	4b86      	ldr	r3, [pc, #536]	; (8003f84 <_dtoa_r+0x2ec>)
 8003d6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	9303      	str	r3, [sp, #12]
 8003d74:	e7de      	b.n	8003d34 <_dtoa_r+0x9c>
 8003d76:	ab16      	add	r3, sp, #88	; 0x58
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	ab17      	add	r3, sp, #92	; 0x5c
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4628      	mov	r0, r5
 8003d80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003d84:	f001 f98a 	bl	800509c <__d2b>
 8003d88:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003d8c:	4682      	mov	sl, r0
 8003d8e:	2c00      	cmp	r4, #0
 8003d90:	d07e      	beq.n	8003e90 <_dtoa_r+0x1f8>
 8003d92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d98:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003da4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003da8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003dac:	4619      	mov	r1, r3
 8003dae:	2200      	movs	r2, #0
 8003db0:	4b75      	ldr	r3, [pc, #468]	; (8003f88 <_dtoa_r+0x2f0>)
 8003db2:	f7fc fa45 	bl	8000240 <__aeabi_dsub>
 8003db6:	a368      	add	r3, pc, #416	; (adr r3, 8003f58 <_dtoa_r+0x2c0>)
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f7fc fbf8 	bl	80005b0 <__aeabi_dmul>
 8003dc0:	a367      	add	r3, pc, #412	; (adr r3, 8003f60 <_dtoa_r+0x2c8>)
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f7fc fa3d 	bl	8000244 <__adddf3>
 8003dca:	4606      	mov	r6, r0
 8003dcc:	4620      	mov	r0, r4
 8003dce:	460f      	mov	r7, r1
 8003dd0:	f7fc fb84 	bl	80004dc <__aeabi_i2d>
 8003dd4:	a364      	add	r3, pc, #400	; (adr r3, 8003f68 <_dtoa_r+0x2d0>)
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	f7fc fbe9 	bl	80005b0 <__aeabi_dmul>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4630      	mov	r0, r6
 8003de4:	4639      	mov	r1, r7
 8003de6:	f7fc fa2d 	bl	8000244 <__adddf3>
 8003dea:	4606      	mov	r6, r0
 8003dec:	460f      	mov	r7, r1
 8003dee:	f7fc fe8f 	bl	8000b10 <__aeabi_d2iz>
 8003df2:	2200      	movs	r2, #0
 8003df4:	4683      	mov	fp, r0
 8003df6:	2300      	movs	r3, #0
 8003df8:	4630      	mov	r0, r6
 8003dfa:	4639      	mov	r1, r7
 8003dfc:	f7fc fe4a 	bl	8000a94 <__aeabi_dcmplt>
 8003e00:	b148      	cbz	r0, 8003e16 <_dtoa_r+0x17e>
 8003e02:	4658      	mov	r0, fp
 8003e04:	f7fc fb6a 	bl	80004dc <__aeabi_i2d>
 8003e08:	4632      	mov	r2, r6
 8003e0a:	463b      	mov	r3, r7
 8003e0c:	f7fc fe38 	bl	8000a80 <__aeabi_dcmpeq>
 8003e10:	b908      	cbnz	r0, 8003e16 <_dtoa_r+0x17e>
 8003e12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e16:	f1bb 0f16 	cmp.w	fp, #22
 8003e1a:	d857      	bhi.n	8003ecc <_dtoa_r+0x234>
 8003e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e20:	4b5a      	ldr	r3, [pc, #360]	; (8003f8c <_dtoa_r+0x2f4>)
 8003e22:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2a:	f7fc fe33 	bl	8000a94 <__aeabi_dcmplt>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	d04e      	beq.n	8003ed0 <_dtoa_r+0x238>
 8003e32:	2300      	movs	r3, #0
 8003e34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e38:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e3c:	1b1b      	subs	r3, r3, r4
 8003e3e:	1e5a      	subs	r2, r3, #1
 8003e40:	bf46      	itte	mi
 8003e42:	f1c3 0901 	rsbmi	r9, r3, #1
 8003e46:	2300      	movmi	r3, #0
 8003e48:	f04f 0900 	movpl.w	r9, #0
 8003e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8003e4e:	bf48      	it	mi
 8003e50:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003e52:	f1bb 0f00 	cmp.w	fp, #0
 8003e56:	db3d      	blt.n	8003ed4 <_dtoa_r+0x23c>
 8003e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e5a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003e5e:	445b      	add	r3, fp
 8003e60:	9309      	str	r3, [sp, #36]	; 0x24
 8003e62:	2300      	movs	r3, #0
 8003e64:	930a      	str	r3, [sp, #40]	; 0x28
 8003e66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e68:	2b09      	cmp	r3, #9
 8003e6a:	d867      	bhi.n	8003f3c <_dtoa_r+0x2a4>
 8003e6c:	2b05      	cmp	r3, #5
 8003e6e:	bfc4      	itt	gt
 8003e70:	3b04      	subgt	r3, #4
 8003e72:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003e74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e76:	bfc8      	it	gt
 8003e78:	2400      	movgt	r4, #0
 8003e7a:	f1a3 0302 	sub.w	r3, r3, #2
 8003e7e:	bfd8      	it	le
 8003e80:	2401      	movle	r4, #1
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	f200 8086 	bhi.w	8003f94 <_dtoa_r+0x2fc>
 8003e88:	e8df f003 	tbb	[pc, r3]
 8003e8c:	5637392c 	.word	0x5637392c
 8003e90:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003e94:	441c      	add	r4, r3
 8003e96:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	bfc1      	itttt	gt
 8003e9e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003ea2:	fa09 f903 	lslgt.w	r9, r9, r3
 8003ea6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8003eaa:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003eae:	bfd6      	itet	le
 8003eb0:	f1c3 0320 	rsble	r3, r3, #32
 8003eb4:	ea49 0003 	orrgt.w	r0, r9, r3
 8003eb8:	fa06 f003 	lslle.w	r0, r6, r3
 8003ebc:	f7fc fafe 	bl	80004bc <__aeabi_ui2d>
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003ec6:	3c01      	subs	r4, #1
 8003ec8:	9213      	str	r2, [sp, #76]	; 0x4c
 8003eca:	e76f      	b.n	8003dac <_dtoa_r+0x114>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e7b3      	b.n	8003e38 <_dtoa_r+0x1a0>
 8003ed0:	900f      	str	r0, [sp, #60]	; 0x3c
 8003ed2:	e7b2      	b.n	8003e3a <_dtoa_r+0x1a2>
 8003ed4:	f1cb 0300 	rsb	r3, fp, #0
 8003ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8003eda:	2300      	movs	r3, #0
 8003edc:	eba9 090b 	sub.w	r9, r9, fp
 8003ee0:	930e      	str	r3, [sp, #56]	; 0x38
 8003ee2:	e7c0      	b.n	8003e66 <_dtoa_r+0x1ce>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ee8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	dc55      	bgt.n	8003f9a <_dtoa_r+0x302>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	9306      	str	r3, [sp, #24]
 8003ef4:	9308      	str	r3, [sp, #32]
 8003ef6:	9223      	str	r2, [sp, #140]	; 0x8c
 8003ef8:	e00b      	b.n	8003f12 <_dtoa_r+0x27a>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e7f3      	b.n	8003ee6 <_dtoa_r+0x24e>
 8003efe:	2300      	movs	r3, #0
 8003f00:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f04:	445b      	add	r3, fp
 8003f06:	9306      	str	r3, [sp, #24]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	9308      	str	r3, [sp, #32]
 8003f0e:	bfb8      	it	lt
 8003f10:	2301      	movlt	r3, #1
 8003f12:	2100      	movs	r1, #0
 8003f14:	2204      	movs	r2, #4
 8003f16:	69e8      	ldr	r0, [r5, #28]
 8003f18:	f102 0614 	add.w	r6, r2, #20
 8003f1c:	429e      	cmp	r6, r3
 8003f1e:	d940      	bls.n	8003fa2 <_dtoa_r+0x30a>
 8003f20:	6041      	str	r1, [r0, #4]
 8003f22:	4628      	mov	r0, r5
 8003f24:	f000 fd98 	bl	8004a58 <_Balloc>
 8003f28:	9003      	str	r0, [sp, #12]
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d13c      	bne.n	8003fa8 <_dtoa_r+0x310>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	f240 11af 	movw	r1, #431	; 0x1af
 8003f34:	4b16      	ldr	r3, [pc, #88]	; (8003f90 <_dtoa_r+0x2f8>)
 8003f36:	e6c3      	b.n	8003cc0 <_dtoa_r+0x28>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e7e1      	b.n	8003f00 <_dtoa_r+0x268>
 8003f3c:	2401      	movs	r4, #1
 8003f3e:	2300      	movs	r3, #0
 8003f40:	940b      	str	r4, [sp, #44]	; 0x2c
 8003f42:	9322      	str	r3, [sp, #136]	; 0x88
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	2200      	movs	r2, #0
 8003f4a:	9306      	str	r3, [sp, #24]
 8003f4c:	9308      	str	r3, [sp, #32]
 8003f4e:	2312      	movs	r3, #18
 8003f50:	e7d1      	b.n	8003ef6 <_dtoa_r+0x25e>
 8003f52:	bf00      	nop
 8003f54:	f3af 8000 	nop.w
 8003f58:	636f4361 	.word	0x636f4361
 8003f5c:	3fd287a7 	.word	0x3fd287a7
 8003f60:	8b60c8b3 	.word	0x8b60c8b3
 8003f64:	3fc68a28 	.word	0x3fc68a28
 8003f68:	509f79fb 	.word	0x509f79fb
 8003f6c:	3fd34413 	.word	0x3fd34413
 8003f70:	08005973 	.word	0x08005973
 8003f74:	0800598a 	.word	0x0800598a
 8003f78:	7ff00000 	.word	0x7ff00000
 8003f7c:	0800596f 	.word	0x0800596f
 8003f80:	08005966 	.word	0x08005966
 8003f84:	08005943 	.word	0x08005943
 8003f88:	3ff80000 	.word	0x3ff80000
 8003f8c:	08005a78 	.word	0x08005a78
 8003f90:	080059e2 	.word	0x080059e2
 8003f94:	2301      	movs	r3, #1
 8003f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f98:	e7d4      	b.n	8003f44 <_dtoa_r+0x2ac>
 8003f9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f9c:	9306      	str	r3, [sp, #24]
 8003f9e:	9308      	str	r3, [sp, #32]
 8003fa0:	e7b7      	b.n	8003f12 <_dtoa_r+0x27a>
 8003fa2:	3101      	adds	r1, #1
 8003fa4:	0052      	lsls	r2, r2, #1
 8003fa6:	e7b7      	b.n	8003f18 <_dtoa_r+0x280>
 8003fa8:	69eb      	ldr	r3, [r5, #28]
 8003faa:	9a03      	ldr	r2, [sp, #12]
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	9b08      	ldr	r3, [sp, #32]
 8003fb0:	2b0e      	cmp	r3, #14
 8003fb2:	f200 80a8 	bhi.w	8004106 <_dtoa_r+0x46e>
 8003fb6:	2c00      	cmp	r4, #0
 8003fb8:	f000 80a5 	beq.w	8004106 <_dtoa_r+0x46e>
 8003fbc:	f1bb 0f00 	cmp.w	fp, #0
 8003fc0:	dd34      	ble.n	800402c <_dtoa_r+0x394>
 8003fc2:	4b9a      	ldr	r3, [pc, #616]	; (800422c <_dtoa_r+0x594>)
 8003fc4:	f00b 020f 	and.w	r2, fp, #15
 8003fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fcc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003fd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fd4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003fd8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8003fdc:	d016      	beq.n	800400c <_dtoa_r+0x374>
 8003fde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fe2:	4b93      	ldr	r3, [pc, #588]	; (8004230 <_dtoa_r+0x598>)
 8003fe4:	2703      	movs	r7, #3
 8003fe6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fea:	f7fc fc0b 	bl	8000804 <__aeabi_ddiv>
 8003fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ff2:	f004 040f 	and.w	r4, r4, #15
 8003ff6:	4e8e      	ldr	r6, [pc, #568]	; (8004230 <_dtoa_r+0x598>)
 8003ff8:	b954      	cbnz	r4, 8004010 <_dtoa_r+0x378>
 8003ffa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003ffe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004002:	f7fc fbff 	bl	8000804 <__aeabi_ddiv>
 8004006:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800400a:	e029      	b.n	8004060 <_dtoa_r+0x3c8>
 800400c:	2702      	movs	r7, #2
 800400e:	e7f2      	b.n	8003ff6 <_dtoa_r+0x35e>
 8004010:	07e1      	lsls	r1, r4, #31
 8004012:	d508      	bpl.n	8004026 <_dtoa_r+0x38e>
 8004014:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004018:	e9d6 2300 	ldrd	r2, r3, [r6]
 800401c:	f7fc fac8 	bl	80005b0 <__aeabi_dmul>
 8004020:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004024:	3701      	adds	r7, #1
 8004026:	1064      	asrs	r4, r4, #1
 8004028:	3608      	adds	r6, #8
 800402a:	e7e5      	b.n	8003ff8 <_dtoa_r+0x360>
 800402c:	f000 80a5 	beq.w	800417a <_dtoa_r+0x4e2>
 8004030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004034:	f1cb 0400 	rsb	r4, fp, #0
 8004038:	4b7c      	ldr	r3, [pc, #496]	; (800422c <_dtoa_r+0x594>)
 800403a:	f004 020f 	and.w	r2, r4, #15
 800403e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f7fc fab3 	bl	80005b0 <__aeabi_dmul>
 800404a:	2702      	movs	r7, #2
 800404c:	2300      	movs	r3, #0
 800404e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004052:	4e77      	ldr	r6, [pc, #476]	; (8004230 <_dtoa_r+0x598>)
 8004054:	1124      	asrs	r4, r4, #4
 8004056:	2c00      	cmp	r4, #0
 8004058:	f040 8084 	bne.w	8004164 <_dtoa_r+0x4cc>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1d2      	bne.n	8004006 <_dtoa_r+0x36e>
 8004060:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004064:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8087 	beq.w	800417e <_dtoa_r+0x4e6>
 8004070:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004074:	2200      	movs	r2, #0
 8004076:	4b6f      	ldr	r3, [pc, #444]	; (8004234 <_dtoa_r+0x59c>)
 8004078:	f7fc fd0c 	bl	8000a94 <__aeabi_dcmplt>
 800407c:	2800      	cmp	r0, #0
 800407e:	d07e      	beq.n	800417e <_dtoa_r+0x4e6>
 8004080:	9b08      	ldr	r3, [sp, #32]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d07b      	beq.n	800417e <_dtoa_r+0x4e6>
 8004086:	9b06      	ldr	r3, [sp, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	dd38      	ble.n	80040fe <_dtoa_r+0x466>
 800408c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004090:	2200      	movs	r2, #0
 8004092:	4b69      	ldr	r3, [pc, #420]	; (8004238 <_dtoa_r+0x5a0>)
 8004094:	f7fc fa8c 	bl	80005b0 <__aeabi_dmul>
 8004098:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800409c:	9c06      	ldr	r4, [sp, #24]
 800409e:	f10b 38ff 	add.w	r8, fp, #4294967295
 80040a2:	3701      	adds	r7, #1
 80040a4:	4638      	mov	r0, r7
 80040a6:	f7fc fa19 	bl	80004dc <__aeabi_i2d>
 80040aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040ae:	f7fc fa7f 	bl	80005b0 <__aeabi_dmul>
 80040b2:	2200      	movs	r2, #0
 80040b4:	4b61      	ldr	r3, [pc, #388]	; (800423c <_dtoa_r+0x5a4>)
 80040b6:	f7fc f8c5 	bl	8000244 <__adddf3>
 80040ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80040be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040c2:	9611      	str	r6, [sp, #68]	; 0x44
 80040c4:	2c00      	cmp	r4, #0
 80040c6:	d15d      	bne.n	8004184 <_dtoa_r+0x4ec>
 80040c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040cc:	2200      	movs	r2, #0
 80040ce:	4b5c      	ldr	r3, [pc, #368]	; (8004240 <_dtoa_r+0x5a8>)
 80040d0:	f7fc f8b6 	bl	8000240 <__aeabi_dsub>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040dc:	4633      	mov	r3, r6
 80040de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040e0:	f7fc fcf6 	bl	8000ad0 <__aeabi_dcmpgt>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	f040 8295 	bne.w	8004614 <_dtoa_r+0x97c>
 80040ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80040f4:	f7fc fcce 	bl	8000a94 <__aeabi_dcmplt>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	f040 8289 	bne.w	8004610 <_dtoa_r+0x978>
 80040fe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004102:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004106:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004108:	2b00      	cmp	r3, #0
 800410a:	f2c0 8151 	blt.w	80043b0 <_dtoa_r+0x718>
 800410e:	f1bb 0f0e 	cmp.w	fp, #14
 8004112:	f300 814d 	bgt.w	80043b0 <_dtoa_r+0x718>
 8004116:	4b45      	ldr	r3, [pc, #276]	; (800422c <_dtoa_r+0x594>)
 8004118:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800411c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004120:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004124:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004126:	2b00      	cmp	r3, #0
 8004128:	f280 80da 	bge.w	80042e0 <_dtoa_r+0x648>
 800412c:	9b08      	ldr	r3, [sp, #32]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f300 80d6 	bgt.w	80042e0 <_dtoa_r+0x648>
 8004134:	f040 826b 	bne.w	800460e <_dtoa_r+0x976>
 8004138:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800413c:	2200      	movs	r2, #0
 800413e:	4b40      	ldr	r3, [pc, #256]	; (8004240 <_dtoa_r+0x5a8>)
 8004140:	f7fc fa36 	bl	80005b0 <__aeabi_dmul>
 8004144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004148:	f7fc fcb8 	bl	8000abc <__aeabi_dcmpge>
 800414c:	9c08      	ldr	r4, [sp, #32]
 800414e:	4626      	mov	r6, r4
 8004150:	2800      	cmp	r0, #0
 8004152:	f040 8241 	bne.w	80045d8 <_dtoa_r+0x940>
 8004156:	2331      	movs	r3, #49	; 0x31
 8004158:	9f03      	ldr	r7, [sp, #12]
 800415a:	f10b 0b01 	add.w	fp, fp, #1
 800415e:	f807 3b01 	strb.w	r3, [r7], #1
 8004162:	e23d      	b.n	80045e0 <_dtoa_r+0x948>
 8004164:	07e2      	lsls	r2, r4, #31
 8004166:	d505      	bpl.n	8004174 <_dtoa_r+0x4dc>
 8004168:	e9d6 2300 	ldrd	r2, r3, [r6]
 800416c:	f7fc fa20 	bl	80005b0 <__aeabi_dmul>
 8004170:	2301      	movs	r3, #1
 8004172:	3701      	adds	r7, #1
 8004174:	1064      	asrs	r4, r4, #1
 8004176:	3608      	adds	r6, #8
 8004178:	e76d      	b.n	8004056 <_dtoa_r+0x3be>
 800417a:	2702      	movs	r7, #2
 800417c:	e770      	b.n	8004060 <_dtoa_r+0x3c8>
 800417e:	46d8      	mov	r8, fp
 8004180:	9c08      	ldr	r4, [sp, #32]
 8004182:	e78f      	b.n	80040a4 <_dtoa_r+0x40c>
 8004184:	9903      	ldr	r1, [sp, #12]
 8004186:	4b29      	ldr	r3, [pc, #164]	; (800422c <_dtoa_r+0x594>)
 8004188:	4421      	add	r1, r4
 800418a:	9112      	str	r1, [sp, #72]	; 0x48
 800418c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800418e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004192:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004196:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800419a:	2900      	cmp	r1, #0
 800419c:	d054      	beq.n	8004248 <_dtoa_r+0x5b0>
 800419e:	2000      	movs	r0, #0
 80041a0:	4928      	ldr	r1, [pc, #160]	; (8004244 <_dtoa_r+0x5ac>)
 80041a2:	f7fc fb2f 	bl	8000804 <__aeabi_ddiv>
 80041a6:	463b      	mov	r3, r7
 80041a8:	4632      	mov	r2, r6
 80041aa:	f7fc f849 	bl	8000240 <__aeabi_dsub>
 80041ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041b2:	9f03      	ldr	r7, [sp, #12]
 80041b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041b8:	f7fc fcaa 	bl	8000b10 <__aeabi_d2iz>
 80041bc:	4604      	mov	r4, r0
 80041be:	f7fc f98d 	bl	80004dc <__aeabi_i2d>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041ca:	f7fc f839 	bl	8000240 <__aeabi_dsub>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	3430      	adds	r4, #48	; 0x30
 80041d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041dc:	f807 4b01 	strb.w	r4, [r7], #1
 80041e0:	f7fc fc58 	bl	8000a94 <__aeabi_dcmplt>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	d173      	bne.n	80042d0 <_dtoa_r+0x638>
 80041e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041ec:	2000      	movs	r0, #0
 80041ee:	4911      	ldr	r1, [pc, #68]	; (8004234 <_dtoa_r+0x59c>)
 80041f0:	f7fc f826 	bl	8000240 <__aeabi_dsub>
 80041f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041f8:	f7fc fc4c 	bl	8000a94 <__aeabi_dcmplt>
 80041fc:	2800      	cmp	r0, #0
 80041fe:	f040 80b6 	bne.w	800436e <_dtoa_r+0x6d6>
 8004202:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004204:	429f      	cmp	r7, r3
 8004206:	f43f af7a 	beq.w	80040fe <_dtoa_r+0x466>
 800420a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800420e:	2200      	movs	r2, #0
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <_dtoa_r+0x5a0>)
 8004212:	f7fc f9cd 	bl	80005b0 <__aeabi_dmul>
 8004216:	2200      	movs	r2, #0
 8004218:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800421c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <_dtoa_r+0x5a0>)
 8004222:	f7fc f9c5 	bl	80005b0 <__aeabi_dmul>
 8004226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800422a:	e7c3      	b.n	80041b4 <_dtoa_r+0x51c>
 800422c:	08005a78 	.word	0x08005a78
 8004230:	08005a50 	.word	0x08005a50
 8004234:	3ff00000 	.word	0x3ff00000
 8004238:	40240000 	.word	0x40240000
 800423c:	401c0000 	.word	0x401c0000
 8004240:	40140000 	.word	0x40140000
 8004244:	3fe00000 	.word	0x3fe00000
 8004248:	4630      	mov	r0, r6
 800424a:	4639      	mov	r1, r7
 800424c:	f7fc f9b0 	bl	80005b0 <__aeabi_dmul>
 8004250:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004252:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004256:	9c03      	ldr	r4, [sp, #12]
 8004258:	9314      	str	r3, [sp, #80]	; 0x50
 800425a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800425e:	f7fc fc57 	bl	8000b10 <__aeabi_d2iz>
 8004262:	9015      	str	r0, [sp, #84]	; 0x54
 8004264:	f7fc f93a 	bl	80004dc <__aeabi_i2d>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004270:	f7fb ffe6 	bl	8000240 <__aeabi_dsub>
 8004274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004276:	4606      	mov	r6, r0
 8004278:	3330      	adds	r3, #48	; 0x30
 800427a:	f804 3b01 	strb.w	r3, [r4], #1
 800427e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004280:	460f      	mov	r7, r1
 8004282:	429c      	cmp	r4, r3
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	d124      	bne.n	80042d4 <_dtoa_r+0x63c>
 800428a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800428e:	4baf      	ldr	r3, [pc, #700]	; (800454c <_dtoa_r+0x8b4>)
 8004290:	f7fb ffd8 	bl	8000244 <__adddf3>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4630      	mov	r0, r6
 800429a:	4639      	mov	r1, r7
 800429c:	f7fc fc18 	bl	8000ad0 <__aeabi_dcmpgt>
 80042a0:	2800      	cmp	r0, #0
 80042a2:	d163      	bne.n	800436c <_dtoa_r+0x6d4>
 80042a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80042a8:	2000      	movs	r0, #0
 80042aa:	49a8      	ldr	r1, [pc, #672]	; (800454c <_dtoa_r+0x8b4>)
 80042ac:	f7fb ffc8 	bl	8000240 <__aeabi_dsub>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4630      	mov	r0, r6
 80042b6:	4639      	mov	r1, r7
 80042b8:	f7fc fbec 	bl	8000a94 <__aeabi_dcmplt>
 80042bc:	2800      	cmp	r0, #0
 80042be:	f43f af1e 	beq.w	80040fe <_dtoa_r+0x466>
 80042c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80042c4:	1e7b      	subs	r3, r7, #1
 80042c6:	9314      	str	r3, [sp, #80]	; 0x50
 80042c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80042cc:	2b30      	cmp	r3, #48	; 0x30
 80042ce:	d0f8      	beq.n	80042c2 <_dtoa_r+0x62a>
 80042d0:	46c3      	mov	fp, r8
 80042d2:	e03b      	b.n	800434c <_dtoa_r+0x6b4>
 80042d4:	4b9e      	ldr	r3, [pc, #632]	; (8004550 <_dtoa_r+0x8b8>)
 80042d6:	f7fc f96b 	bl	80005b0 <__aeabi_dmul>
 80042da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042de:	e7bc      	b.n	800425a <_dtoa_r+0x5c2>
 80042e0:	9f03      	ldr	r7, [sp, #12]
 80042e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80042e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042ea:	4640      	mov	r0, r8
 80042ec:	4649      	mov	r1, r9
 80042ee:	f7fc fa89 	bl	8000804 <__aeabi_ddiv>
 80042f2:	f7fc fc0d 	bl	8000b10 <__aeabi_d2iz>
 80042f6:	4604      	mov	r4, r0
 80042f8:	f7fc f8f0 	bl	80004dc <__aeabi_i2d>
 80042fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004300:	f7fc f956 	bl	80005b0 <__aeabi_dmul>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4640      	mov	r0, r8
 800430a:	4649      	mov	r1, r9
 800430c:	f7fb ff98 	bl	8000240 <__aeabi_dsub>
 8004310:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004314:	f807 6b01 	strb.w	r6, [r7], #1
 8004318:	9e03      	ldr	r6, [sp, #12]
 800431a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800431e:	1bbe      	subs	r6, r7, r6
 8004320:	45b4      	cmp	ip, r6
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	d136      	bne.n	8004396 <_dtoa_r+0x6fe>
 8004328:	f7fb ff8c 	bl	8000244 <__adddf3>
 800432c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004330:	4680      	mov	r8, r0
 8004332:	4689      	mov	r9, r1
 8004334:	f7fc fbcc 	bl	8000ad0 <__aeabi_dcmpgt>
 8004338:	bb58      	cbnz	r0, 8004392 <_dtoa_r+0x6fa>
 800433a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800433e:	4640      	mov	r0, r8
 8004340:	4649      	mov	r1, r9
 8004342:	f7fc fb9d 	bl	8000a80 <__aeabi_dcmpeq>
 8004346:	b108      	cbz	r0, 800434c <_dtoa_r+0x6b4>
 8004348:	07e3      	lsls	r3, r4, #31
 800434a:	d422      	bmi.n	8004392 <_dtoa_r+0x6fa>
 800434c:	4651      	mov	r1, sl
 800434e:	4628      	mov	r0, r5
 8004350:	f000 fbc2 	bl	8004ad8 <_Bfree>
 8004354:	2300      	movs	r3, #0
 8004356:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004358:	703b      	strb	r3, [r7, #0]
 800435a:	f10b 0301 	add.w	r3, fp, #1
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004362:	2b00      	cmp	r3, #0
 8004364:	f43f ace6 	beq.w	8003d34 <_dtoa_r+0x9c>
 8004368:	601f      	str	r7, [r3, #0]
 800436a:	e4e3      	b.n	8003d34 <_dtoa_r+0x9c>
 800436c:	4627      	mov	r7, r4
 800436e:	463b      	mov	r3, r7
 8004370:	461f      	mov	r7, r3
 8004372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004376:	2a39      	cmp	r2, #57	; 0x39
 8004378:	d107      	bne.n	800438a <_dtoa_r+0x6f2>
 800437a:	9a03      	ldr	r2, [sp, #12]
 800437c:	429a      	cmp	r2, r3
 800437e:	d1f7      	bne.n	8004370 <_dtoa_r+0x6d8>
 8004380:	2230      	movs	r2, #48	; 0x30
 8004382:	9903      	ldr	r1, [sp, #12]
 8004384:	f108 0801 	add.w	r8, r8, #1
 8004388:	700a      	strb	r2, [r1, #0]
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	3201      	adds	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	e79e      	b.n	80042d0 <_dtoa_r+0x638>
 8004392:	46d8      	mov	r8, fp
 8004394:	e7eb      	b.n	800436e <_dtoa_r+0x6d6>
 8004396:	2200      	movs	r2, #0
 8004398:	4b6d      	ldr	r3, [pc, #436]	; (8004550 <_dtoa_r+0x8b8>)
 800439a:	f7fc f909 	bl	80005b0 <__aeabi_dmul>
 800439e:	2200      	movs	r2, #0
 80043a0:	2300      	movs	r3, #0
 80043a2:	4680      	mov	r8, r0
 80043a4:	4689      	mov	r9, r1
 80043a6:	f7fc fb6b 	bl	8000a80 <__aeabi_dcmpeq>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	d09b      	beq.n	80042e6 <_dtoa_r+0x64e>
 80043ae:	e7cd      	b.n	800434c <_dtoa_r+0x6b4>
 80043b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043b2:	2a00      	cmp	r2, #0
 80043b4:	f000 80c4 	beq.w	8004540 <_dtoa_r+0x8a8>
 80043b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80043ba:	2a01      	cmp	r2, #1
 80043bc:	f300 80a8 	bgt.w	8004510 <_dtoa_r+0x878>
 80043c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80043c2:	2a00      	cmp	r2, #0
 80043c4:	f000 80a0 	beq.w	8004508 <_dtoa_r+0x870>
 80043c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043cc:	464f      	mov	r7, r9
 80043ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80043d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043d2:	2101      	movs	r1, #1
 80043d4:	441a      	add	r2, r3
 80043d6:	4628      	mov	r0, r5
 80043d8:	4499      	add	r9, r3
 80043da:	9209      	str	r2, [sp, #36]	; 0x24
 80043dc:	f000 fc32 	bl	8004c44 <__i2b>
 80043e0:	4606      	mov	r6, r0
 80043e2:	b15f      	cbz	r7, 80043fc <_dtoa_r+0x764>
 80043e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	dd08      	ble.n	80043fc <_dtoa_r+0x764>
 80043ea:	42bb      	cmp	r3, r7
 80043ec:	bfa8      	it	ge
 80043ee:	463b      	movge	r3, r7
 80043f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043f2:	eba9 0903 	sub.w	r9, r9, r3
 80043f6:	1aff      	subs	r7, r7, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	9309      	str	r3, [sp, #36]	; 0x24
 80043fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043fe:	b1f3      	cbz	r3, 800443e <_dtoa_r+0x7a6>
 8004400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80a0 	beq.w	8004548 <_dtoa_r+0x8b0>
 8004408:	2c00      	cmp	r4, #0
 800440a:	dd10      	ble.n	800442e <_dtoa_r+0x796>
 800440c:	4631      	mov	r1, r6
 800440e:	4622      	mov	r2, r4
 8004410:	4628      	mov	r0, r5
 8004412:	f000 fcd5 	bl	8004dc0 <__pow5mult>
 8004416:	4652      	mov	r2, sl
 8004418:	4601      	mov	r1, r0
 800441a:	4606      	mov	r6, r0
 800441c:	4628      	mov	r0, r5
 800441e:	f000 fc27 	bl	8004c70 <__multiply>
 8004422:	4680      	mov	r8, r0
 8004424:	4651      	mov	r1, sl
 8004426:	4628      	mov	r0, r5
 8004428:	f000 fb56 	bl	8004ad8 <_Bfree>
 800442c:	46c2      	mov	sl, r8
 800442e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004430:	1b1a      	subs	r2, r3, r4
 8004432:	d004      	beq.n	800443e <_dtoa_r+0x7a6>
 8004434:	4651      	mov	r1, sl
 8004436:	4628      	mov	r0, r5
 8004438:	f000 fcc2 	bl	8004dc0 <__pow5mult>
 800443c:	4682      	mov	sl, r0
 800443e:	2101      	movs	r1, #1
 8004440:	4628      	mov	r0, r5
 8004442:	f000 fbff 	bl	8004c44 <__i2b>
 8004446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004448:	4604      	mov	r4, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	f340 8082 	ble.w	8004554 <_dtoa_r+0x8bc>
 8004450:	461a      	mov	r2, r3
 8004452:	4601      	mov	r1, r0
 8004454:	4628      	mov	r0, r5
 8004456:	f000 fcb3 	bl	8004dc0 <__pow5mult>
 800445a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800445c:	4604      	mov	r4, r0
 800445e:	2b01      	cmp	r3, #1
 8004460:	dd7b      	ble.n	800455a <_dtoa_r+0x8c2>
 8004462:	f04f 0800 	mov.w	r8, #0
 8004466:	6923      	ldr	r3, [r4, #16]
 8004468:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800446c:	6918      	ldr	r0, [r3, #16]
 800446e:	f000 fb9b 	bl	8004ba8 <__hi0bits>
 8004472:	f1c0 0020 	rsb	r0, r0, #32
 8004476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004478:	4418      	add	r0, r3
 800447a:	f010 001f 	ands.w	r0, r0, #31
 800447e:	f000 8092 	beq.w	80045a6 <_dtoa_r+0x90e>
 8004482:	f1c0 0320 	rsb	r3, r0, #32
 8004486:	2b04      	cmp	r3, #4
 8004488:	f340 8085 	ble.w	8004596 <_dtoa_r+0x8fe>
 800448c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800448e:	f1c0 001c 	rsb	r0, r0, #28
 8004492:	4403      	add	r3, r0
 8004494:	4481      	add	r9, r0
 8004496:	4407      	add	r7, r0
 8004498:	9309      	str	r3, [sp, #36]	; 0x24
 800449a:	f1b9 0f00 	cmp.w	r9, #0
 800449e:	dd05      	ble.n	80044ac <_dtoa_r+0x814>
 80044a0:	4651      	mov	r1, sl
 80044a2:	464a      	mov	r2, r9
 80044a4:	4628      	mov	r0, r5
 80044a6:	f000 fce5 	bl	8004e74 <__lshift>
 80044aa:	4682      	mov	sl, r0
 80044ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	dd05      	ble.n	80044be <_dtoa_r+0x826>
 80044b2:	4621      	mov	r1, r4
 80044b4:	461a      	mov	r2, r3
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 fcdc 	bl	8004e74 <__lshift>
 80044bc:	4604      	mov	r4, r0
 80044be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d072      	beq.n	80045aa <_dtoa_r+0x912>
 80044c4:	4621      	mov	r1, r4
 80044c6:	4650      	mov	r0, sl
 80044c8:	f000 fd40 	bl	8004f4c <__mcmp>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	da6c      	bge.n	80045aa <_dtoa_r+0x912>
 80044d0:	2300      	movs	r3, #0
 80044d2:	4651      	mov	r1, sl
 80044d4:	220a      	movs	r2, #10
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 fb20 	bl	8004b1c <__multadd>
 80044dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044de:	4682      	mov	sl, r0
 80044e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 81ac 	beq.w	8004842 <_dtoa_r+0xbaa>
 80044ea:	2300      	movs	r3, #0
 80044ec:	4631      	mov	r1, r6
 80044ee:	220a      	movs	r2, #10
 80044f0:	4628      	mov	r0, r5
 80044f2:	f000 fb13 	bl	8004b1c <__multadd>
 80044f6:	9b06      	ldr	r3, [sp, #24]
 80044f8:	4606      	mov	r6, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f300 8093 	bgt.w	8004626 <_dtoa_r+0x98e>
 8004500:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004502:	2b02      	cmp	r3, #2
 8004504:	dc59      	bgt.n	80045ba <_dtoa_r+0x922>
 8004506:	e08e      	b.n	8004626 <_dtoa_r+0x98e>
 8004508:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800450a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800450e:	e75d      	b.n	80043cc <_dtoa_r+0x734>
 8004510:	9b08      	ldr	r3, [sp, #32]
 8004512:	1e5c      	subs	r4, r3, #1
 8004514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004516:	42a3      	cmp	r3, r4
 8004518:	bfbf      	itttt	lt
 800451a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800451c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800451e:	1ae3      	sublt	r3, r4, r3
 8004520:	18d2      	addlt	r2, r2, r3
 8004522:	bfa8      	it	ge
 8004524:	1b1c      	subge	r4, r3, r4
 8004526:	9b08      	ldr	r3, [sp, #32]
 8004528:	bfbe      	ittt	lt
 800452a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800452c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800452e:	2400      	movlt	r4, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	bfb5      	itete	lt
 8004534:	eba9 0703 	sublt.w	r7, r9, r3
 8004538:	464f      	movge	r7, r9
 800453a:	2300      	movlt	r3, #0
 800453c:	9b08      	ldrge	r3, [sp, #32]
 800453e:	e747      	b.n	80043d0 <_dtoa_r+0x738>
 8004540:	464f      	mov	r7, r9
 8004542:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004544:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004546:	e74c      	b.n	80043e2 <_dtoa_r+0x74a>
 8004548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800454a:	e773      	b.n	8004434 <_dtoa_r+0x79c>
 800454c:	3fe00000 	.word	0x3fe00000
 8004550:	40240000 	.word	0x40240000
 8004554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004556:	2b01      	cmp	r3, #1
 8004558:	dc18      	bgt.n	800458c <_dtoa_r+0x8f4>
 800455a:	9b04      	ldr	r3, [sp, #16]
 800455c:	b9b3      	cbnz	r3, 800458c <_dtoa_r+0x8f4>
 800455e:	9b05      	ldr	r3, [sp, #20]
 8004560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004564:	b993      	cbnz	r3, 800458c <_dtoa_r+0x8f4>
 8004566:	9b05      	ldr	r3, [sp, #20]
 8004568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800456c:	0d1b      	lsrs	r3, r3, #20
 800456e:	051b      	lsls	r3, r3, #20
 8004570:	b17b      	cbz	r3, 8004592 <_dtoa_r+0x8fa>
 8004572:	f04f 0801 	mov.w	r8, #1
 8004576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004578:	f109 0901 	add.w	r9, r9, #1
 800457c:	3301      	adds	r3, #1
 800457e:	9309      	str	r3, [sp, #36]	; 0x24
 8004580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004582:	2b00      	cmp	r3, #0
 8004584:	f47f af6f 	bne.w	8004466 <_dtoa_r+0x7ce>
 8004588:	2001      	movs	r0, #1
 800458a:	e774      	b.n	8004476 <_dtoa_r+0x7de>
 800458c:	f04f 0800 	mov.w	r8, #0
 8004590:	e7f6      	b.n	8004580 <_dtoa_r+0x8e8>
 8004592:	4698      	mov	r8, r3
 8004594:	e7f4      	b.n	8004580 <_dtoa_r+0x8e8>
 8004596:	d080      	beq.n	800449a <_dtoa_r+0x802>
 8004598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800459a:	331c      	adds	r3, #28
 800459c:	441a      	add	r2, r3
 800459e:	4499      	add	r9, r3
 80045a0:	441f      	add	r7, r3
 80045a2:	9209      	str	r2, [sp, #36]	; 0x24
 80045a4:	e779      	b.n	800449a <_dtoa_r+0x802>
 80045a6:	4603      	mov	r3, r0
 80045a8:	e7f6      	b.n	8004598 <_dtoa_r+0x900>
 80045aa:	9b08      	ldr	r3, [sp, #32]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	dc34      	bgt.n	800461a <_dtoa_r+0x982>
 80045b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	dd31      	ble.n	800461a <_dtoa_r+0x982>
 80045b6:	9b08      	ldr	r3, [sp, #32]
 80045b8:	9306      	str	r3, [sp, #24]
 80045ba:	9b06      	ldr	r3, [sp, #24]
 80045bc:	b963      	cbnz	r3, 80045d8 <_dtoa_r+0x940>
 80045be:	4621      	mov	r1, r4
 80045c0:	2205      	movs	r2, #5
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 faaa 	bl	8004b1c <__multadd>
 80045c8:	4601      	mov	r1, r0
 80045ca:	4604      	mov	r4, r0
 80045cc:	4650      	mov	r0, sl
 80045ce:	f000 fcbd 	bl	8004f4c <__mcmp>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	f73f adbf 	bgt.w	8004156 <_dtoa_r+0x4be>
 80045d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045da:	9f03      	ldr	r7, [sp, #12]
 80045dc:	ea6f 0b03 	mvn.w	fp, r3
 80045e0:	f04f 0800 	mov.w	r8, #0
 80045e4:	4621      	mov	r1, r4
 80045e6:	4628      	mov	r0, r5
 80045e8:	f000 fa76 	bl	8004ad8 <_Bfree>
 80045ec:	2e00      	cmp	r6, #0
 80045ee:	f43f aead 	beq.w	800434c <_dtoa_r+0x6b4>
 80045f2:	f1b8 0f00 	cmp.w	r8, #0
 80045f6:	d005      	beq.n	8004604 <_dtoa_r+0x96c>
 80045f8:	45b0      	cmp	r8, r6
 80045fa:	d003      	beq.n	8004604 <_dtoa_r+0x96c>
 80045fc:	4641      	mov	r1, r8
 80045fe:	4628      	mov	r0, r5
 8004600:	f000 fa6a 	bl	8004ad8 <_Bfree>
 8004604:	4631      	mov	r1, r6
 8004606:	4628      	mov	r0, r5
 8004608:	f000 fa66 	bl	8004ad8 <_Bfree>
 800460c:	e69e      	b.n	800434c <_dtoa_r+0x6b4>
 800460e:	2400      	movs	r4, #0
 8004610:	4626      	mov	r6, r4
 8004612:	e7e1      	b.n	80045d8 <_dtoa_r+0x940>
 8004614:	46c3      	mov	fp, r8
 8004616:	4626      	mov	r6, r4
 8004618:	e59d      	b.n	8004156 <_dtoa_r+0x4be>
 800461a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80c8 	beq.w	80047b2 <_dtoa_r+0xb1a>
 8004622:	9b08      	ldr	r3, [sp, #32]
 8004624:	9306      	str	r3, [sp, #24]
 8004626:	2f00      	cmp	r7, #0
 8004628:	dd05      	ble.n	8004636 <_dtoa_r+0x99e>
 800462a:	4631      	mov	r1, r6
 800462c:	463a      	mov	r2, r7
 800462e:	4628      	mov	r0, r5
 8004630:	f000 fc20 	bl	8004e74 <__lshift>
 8004634:	4606      	mov	r6, r0
 8004636:	f1b8 0f00 	cmp.w	r8, #0
 800463a:	d05b      	beq.n	80046f4 <_dtoa_r+0xa5c>
 800463c:	4628      	mov	r0, r5
 800463e:	6871      	ldr	r1, [r6, #4]
 8004640:	f000 fa0a 	bl	8004a58 <_Balloc>
 8004644:	4607      	mov	r7, r0
 8004646:	b928      	cbnz	r0, 8004654 <_dtoa_r+0x9bc>
 8004648:	4602      	mov	r2, r0
 800464a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800464e:	4b81      	ldr	r3, [pc, #516]	; (8004854 <_dtoa_r+0xbbc>)
 8004650:	f7ff bb36 	b.w	8003cc0 <_dtoa_r+0x28>
 8004654:	6932      	ldr	r2, [r6, #16]
 8004656:	f106 010c 	add.w	r1, r6, #12
 800465a:	3202      	adds	r2, #2
 800465c:	0092      	lsls	r2, r2, #2
 800465e:	300c      	adds	r0, #12
 8004660:	f000 fe2c 	bl	80052bc <memcpy>
 8004664:	2201      	movs	r2, #1
 8004666:	4639      	mov	r1, r7
 8004668:	4628      	mov	r0, r5
 800466a:	f000 fc03 	bl	8004e74 <__lshift>
 800466e:	46b0      	mov	r8, r6
 8004670:	4606      	mov	r6, r0
 8004672:	9b03      	ldr	r3, [sp, #12]
 8004674:	9a03      	ldr	r2, [sp, #12]
 8004676:	3301      	adds	r3, #1
 8004678:	9308      	str	r3, [sp, #32]
 800467a:	9b06      	ldr	r3, [sp, #24]
 800467c:	4413      	add	r3, r2
 800467e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004680:	9b04      	ldr	r3, [sp, #16]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	930a      	str	r3, [sp, #40]	; 0x28
 8004688:	9b08      	ldr	r3, [sp, #32]
 800468a:	4621      	mov	r1, r4
 800468c:	3b01      	subs	r3, #1
 800468e:	4650      	mov	r0, sl
 8004690:	9304      	str	r3, [sp, #16]
 8004692:	f7ff fa75 	bl	8003b80 <quorem>
 8004696:	4641      	mov	r1, r8
 8004698:	9006      	str	r0, [sp, #24]
 800469a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800469e:	4650      	mov	r0, sl
 80046a0:	f000 fc54 	bl	8004f4c <__mcmp>
 80046a4:	4632      	mov	r2, r6
 80046a6:	9009      	str	r0, [sp, #36]	; 0x24
 80046a8:	4621      	mov	r1, r4
 80046aa:	4628      	mov	r0, r5
 80046ac:	f000 fc6a 	bl	8004f84 <__mdiff>
 80046b0:	68c2      	ldr	r2, [r0, #12]
 80046b2:	4607      	mov	r7, r0
 80046b4:	bb02      	cbnz	r2, 80046f8 <_dtoa_r+0xa60>
 80046b6:	4601      	mov	r1, r0
 80046b8:	4650      	mov	r0, sl
 80046ba:	f000 fc47 	bl	8004f4c <__mcmp>
 80046be:	4602      	mov	r2, r0
 80046c0:	4639      	mov	r1, r7
 80046c2:	4628      	mov	r0, r5
 80046c4:	920c      	str	r2, [sp, #48]	; 0x30
 80046c6:	f000 fa07 	bl	8004ad8 <_Bfree>
 80046ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046ce:	9f08      	ldr	r7, [sp, #32]
 80046d0:	ea43 0102 	orr.w	r1, r3, r2
 80046d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046d6:	4319      	orrs	r1, r3
 80046d8:	d110      	bne.n	80046fc <_dtoa_r+0xa64>
 80046da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80046de:	d029      	beq.n	8004734 <_dtoa_r+0xa9c>
 80046e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	dd02      	ble.n	80046ec <_dtoa_r+0xa54>
 80046e6:	9b06      	ldr	r3, [sp, #24]
 80046e8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80046ec:	9b04      	ldr	r3, [sp, #16]
 80046ee:	f883 9000 	strb.w	r9, [r3]
 80046f2:	e777      	b.n	80045e4 <_dtoa_r+0x94c>
 80046f4:	4630      	mov	r0, r6
 80046f6:	e7ba      	b.n	800466e <_dtoa_r+0x9d6>
 80046f8:	2201      	movs	r2, #1
 80046fa:	e7e1      	b.n	80046c0 <_dtoa_r+0xa28>
 80046fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	db04      	blt.n	800470c <_dtoa_r+0xa74>
 8004702:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004704:	430b      	orrs	r3, r1
 8004706:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004708:	430b      	orrs	r3, r1
 800470a:	d120      	bne.n	800474e <_dtoa_r+0xab6>
 800470c:	2a00      	cmp	r2, #0
 800470e:	dded      	ble.n	80046ec <_dtoa_r+0xa54>
 8004710:	4651      	mov	r1, sl
 8004712:	2201      	movs	r2, #1
 8004714:	4628      	mov	r0, r5
 8004716:	f000 fbad 	bl	8004e74 <__lshift>
 800471a:	4621      	mov	r1, r4
 800471c:	4682      	mov	sl, r0
 800471e:	f000 fc15 	bl	8004f4c <__mcmp>
 8004722:	2800      	cmp	r0, #0
 8004724:	dc03      	bgt.n	800472e <_dtoa_r+0xa96>
 8004726:	d1e1      	bne.n	80046ec <_dtoa_r+0xa54>
 8004728:	f019 0f01 	tst.w	r9, #1
 800472c:	d0de      	beq.n	80046ec <_dtoa_r+0xa54>
 800472e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004732:	d1d8      	bne.n	80046e6 <_dtoa_r+0xa4e>
 8004734:	2339      	movs	r3, #57	; 0x39
 8004736:	9a04      	ldr	r2, [sp, #16]
 8004738:	7013      	strb	r3, [r2, #0]
 800473a:	463b      	mov	r3, r7
 800473c:	461f      	mov	r7, r3
 800473e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004742:	3b01      	subs	r3, #1
 8004744:	2a39      	cmp	r2, #57	; 0x39
 8004746:	d06b      	beq.n	8004820 <_dtoa_r+0xb88>
 8004748:	3201      	adds	r2, #1
 800474a:	701a      	strb	r2, [r3, #0]
 800474c:	e74a      	b.n	80045e4 <_dtoa_r+0x94c>
 800474e:	2a00      	cmp	r2, #0
 8004750:	dd07      	ble.n	8004762 <_dtoa_r+0xaca>
 8004752:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004756:	d0ed      	beq.n	8004734 <_dtoa_r+0xa9c>
 8004758:	9a04      	ldr	r2, [sp, #16]
 800475a:	f109 0301 	add.w	r3, r9, #1
 800475e:	7013      	strb	r3, [r2, #0]
 8004760:	e740      	b.n	80045e4 <_dtoa_r+0x94c>
 8004762:	9b08      	ldr	r3, [sp, #32]
 8004764:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004766:	f803 9c01 	strb.w	r9, [r3, #-1]
 800476a:	4293      	cmp	r3, r2
 800476c:	d042      	beq.n	80047f4 <_dtoa_r+0xb5c>
 800476e:	4651      	mov	r1, sl
 8004770:	2300      	movs	r3, #0
 8004772:	220a      	movs	r2, #10
 8004774:	4628      	mov	r0, r5
 8004776:	f000 f9d1 	bl	8004b1c <__multadd>
 800477a:	45b0      	cmp	r8, r6
 800477c:	4682      	mov	sl, r0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	f04f 020a 	mov.w	r2, #10
 8004786:	4641      	mov	r1, r8
 8004788:	4628      	mov	r0, r5
 800478a:	d107      	bne.n	800479c <_dtoa_r+0xb04>
 800478c:	f000 f9c6 	bl	8004b1c <__multadd>
 8004790:	4680      	mov	r8, r0
 8004792:	4606      	mov	r6, r0
 8004794:	9b08      	ldr	r3, [sp, #32]
 8004796:	3301      	adds	r3, #1
 8004798:	9308      	str	r3, [sp, #32]
 800479a:	e775      	b.n	8004688 <_dtoa_r+0x9f0>
 800479c:	f000 f9be 	bl	8004b1c <__multadd>
 80047a0:	4631      	mov	r1, r6
 80047a2:	4680      	mov	r8, r0
 80047a4:	2300      	movs	r3, #0
 80047a6:	220a      	movs	r2, #10
 80047a8:	4628      	mov	r0, r5
 80047aa:	f000 f9b7 	bl	8004b1c <__multadd>
 80047ae:	4606      	mov	r6, r0
 80047b0:	e7f0      	b.n	8004794 <_dtoa_r+0xafc>
 80047b2:	9b08      	ldr	r3, [sp, #32]
 80047b4:	9306      	str	r3, [sp, #24]
 80047b6:	9f03      	ldr	r7, [sp, #12]
 80047b8:	4621      	mov	r1, r4
 80047ba:	4650      	mov	r0, sl
 80047bc:	f7ff f9e0 	bl	8003b80 <quorem>
 80047c0:	9b03      	ldr	r3, [sp, #12]
 80047c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80047c6:	f807 9b01 	strb.w	r9, [r7], #1
 80047ca:	1afa      	subs	r2, r7, r3
 80047cc:	9b06      	ldr	r3, [sp, #24]
 80047ce:	4293      	cmp	r3, r2
 80047d0:	dd07      	ble.n	80047e2 <_dtoa_r+0xb4a>
 80047d2:	4651      	mov	r1, sl
 80047d4:	2300      	movs	r3, #0
 80047d6:	220a      	movs	r2, #10
 80047d8:	4628      	mov	r0, r5
 80047da:	f000 f99f 	bl	8004b1c <__multadd>
 80047de:	4682      	mov	sl, r0
 80047e0:	e7ea      	b.n	80047b8 <_dtoa_r+0xb20>
 80047e2:	9b06      	ldr	r3, [sp, #24]
 80047e4:	f04f 0800 	mov.w	r8, #0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bfcc      	ite	gt
 80047ec:	461f      	movgt	r7, r3
 80047ee:	2701      	movle	r7, #1
 80047f0:	9b03      	ldr	r3, [sp, #12]
 80047f2:	441f      	add	r7, r3
 80047f4:	4651      	mov	r1, sl
 80047f6:	2201      	movs	r2, #1
 80047f8:	4628      	mov	r0, r5
 80047fa:	f000 fb3b 	bl	8004e74 <__lshift>
 80047fe:	4621      	mov	r1, r4
 8004800:	4682      	mov	sl, r0
 8004802:	f000 fba3 	bl	8004f4c <__mcmp>
 8004806:	2800      	cmp	r0, #0
 8004808:	dc97      	bgt.n	800473a <_dtoa_r+0xaa2>
 800480a:	d102      	bne.n	8004812 <_dtoa_r+0xb7a>
 800480c:	f019 0f01 	tst.w	r9, #1
 8004810:	d193      	bne.n	800473a <_dtoa_r+0xaa2>
 8004812:	463b      	mov	r3, r7
 8004814:	461f      	mov	r7, r3
 8004816:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800481a:	2a30      	cmp	r2, #48	; 0x30
 800481c:	d0fa      	beq.n	8004814 <_dtoa_r+0xb7c>
 800481e:	e6e1      	b.n	80045e4 <_dtoa_r+0x94c>
 8004820:	9a03      	ldr	r2, [sp, #12]
 8004822:	429a      	cmp	r2, r3
 8004824:	d18a      	bne.n	800473c <_dtoa_r+0xaa4>
 8004826:	2331      	movs	r3, #49	; 0x31
 8004828:	f10b 0b01 	add.w	fp, fp, #1
 800482c:	e797      	b.n	800475e <_dtoa_r+0xac6>
 800482e:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <_dtoa_r+0xbc0>)
 8004830:	f7ff ba9f 	b.w	8003d72 <_dtoa_r+0xda>
 8004834:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004836:	2b00      	cmp	r3, #0
 8004838:	f47f aa77 	bne.w	8003d2a <_dtoa_r+0x92>
 800483c:	4b07      	ldr	r3, [pc, #28]	; (800485c <_dtoa_r+0xbc4>)
 800483e:	f7ff ba98 	b.w	8003d72 <_dtoa_r+0xda>
 8004842:	9b06      	ldr	r3, [sp, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	dcb6      	bgt.n	80047b6 <_dtoa_r+0xb1e>
 8004848:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800484a:	2b02      	cmp	r3, #2
 800484c:	f73f aeb5 	bgt.w	80045ba <_dtoa_r+0x922>
 8004850:	e7b1      	b.n	80047b6 <_dtoa_r+0xb1e>
 8004852:	bf00      	nop
 8004854:	080059e2 	.word	0x080059e2
 8004858:	08005942 	.word	0x08005942
 800485c:	08005966 	.word	0x08005966

08004860 <_free_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4605      	mov	r5, r0
 8004864:	2900      	cmp	r1, #0
 8004866:	d040      	beq.n	80048ea <_free_r+0x8a>
 8004868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800486c:	1f0c      	subs	r4, r1, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	bfb8      	it	lt
 8004872:	18e4      	addlt	r4, r4, r3
 8004874:	f000 f8e4 	bl	8004a40 <__malloc_lock>
 8004878:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <_free_r+0x8c>)
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	b933      	cbnz	r3, 800488c <_free_r+0x2c>
 800487e:	6063      	str	r3, [r4, #4]
 8004880:	6014      	str	r4, [r2, #0]
 8004882:	4628      	mov	r0, r5
 8004884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004888:	f000 b8e0 	b.w	8004a4c <__malloc_unlock>
 800488c:	42a3      	cmp	r3, r4
 800488e:	d908      	bls.n	80048a2 <_free_r+0x42>
 8004890:	6820      	ldr	r0, [r4, #0]
 8004892:	1821      	adds	r1, r4, r0
 8004894:	428b      	cmp	r3, r1
 8004896:	bf01      	itttt	eq
 8004898:	6819      	ldreq	r1, [r3, #0]
 800489a:	685b      	ldreq	r3, [r3, #4]
 800489c:	1809      	addeq	r1, r1, r0
 800489e:	6021      	streq	r1, [r4, #0]
 80048a0:	e7ed      	b.n	800487e <_free_r+0x1e>
 80048a2:	461a      	mov	r2, r3
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	b10b      	cbz	r3, 80048ac <_free_r+0x4c>
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d9fa      	bls.n	80048a2 <_free_r+0x42>
 80048ac:	6811      	ldr	r1, [r2, #0]
 80048ae:	1850      	adds	r0, r2, r1
 80048b0:	42a0      	cmp	r0, r4
 80048b2:	d10b      	bne.n	80048cc <_free_r+0x6c>
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	4401      	add	r1, r0
 80048b8:	1850      	adds	r0, r2, r1
 80048ba:	4283      	cmp	r3, r0
 80048bc:	6011      	str	r1, [r2, #0]
 80048be:	d1e0      	bne.n	8004882 <_free_r+0x22>
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4408      	add	r0, r1
 80048c6:	6010      	str	r0, [r2, #0]
 80048c8:	6053      	str	r3, [r2, #4]
 80048ca:	e7da      	b.n	8004882 <_free_r+0x22>
 80048cc:	d902      	bls.n	80048d4 <_free_r+0x74>
 80048ce:	230c      	movs	r3, #12
 80048d0:	602b      	str	r3, [r5, #0]
 80048d2:	e7d6      	b.n	8004882 <_free_r+0x22>
 80048d4:	6820      	ldr	r0, [r4, #0]
 80048d6:	1821      	adds	r1, r4, r0
 80048d8:	428b      	cmp	r3, r1
 80048da:	bf01      	itttt	eq
 80048dc:	6819      	ldreq	r1, [r3, #0]
 80048de:	685b      	ldreq	r3, [r3, #4]
 80048e0:	1809      	addeq	r1, r1, r0
 80048e2:	6021      	streq	r1, [r4, #0]
 80048e4:	6063      	str	r3, [r4, #4]
 80048e6:	6054      	str	r4, [r2, #4]
 80048e8:	e7cb      	b.n	8004882 <_free_r+0x22>
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	20000388 	.word	0x20000388

080048f0 <malloc>:
 80048f0:	4b02      	ldr	r3, [pc, #8]	; (80048fc <malloc+0xc>)
 80048f2:	4601      	mov	r1, r0
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	f000 b823 	b.w	8004940 <_malloc_r>
 80048fa:	bf00      	nop
 80048fc:	20000064 	.word	0x20000064

08004900 <sbrk_aligned>:
 8004900:	b570      	push	{r4, r5, r6, lr}
 8004902:	4e0e      	ldr	r6, [pc, #56]	; (800493c <sbrk_aligned+0x3c>)
 8004904:	460c      	mov	r4, r1
 8004906:	6831      	ldr	r1, [r6, #0]
 8004908:	4605      	mov	r5, r0
 800490a:	b911      	cbnz	r1, 8004912 <sbrk_aligned+0x12>
 800490c:	f000 fcc6 	bl	800529c <_sbrk_r>
 8004910:	6030      	str	r0, [r6, #0]
 8004912:	4621      	mov	r1, r4
 8004914:	4628      	mov	r0, r5
 8004916:	f000 fcc1 	bl	800529c <_sbrk_r>
 800491a:	1c43      	adds	r3, r0, #1
 800491c:	d00a      	beq.n	8004934 <sbrk_aligned+0x34>
 800491e:	1cc4      	adds	r4, r0, #3
 8004920:	f024 0403 	bic.w	r4, r4, #3
 8004924:	42a0      	cmp	r0, r4
 8004926:	d007      	beq.n	8004938 <sbrk_aligned+0x38>
 8004928:	1a21      	subs	r1, r4, r0
 800492a:	4628      	mov	r0, r5
 800492c:	f000 fcb6 	bl	800529c <_sbrk_r>
 8004930:	3001      	adds	r0, #1
 8004932:	d101      	bne.n	8004938 <sbrk_aligned+0x38>
 8004934:	f04f 34ff 	mov.w	r4, #4294967295
 8004938:	4620      	mov	r0, r4
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	2000038c 	.word	0x2000038c

08004940 <_malloc_r>:
 8004940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004944:	1ccd      	adds	r5, r1, #3
 8004946:	f025 0503 	bic.w	r5, r5, #3
 800494a:	3508      	adds	r5, #8
 800494c:	2d0c      	cmp	r5, #12
 800494e:	bf38      	it	cc
 8004950:	250c      	movcc	r5, #12
 8004952:	2d00      	cmp	r5, #0
 8004954:	4607      	mov	r7, r0
 8004956:	db01      	blt.n	800495c <_malloc_r+0x1c>
 8004958:	42a9      	cmp	r1, r5
 800495a:	d905      	bls.n	8004968 <_malloc_r+0x28>
 800495c:	230c      	movs	r3, #12
 800495e:	2600      	movs	r6, #0
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	4630      	mov	r0, r6
 8004964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004968:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a3c <_malloc_r+0xfc>
 800496c:	f000 f868 	bl	8004a40 <__malloc_lock>
 8004970:	f8d8 3000 	ldr.w	r3, [r8]
 8004974:	461c      	mov	r4, r3
 8004976:	bb5c      	cbnz	r4, 80049d0 <_malloc_r+0x90>
 8004978:	4629      	mov	r1, r5
 800497a:	4638      	mov	r0, r7
 800497c:	f7ff ffc0 	bl	8004900 <sbrk_aligned>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	4604      	mov	r4, r0
 8004984:	d155      	bne.n	8004a32 <_malloc_r+0xf2>
 8004986:	f8d8 4000 	ldr.w	r4, [r8]
 800498a:	4626      	mov	r6, r4
 800498c:	2e00      	cmp	r6, #0
 800498e:	d145      	bne.n	8004a1c <_malloc_r+0xdc>
 8004990:	2c00      	cmp	r4, #0
 8004992:	d048      	beq.n	8004a26 <_malloc_r+0xe6>
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	4631      	mov	r1, r6
 8004998:	4638      	mov	r0, r7
 800499a:	eb04 0903 	add.w	r9, r4, r3
 800499e:	f000 fc7d 	bl	800529c <_sbrk_r>
 80049a2:	4581      	cmp	r9, r0
 80049a4:	d13f      	bne.n	8004a26 <_malloc_r+0xe6>
 80049a6:	6821      	ldr	r1, [r4, #0]
 80049a8:	4638      	mov	r0, r7
 80049aa:	1a6d      	subs	r5, r5, r1
 80049ac:	4629      	mov	r1, r5
 80049ae:	f7ff ffa7 	bl	8004900 <sbrk_aligned>
 80049b2:	3001      	adds	r0, #1
 80049b4:	d037      	beq.n	8004a26 <_malloc_r+0xe6>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	442b      	add	r3, r5
 80049ba:	6023      	str	r3, [r4, #0]
 80049bc:	f8d8 3000 	ldr.w	r3, [r8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d038      	beq.n	8004a36 <_malloc_r+0xf6>
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	42a2      	cmp	r2, r4
 80049c8:	d12b      	bne.n	8004a22 <_malloc_r+0xe2>
 80049ca:	2200      	movs	r2, #0
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	e00f      	b.n	80049f0 <_malloc_r+0xb0>
 80049d0:	6822      	ldr	r2, [r4, #0]
 80049d2:	1b52      	subs	r2, r2, r5
 80049d4:	d41f      	bmi.n	8004a16 <_malloc_r+0xd6>
 80049d6:	2a0b      	cmp	r2, #11
 80049d8:	d917      	bls.n	8004a0a <_malloc_r+0xca>
 80049da:	1961      	adds	r1, r4, r5
 80049dc:	42a3      	cmp	r3, r4
 80049de:	6025      	str	r5, [r4, #0]
 80049e0:	bf18      	it	ne
 80049e2:	6059      	strne	r1, [r3, #4]
 80049e4:	6863      	ldr	r3, [r4, #4]
 80049e6:	bf08      	it	eq
 80049e8:	f8c8 1000 	streq.w	r1, [r8]
 80049ec:	5162      	str	r2, [r4, r5]
 80049ee:	604b      	str	r3, [r1, #4]
 80049f0:	4638      	mov	r0, r7
 80049f2:	f104 060b 	add.w	r6, r4, #11
 80049f6:	f000 f829 	bl	8004a4c <__malloc_unlock>
 80049fa:	f026 0607 	bic.w	r6, r6, #7
 80049fe:	1d23      	adds	r3, r4, #4
 8004a00:	1af2      	subs	r2, r6, r3
 8004a02:	d0ae      	beq.n	8004962 <_malloc_r+0x22>
 8004a04:	1b9b      	subs	r3, r3, r6
 8004a06:	50a3      	str	r3, [r4, r2]
 8004a08:	e7ab      	b.n	8004962 <_malloc_r+0x22>
 8004a0a:	42a3      	cmp	r3, r4
 8004a0c:	6862      	ldr	r2, [r4, #4]
 8004a0e:	d1dd      	bne.n	80049cc <_malloc_r+0x8c>
 8004a10:	f8c8 2000 	str.w	r2, [r8]
 8004a14:	e7ec      	b.n	80049f0 <_malloc_r+0xb0>
 8004a16:	4623      	mov	r3, r4
 8004a18:	6864      	ldr	r4, [r4, #4]
 8004a1a:	e7ac      	b.n	8004976 <_malloc_r+0x36>
 8004a1c:	4634      	mov	r4, r6
 8004a1e:	6876      	ldr	r6, [r6, #4]
 8004a20:	e7b4      	b.n	800498c <_malloc_r+0x4c>
 8004a22:	4613      	mov	r3, r2
 8004a24:	e7cc      	b.n	80049c0 <_malloc_r+0x80>
 8004a26:	230c      	movs	r3, #12
 8004a28:	4638      	mov	r0, r7
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	f000 f80e 	bl	8004a4c <__malloc_unlock>
 8004a30:	e797      	b.n	8004962 <_malloc_r+0x22>
 8004a32:	6025      	str	r5, [r4, #0]
 8004a34:	e7dc      	b.n	80049f0 <_malloc_r+0xb0>
 8004a36:	605b      	str	r3, [r3, #4]
 8004a38:	deff      	udf	#255	; 0xff
 8004a3a:	bf00      	nop
 8004a3c:	20000388 	.word	0x20000388

08004a40 <__malloc_lock>:
 8004a40:	4801      	ldr	r0, [pc, #4]	; (8004a48 <__malloc_lock+0x8>)
 8004a42:	f7ff b88d 	b.w	8003b60 <__retarget_lock_acquire_recursive>
 8004a46:	bf00      	nop
 8004a48:	20000384 	.word	0x20000384

08004a4c <__malloc_unlock>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <__malloc_unlock+0x8>)
 8004a4e:	f7ff b888 	b.w	8003b62 <__retarget_lock_release_recursive>
 8004a52:	bf00      	nop
 8004a54:	20000384 	.word	0x20000384

08004a58 <_Balloc>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	69c6      	ldr	r6, [r0, #28]
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	460d      	mov	r5, r1
 8004a60:	b976      	cbnz	r6, 8004a80 <_Balloc+0x28>
 8004a62:	2010      	movs	r0, #16
 8004a64:	f7ff ff44 	bl	80048f0 <malloc>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	61e0      	str	r0, [r4, #28]
 8004a6c:	b920      	cbnz	r0, 8004a78 <_Balloc+0x20>
 8004a6e:	216b      	movs	r1, #107	; 0x6b
 8004a70:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <_Balloc+0x78>)
 8004a72:	4818      	ldr	r0, [pc, #96]	; (8004ad4 <_Balloc+0x7c>)
 8004a74:	f000 fc30 	bl	80052d8 <__assert_func>
 8004a78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a7c:	6006      	str	r6, [r0, #0]
 8004a7e:	60c6      	str	r6, [r0, #12]
 8004a80:	69e6      	ldr	r6, [r4, #28]
 8004a82:	68f3      	ldr	r3, [r6, #12]
 8004a84:	b183      	cbz	r3, 8004aa8 <_Balloc+0x50>
 8004a86:	69e3      	ldr	r3, [r4, #28]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a8e:	b9b8      	cbnz	r0, 8004ac0 <_Balloc+0x68>
 8004a90:	2101      	movs	r1, #1
 8004a92:	fa01 f605 	lsl.w	r6, r1, r5
 8004a96:	1d72      	adds	r2, r6, #5
 8004a98:	4620      	mov	r0, r4
 8004a9a:	0092      	lsls	r2, r2, #2
 8004a9c:	f000 fc3a 	bl	8005314 <_calloc_r>
 8004aa0:	b160      	cbz	r0, 8004abc <_Balloc+0x64>
 8004aa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004aa6:	e00e      	b.n	8004ac6 <_Balloc+0x6e>
 8004aa8:	2221      	movs	r2, #33	; 0x21
 8004aaa:	2104      	movs	r1, #4
 8004aac:	4620      	mov	r0, r4
 8004aae:	f000 fc31 	bl	8005314 <_calloc_r>
 8004ab2:	69e3      	ldr	r3, [r4, #28]
 8004ab4:	60f0      	str	r0, [r6, #12]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e4      	bne.n	8004a86 <_Balloc+0x2e>
 8004abc:	2000      	movs	r0, #0
 8004abe:	bd70      	pop	{r4, r5, r6, pc}
 8004ac0:	6802      	ldr	r2, [r0, #0]
 8004ac2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004acc:	e7f7      	b.n	8004abe <_Balloc+0x66>
 8004ace:	bf00      	nop
 8004ad0:	08005973 	.word	0x08005973
 8004ad4:	080059f3 	.word	0x080059f3

08004ad8 <_Bfree>:
 8004ad8:	b570      	push	{r4, r5, r6, lr}
 8004ada:	69c6      	ldr	r6, [r0, #28]
 8004adc:	4605      	mov	r5, r0
 8004ade:	460c      	mov	r4, r1
 8004ae0:	b976      	cbnz	r6, 8004b00 <_Bfree+0x28>
 8004ae2:	2010      	movs	r0, #16
 8004ae4:	f7ff ff04 	bl	80048f0 <malloc>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	61e8      	str	r0, [r5, #28]
 8004aec:	b920      	cbnz	r0, 8004af8 <_Bfree+0x20>
 8004aee:	218f      	movs	r1, #143	; 0x8f
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <_Bfree+0x3c>)
 8004af2:	4809      	ldr	r0, [pc, #36]	; (8004b18 <_Bfree+0x40>)
 8004af4:	f000 fbf0 	bl	80052d8 <__assert_func>
 8004af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004afc:	6006      	str	r6, [r0, #0]
 8004afe:	60c6      	str	r6, [r0, #12]
 8004b00:	b13c      	cbz	r4, 8004b12 <_Bfree+0x3a>
 8004b02:	69eb      	ldr	r3, [r5, #28]
 8004b04:	6862      	ldr	r2, [r4, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b0c:	6021      	str	r1, [r4, #0]
 8004b0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
 8004b14:	08005973 	.word	0x08005973
 8004b18:	080059f3 	.word	0x080059f3

08004b1c <__multadd>:
 8004b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b20:	4607      	mov	r7, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	461e      	mov	r6, r3
 8004b26:	2000      	movs	r0, #0
 8004b28:	690d      	ldr	r5, [r1, #16]
 8004b2a:	f101 0c14 	add.w	ip, r1, #20
 8004b2e:	f8dc 3000 	ldr.w	r3, [ip]
 8004b32:	3001      	adds	r0, #1
 8004b34:	b299      	uxth	r1, r3
 8004b36:	fb02 6101 	mla	r1, r2, r1, r6
 8004b3a:	0c1e      	lsrs	r6, r3, #16
 8004b3c:	0c0b      	lsrs	r3, r1, #16
 8004b3e:	fb02 3306 	mla	r3, r2, r6, r3
 8004b42:	b289      	uxth	r1, r1
 8004b44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b48:	4285      	cmp	r5, r0
 8004b4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b4e:	f84c 1b04 	str.w	r1, [ip], #4
 8004b52:	dcec      	bgt.n	8004b2e <__multadd+0x12>
 8004b54:	b30e      	cbz	r6, 8004b9a <__multadd+0x7e>
 8004b56:	68a3      	ldr	r3, [r4, #8]
 8004b58:	42ab      	cmp	r3, r5
 8004b5a:	dc19      	bgt.n	8004b90 <__multadd+0x74>
 8004b5c:	6861      	ldr	r1, [r4, #4]
 8004b5e:	4638      	mov	r0, r7
 8004b60:	3101      	adds	r1, #1
 8004b62:	f7ff ff79 	bl	8004a58 <_Balloc>
 8004b66:	4680      	mov	r8, r0
 8004b68:	b928      	cbnz	r0, 8004b76 <__multadd+0x5a>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	21ba      	movs	r1, #186	; 0xba
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <__multadd+0x84>)
 8004b70:	480c      	ldr	r0, [pc, #48]	; (8004ba4 <__multadd+0x88>)
 8004b72:	f000 fbb1 	bl	80052d8 <__assert_func>
 8004b76:	6922      	ldr	r2, [r4, #16]
 8004b78:	f104 010c 	add.w	r1, r4, #12
 8004b7c:	3202      	adds	r2, #2
 8004b7e:	0092      	lsls	r2, r2, #2
 8004b80:	300c      	adds	r0, #12
 8004b82:	f000 fb9b 	bl	80052bc <memcpy>
 8004b86:	4621      	mov	r1, r4
 8004b88:	4638      	mov	r0, r7
 8004b8a:	f7ff ffa5 	bl	8004ad8 <_Bfree>
 8004b8e:	4644      	mov	r4, r8
 8004b90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b94:	3501      	adds	r5, #1
 8004b96:	615e      	str	r6, [r3, #20]
 8004b98:	6125      	str	r5, [r4, #16]
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ba0:	080059e2 	.word	0x080059e2
 8004ba4:	080059f3 	.word	0x080059f3

08004ba8 <__hi0bits>:
 8004ba8:	0c02      	lsrs	r2, r0, #16
 8004baa:	0412      	lsls	r2, r2, #16
 8004bac:	4603      	mov	r3, r0
 8004bae:	b9ca      	cbnz	r2, 8004be4 <__hi0bits+0x3c>
 8004bb0:	0403      	lsls	r3, r0, #16
 8004bb2:	2010      	movs	r0, #16
 8004bb4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004bb8:	bf04      	itt	eq
 8004bba:	021b      	lsleq	r3, r3, #8
 8004bbc:	3008      	addeq	r0, #8
 8004bbe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004bc2:	bf04      	itt	eq
 8004bc4:	011b      	lsleq	r3, r3, #4
 8004bc6:	3004      	addeq	r0, #4
 8004bc8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004bcc:	bf04      	itt	eq
 8004bce:	009b      	lsleq	r3, r3, #2
 8004bd0:	3002      	addeq	r0, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	db05      	blt.n	8004be2 <__hi0bits+0x3a>
 8004bd6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004bda:	f100 0001 	add.w	r0, r0, #1
 8004bde:	bf08      	it	eq
 8004be0:	2020      	moveq	r0, #32
 8004be2:	4770      	bx	lr
 8004be4:	2000      	movs	r0, #0
 8004be6:	e7e5      	b.n	8004bb4 <__hi0bits+0xc>

08004be8 <__lo0bits>:
 8004be8:	6803      	ldr	r3, [r0, #0]
 8004bea:	4602      	mov	r2, r0
 8004bec:	f013 0007 	ands.w	r0, r3, #7
 8004bf0:	d00b      	beq.n	8004c0a <__lo0bits+0x22>
 8004bf2:	07d9      	lsls	r1, r3, #31
 8004bf4:	d421      	bmi.n	8004c3a <__lo0bits+0x52>
 8004bf6:	0798      	lsls	r0, r3, #30
 8004bf8:	bf49      	itett	mi
 8004bfa:	085b      	lsrmi	r3, r3, #1
 8004bfc:	089b      	lsrpl	r3, r3, #2
 8004bfe:	2001      	movmi	r0, #1
 8004c00:	6013      	strmi	r3, [r2, #0]
 8004c02:	bf5c      	itt	pl
 8004c04:	2002      	movpl	r0, #2
 8004c06:	6013      	strpl	r3, [r2, #0]
 8004c08:	4770      	bx	lr
 8004c0a:	b299      	uxth	r1, r3
 8004c0c:	b909      	cbnz	r1, 8004c12 <__lo0bits+0x2a>
 8004c0e:	2010      	movs	r0, #16
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	b2d9      	uxtb	r1, r3
 8004c14:	b909      	cbnz	r1, 8004c1a <__lo0bits+0x32>
 8004c16:	3008      	adds	r0, #8
 8004c18:	0a1b      	lsrs	r3, r3, #8
 8004c1a:	0719      	lsls	r1, r3, #28
 8004c1c:	bf04      	itt	eq
 8004c1e:	091b      	lsreq	r3, r3, #4
 8004c20:	3004      	addeq	r0, #4
 8004c22:	0799      	lsls	r1, r3, #30
 8004c24:	bf04      	itt	eq
 8004c26:	089b      	lsreq	r3, r3, #2
 8004c28:	3002      	addeq	r0, #2
 8004c2a:	07d9      	lsls	r1, r3, #31
 8004c2c:	d403      	bmi.n	8004c36 <__lo0bits+0x4e>
 8004c2e:	085b      	lsrs	r3, r3, #1
 8004c30:	f100 0001 	add.w	r0, r0, #1
 8004c34:	d003      	beq.n	8004c3e <__lo0bits+0x56>
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4770      	bx	lr
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	4770      	bx	lr
 8004c3e:	2020      	movs	r0, #32
 8004c40:	4770      	bx	lr
	...

08004c44 <__i2b>:
 8004c44:	b510      	push	{r4, lr}
 8004c46:	460c      	mov	r4, r1
 8004c48:	2101      	movs	r1, #1
 8004c4a:	f7ff ff05 	bl	8004a58 <_Balloc>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	b928      	cbnz	r0, 8004c5e <__i2b+0x1a>
 8004c52:	f240 1145 	movw	r1, #325	; 0x145
 8004c56:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <__i2b+0x24>)
 8004c58:	4804      	ldr	r0, [pc, #16]	; (8004c6c <__i2b+0x28>)
 8004c5a:	f000 fb3d 	bl	80052d8 <__assert_func>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	6144      	str	r4, [r0, #20]
 8004c62:	6103      	str	r3, [r0, #16]
 8004c64:	bd10      	pop	{r4, pc}
 8004c66:	bf00      	nop
 8004c68:	080059e2 	.word	0x080059e2
 8004c6c:	080059f3 	.word	0x080059f3

08004c70 <__multiply>:
 8004c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c74:	4691      	mov	r9, r2
 8004c76:	690a      	ldr	r2, [r1, #16]
 8004c78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	bfbe      	ittt	lt
 8004c82:	460b      	movlt	r3, r1
 8004c84:	464c      	movlt	r4, r9
 8004c86:	4699      	movlt	r9, r3
 8004c88:	6927      	ldr	r7, [r4, #16]
 8004c8a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004c8e:	68a3      	ldr	r3, [r4, #8]
 8004c90:	6861      	ldr	r1, [r4, #4]
 8004c92:	eb07 060a 	add.w	r6, r7, sl
 8004c96:	42b3      	cmp	r3, r6
 8004c98:	b085      	sub	sp, #20
 8004c9a:	bfb8      	it	lt
 8004c9c:	3101      	addlt	r1, #1
 8004c9e:	f7ff fedb 	bl	8004a58 <_Balloc>
 8004ca2:	b930      	cbnz	r0, 8004cb2 <__multiply+0x42>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004caa:	4b43      	ldr	r3, [pc, #268]	; (8004db8 <__multiply+0x148>)
 8004cac:	4843      	ldr	r0, [pc, #268]	; (8004dbc <__multiply+0x14c>)
 8004cae:	f000 fb13 	bl	80052d8 <__assert_func>
 8004cb2:	f100 0514 	add.w	r5, r0, #20
 8004cb6:	462b      	mov	r3, r5
 8004cb8:	2200      	movs	r2, #0
 8004cba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004cbe:	4543      	cmp	r3, r8
 8004cc0:	d321      	bcc.n	8004d06 <__multiply+0x96>
 8004cc2:	f104 0314 	add.w	r3, r4, #20
 8004cc6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004cca:	f109 0314 	add.w	r3, r9, #20
 8004cce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004cd2:	9202      	str	r2, [sp, #8]
 8004cd4:	1b3a      	subs	r2, r7, r4
 8004cd6:	3a15      	subs	r2, #21
 8004cd8:	f022 0203 	bic.w	r2, r2, #3
 8004cdc:	3204      	adds	r2, #4
 8004cde:	f104 0115 	add.w	r1, r4, #21
 8004ce2:	428f      	cmp	r7, r1
 8004ce4:	bf38      	it	cc
 8004ce6:	2204      	movcc	r2, #4
 8004ce8:	9201      	str	r2, [sp, #4]
 8004cea:	9a02      	ldr	r2, [sp, #8]
 8004cec:	9303      	str	r3, [sp, #12]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d80c      	bhi.n	8004d0c <__multiply+0x9c>
 8004cf2:	2e00      	cmp	r6, #0
 8004cf4:	dd03      	ble.n	8004cfe <__multiply+0x8e>
 8004cf6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d05a      	beq.n	8004db4 <__multiply+0x144>
 8004cfe:	6106      	str	r6, [r0, #16]
 8004d00:	b005      	add	sp, #20
 8004d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d06:	f843 2b04 	str.w	r2, [r3], #4
 8004d0a:	e7d8      	b.n	8004cbe <__multiply+0x4e>
 8004d0c:	f8b3 a000 	ldrh.w	sl, [r3]
 8004d10:	f1ba 0f00 	cmp.w	sl, #0
 8004d14:	d023      	beq.n	8004d5e <__multiply+0xee>
 8004d16:	46a9      	mov	r9, r5
 8004d18:	f04f 0c00 	mov.w	ip, #0
 8004d1c:	f104 0e14 	add.w	lr, r4, #20
 8004d20:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004d24:	f8d9 1000 	ldr.w	r1, [r9]
 8004d28:	fa1f fb82 	uxth.w	fp, r2
 8004d2c:	b289      	uxth	r1, r1
 8004d2e:	fb0a 110b 	mla	r1, sl, fp, r1
 8004d32:	4461      	add	r1, ip
 8004d34:	f8d9 c000 	ldr.w	ip, [r9]
 8004d38:	0c12      	lsrs	r2, r2, #16
 8004d3a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004d3e:	fb0a c202 	mla	r2, sl, r2, ip
 8004d42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004d46:	b289      	uxth	r1, r1
 8004d48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d4c:	4577      	cmp	r7, lr
 8004d4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d52:	f849 1b04 	str.w	r1, [r9], #4
 8004d56:	d8e3      	bhi.n	8004d20 <__multiply+0xb0>
 8004d58:	9a01      	ldr	r2, [sp, #4]
 8004d5a:	f845 c002 	str.w	ip, [r5, r2]
 8004d5e:	9a03      	ldr	r2, [sp, #12]
 8004d60:	3304      	adds	r3, #4
 8004d62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004d66:	f1b9 0f00 	cmp.w	r9, #0
 8004d6a:	d021      	beq.n	8004db0 <__multiply+0x140>
 8004d6c:	46ae      	mov	lr, r5
 8004d6e:	f04f 0a00 	mov.w	sl, #0
 8004d72:	6829      	ldr	r1, [r5, #0]
 8004d74:	f104 0c14 	add.w	ip, r4, #20
 8004d78:	f8bc b000 	ldrh.w	fp, [ip]
 8004d7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004d80:	b289      	uxth	r1, r1
 8004d82:	fb09 220b 	mla	r2, r9, fp, r2
 8004d86:	4452      	add	r2, sl
 8004d88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d8c:	f84e 1b04 	str.w	r1, [lr], #4
 8004d90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004d94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004d98:	f8be 1000 	ldrh.w	r1, [lr]
 8004d9c:	4567      	cmp	r7, ip
 8004d9e:	fb09 110a 	mla	r1, r9, sl, r1
 8004da2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004da6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004daa:	d8e5      	bhi.n	8004d78 <__multiply+0x108>
 8004dac:	9a01      	ldr	r2, [sp, #4]
 8004dae:	50a9      	str	r1, [r5, r2]
 8004db0:	3504      	adds	r5, #4
 8004db2:	e79a      	b.n	8004cea <__multiply+0x7a>
 8004db4:	3e01      	subs	r6, #1
 8004db6:	e79c      	b.n	8004cf2 <__multiply+0x82>
 8004db8:	080059e2 	.word	0x080059e2
 8004dbc:	080059f3 	.word	0x080059f3

08004dc0 <__pow5mult>:
 8004dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dc4:	4615      	mov	r5, r2
 8004dc6:	f012 0203 	ands.w	r2, r2, #3
 8004dca:	4606      	mov	r6, r0
 8004dcc:	460f      	mov	r7, r1
 8004dce:	d007      	beq.n	8004de0 <__pow5mult+0x20>
 8004dd0:	4c25      	ldr	r4, [pc, #148]	; (8004e68 <__pow5mult+0xa8>)
 8004dd2:	3a01      	subs	r2, #1
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004dda:	f7ff fe9f 	bl	8004b1c <__multadd>
 8004dde:	4607      	mov	r7, r0
 8004de0:	10ad      	asrs	r5, r5, #2
 8004de2:	d03d      	beq.n	8004e60 <__pow5mult+0xa0>
 8004de4:	69f4      	ldr	r4, [r6, #28]
 8004de6:	b97c      	cbnz	r4, 8004e08 <__pow5mult+0x48>
 8004de8:	2010      	movs	r0, #16
 8004dea:	f7ff fd81 	bl	80048f0 <malloc>
 8004dee:	4602      	mov	r2, r0
 8004df0:	61f0      	str	r0, [r6, #28]
 8004df2:	b928      	cbnz	r0, 8004e00 <__pow5mult+0x40>
 8004df4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004df8:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <__pow5mult+0xac>)
 8004dfa:	481d      	ldr	r0, [pc, #116]	; (8004e70 <__pow5mult+0xb0>)
 8004dfc:	f000 fa6c 	bl	80052d8 <__assert_func>
 8004e00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e04:	6004      	str	r4, [r0, #0]
 8004e06:	60c4      	str	r4, [r0, #12]
 8004e08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004e0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e10:	b94c      	cbnz	r4, 8004e26 <__pow5mult+0x66>
 8004e12:	f240 2171 	movw	r1, #625	; 0x271
 8004e16:	4630      	mov	r0, r6
 8004e18:	f7ff ff14 	bl	8004c44 <__i2b>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	4604      	mov	r4, r0
 8004e20:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e24:	6003      	str	r3, [r0, #0]
 8004e26:	f04f 0900 	mov.w	r9, #0
 8004e2a:	07eb      	lsls	r3, r5, #31
 8004e2c:	d50a      	bpl.n	8004e44 <__pow5mult+0x84>
 8004e2e:	4639      	mov	r1, r7
 8004e30:	4622      	mov	r2, r4
 8004e32:	4630      	mov	r0, r6
 8004e34:	f7ff ff1c 	bl	8004c70 <__multiply>
 8004e38:	4680      	mov	r8, r0
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	f7ff fe4b 	bl	8004ad8 <_Bfree>
 8004e42:	4647      	mov	r7, r8
 8004e44:	106d      	asrs	r5, r5, #1
 8004e46:	d00b      	beq.n	8004e60 <__pow5mult+0xa0>
 8004e48:	6820      	ldr	r0, [r4, #0]
 8004e4a:	b938      	cbnz	r0, 8004e5c <__pow5mult+0x9c>
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	4621      	mov	r1, r4
 8004e50:	4630      	mov	r0, r6
 8004e52:	f7ff ff0d 	bl	8004c70 <__multiply>
 8004e56:	6020      	str	r0, [r4, #0]
 8004e58:	f8c0 9000 	str.w	r9, [r0]
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	e7e4      	b.n	8004e2a <__pow5mult+0x6a>
 8004e60:	4638      	mov	r0, r7
 8004e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e66:	bf00      	nop
 8004e68:	08005b40 	.word	0x08005b40
 8004e6c:	08005973 	.word	0x08005973
 8004e70:	080059f3 	.word	0x080059f3

08004e74 <__lshift>:
 8004e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e78:	460c      	mov	r4, r1
 8004e7a:	4607      	mov	r7, r0
 8004e7c:	4691      	mov	r9, r2
 8004e7e:	6923      	ldr	r3, [r4, #16]
 8004e80:	6849      	ldr	r1, [r1, #4]
 8004e82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e86:	68a3      	ldr	r3, [r4, #8]
 8004e88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e8c:	f108 0601 	add.w	r6, r8, #1
 8004e90:	42b3      	cmp	r3, r6
 8004e92:	db0b      	blt.n	8004eac <__lshift+0x38>
 8004e94:	4638      	mov	r0, r7
 8004e96:	f7ff fddf 	bl	8004a58 <_Balloc>
 8004e9a:	4605      	mov	r5, r0
 8004e9c:	b948      	cbnz	r0, 8004eb2 <__lshift+0x3e>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004ea4:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <__lshift+0xd0>)
 8004ea6:	4828      	ldr	r0, [pc, #160]	; (8004f48 <__lshift+0xd4>)
 8004ea8:	f000 fa16 	bl	80052d8 <__assert_func>
 8004eac:	3101      	adds	r1, #1
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	e7ee      	b.n	8004e90 <__lshift+0x1c>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f100 0114 	add.w	r1, r0, #20
 8004eb8:	f100 0210 	add.w	r2, r0, #16
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	4553      	cmp	r3, sl
 8004ec0:	db33      	blt.n	8004f2a <__lshift+0xb6>
 8004ec2:	6920      	ldr	r0, [r4, #16]
 8004ec4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ec8:	f104 0314 	add.w	r3, r4, #20
 8004ecc:	f019 091f 	ands.w	r9, r9, #31
 8004ed0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ed4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ed8:	d02b      	beq.n	8004f32 <__lshift+0xbe>
 8004eda:	468a      	mov	sl, r1
 8004edc:	2200      	movs	r2, #0
 8004ede:	f1c9 0e20 	rsb	lr, r9, #32
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	fa00 f009 	lsl.w	r0, r0, r9
 8004ee8:	4310      	orrs	r0, r2
 8004eea:	f84a 0b04 	str.w	r0, [sl], #4
 8004eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ef2:	459c      	cmp	ip, r3
 8004ef4:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ef8:	d8f3      	bhi.n	8004ee2 <__lshift+0x6e>
 8004efa:	ebac 0304 	sub.w	r3, ip, r4
 8004efe:	3b15      	subs	r3, #21
 8004f00:	f023 0303 	bic.w	r3, r3, #3
 8004f04:	3304      	adds	r3, #4
 8004f06:	f104 0015 	add.w	r0, r4, #21
 8004f0a:	4584      	cmp	ip, r0
 8004f0c:	bf38      	it	cc
 8004f0e:	2304      	movcc	r3, #4
 8004f10:	50ca      	str	r2, [r1, r3]
 8004f12:	b10a      	cbz	r2, 8004f18 <__lshift+0xa4>
 8004f14:	f108 0602 	add.w	r6, r8, #2
 8004f18:	3e01      	subs	r6, #1
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	612e      	str	r6, [r5, #16]
 8004f20:	f7ff fdda 	bl	8004ad8 <_Bfree>
 8004f24:	4628      	mov	r0, r5
 8004f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f2e:	3301      	adds	r3, #1
 8004f30:	e7c5      	b.n	8004ebe <__lshift+0x4a>
 8004f32:	3904      	subs	r1, #4
 8004f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f38:	459c      	cmp	ip, r3
 8004f3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f3e:	d8f9      	bhi.n	8004f34 <__lshift+0xc0>
 8004f40:	e7ea      	b.n	8004f18 <__lshift+0xa4>
 8004f42:	bf00      	nop
 8004f44:	080059e2 	.word	0x080059e2
 8004f48:	080059f3 	.word	0x080059f3

08004f4c <__mcmp>:
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	690a      	ldr	r2, [r1, #16]
 8004f50:	6900      	ldr	r0, [r0, #16]
 8004f52:	b530      	push	{r4, r5, lr}
 8004f54:	1a80      	subs	r0, r0, r2
 8004f56:	d10d      	bne.n	8004f74 <__mcmp+0x28>
 8004f58:	3314      	adds	r3, #20
 8004f5a:	3114      	adds	r1, #20
 8004f5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f6c:	4295      	cmp	r5, r2
 8004f6e:	d002      	beq.n	8004f76 <__mcmp+0x2a>
 8004f70:	d304      	bcc.n	8004f7c <__mcmp+0x30>
 8004f72:	2001      	movs	r0, #1
 8004f74:	bd30      	pop	{r4, r5, pc}
 8004f76:	42a3      	cmp	r3, r4
 8004f78:	d3f4      	bcc.n	8004f64 <__mcmp+0x18>
 8004f7a:	e7fb      	b.n	8004f74 <__mcmp+0x28>
 8004f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f80:	e7f8      	b.n	8004f74 <__mcmp+0x28>
	...

08004f84 <__mdiff>:
 8004f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	460d      	mov	r5, r1
 8004f8a:	4607      	mov	r7, r0
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	4628      	mov	r0, r5
 8004f90:	4614      	mov	r4, r2
 8004f92:	f7ff ffdb 	bl	8004f4c <__mcmp>
 8004f96:	1e06      	subs	r6, r0, #0
 8004f98:	d111      	bne.n	8004fbe <__mdiff+0x3a>
 8004f9a:	4631      	mov	r1, r6
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	f7ff fd5b 	bl	8004a58 <_Balloc>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	b928      	cbnz	r0, 8004fb2 <__mdiff+0x2e>
 8004fa6:	f240 2137 	movw	r1, #567	; 0x237
 8004faa:	4b3a      	ldr	r3, [pc, #232]	; (8005094 <__mdiff+0x110>)
 8004fac:	483a      	ldr	r0, [pc, #232]	; (8005098 <__mdiff+0x114>)
 8004fae:	f000 f993 	bl	80052d8 <__assert_func>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004fb8:	4610      	mov	r0, r2
 8004fba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fbe:	bfa4      	itt	ge
 8004fc0:	4623      	movge	r3, r4
 8004fc2:	462c      	movge	r4, r5
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	6861      	ldr	r1, [r4, #4]
 8004fc8:	bfa6      	itte	ge
 8004fca:	461d      	movge	r5, r3
 8004fcc:	2600      	movge	r6, #0
 8004fce:	2601      	movlt	r6, #1
 8004fd0:	f7ff fd42 	bl	8004a58 <_Balloc>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	b918      	cbnz	r0, 8004fe0 <__mdiff+0x5c>
 8004fd8:	f240 2145 	movw	r1, #581	; 0x245
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <__mdiff+0x110>)
 8004fde:	e7e5      	b.n	8004fac <__mdiff+0x28>
 8004fe0:	f102 0814 	add.w	r8, r2, #20
 8004fe4:	46c2      	mov	sl, r8
 8004fe6:	f04f 0c00 	mov.w	ip, #0
 8004fea:	6927      	ldr	r7, [r4, #16]
 8004fec:	60c6      	str	r6, [r0, #12]
 8004fee:	692e      	ldr	r6, [r5, #16]
 8004ff0:	f104 0014 	add.w	r0, r4, #20
 8004ff4:	f105 0914 	add.w	r9, r5, #20
 8004ff8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004ffc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005000:	3410      	adds	r4, #16
 8005002:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005006:	f859 3b04 	ldr.w	r3, [r9], #4
 800500a:	fa1f f18b 	uxth.w	r1, fp
 800500e:	4461      	add	r1, ip
 8005010:	fa1f fc83 	uxth.w	ip, r3
 8005014:	0c1b      	lsrs	r3, r3, #16
 8005016:	eba1 010c 	sub.w	r1, r1, ip
 800501a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800501e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005022:	b289      	uxth	r1, r1
 8005024:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005028:	454e      	cmp	r6, r9
 800502a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800502e:	f84a 1b04 	str.w	r1, [sl], #4
 8005032:	d8e6      	bhi.n	8005002 <__mdiff+0x7e>
 8005034:	1b73      	subs	r3, r6, r5
 8005036:	3b15      	subs	r3, #21
 8005038:	f023 0303 	bic.w	r3, r3, #3
 800503c:	3515      	adds	r5, #21
 800503e:	3304      	adds	r3, #4
 8005040:	42ae      	cmp	r6, r5
 8005042:	bf38      	it	cc
 8005044:	2304      	movcc	r3, #4
 8005046:	4418      	add	r0, r3
 8005048:	4443      	add	r3, r8
 800504a:	461e      	mov	r6, r3
 800504c:	4605      	mov	r5, r0
 800504e:	4575      	cmp	r5, lr
 8005050:	d30e      	bcc.n	8005070 <__mdiff+0xec>
 8005052:	f10e 0103 	add.w	r1, lr, #3
 8005056:	1a09      	subs	r1, r1, r0
 8005058:	f021 0103 	bic.w	r1, r1, #3
 800505c:	3803      	subs	r0, #3
 800505e:	4586      	cmp	lr, r0
 8005060:	bf38      	it	cc
 8005062:	2100      	movcc	r1, #0
 8005064:	440b      	add	r3, r1
 8005066:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800506a:	b189      	cbz	r1, 8005090 <__mdiff+0x10c>
 800506c:	6117      	str	r7, [r2, #16]
 800506e:	e7a3      	b.n	8004fb8 <__mdiff+0x34>
 8005070:	f855 8b04 	ldr.w	r8, [r5], #4
 8005074:	fa1f f188 	uxth.w	r1, r8
 8005078:	4461      	add	r1, ip
 800507a:	140c      	asrs	r4, r1, #16
 800507c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005080:	b289      	uxth	r1, r1
 8005082:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005086:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800508a:	f846 1b04 	str.w	r1, [r6], #4
 800508e:	e7de      	b.n	800504e <__mdiff+0xca>
 8005090:	3f01      	subs	r7, #1
 8005092:	e7e8      	b.n	8005066 <__mdiff+0xe2>
 8005094:	080059e2 	.word	0x080059e2
 8005098:	080059f3 	.word	0x080059f3

0800509c <__d2b>:
 800509c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800509e:	2101      	movs	r1, #1
 80050a0:	4617      	mov	r7, r2
 80050a2:	461c      	mov	r4, r3
 80050a4:	9e08      	ldr	r6, [sp, #32]
 80050a6:	f7ff fcd7 	bl	8004a58 <_Balloc>
 80050aa:	4605      	mov	r5, r0
 80050ac:	b930      	cbnz	r0, 80050bc <__d2b+0x20>
 80050ae:	4602      	mov	r2, r0
 80050b0:	f240 310f 	movw	r1, #783	; 0x30f
 80050b4:	4b22      	ldr	r3, [pc, #136]	; (8005140 <__d2b+0xa4>)
 80050b6:	4823      	ldr	r0, [pc, #140]	; (8005144 <__d2b+0xa8>)
 80050b8:	f000 f90e 	bl	80052d8 <__assert_func>
 80050bc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80050c0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80050c4:	bb24      	cbnz	r4, 8005110 <__d2b+0x74>
 80050c6:	2f00      	cmp	r7, #0
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	d026      	beq.n	800511a <__d2b+0x7e>
 80050cc:	4668      	mov	r0, sp
 80050ce:	9700      	str	r7, [sp, #0]
 80050d0:	f7ff fd8a 	bl	8004be8 <__lo0bits>
 80050d4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80050d8:	b1e8      	cbz	r0, 8005116 <__d2b+0x7a>
 80050da:	f1c0 0320 	rsb	r3, r0, #32
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	430b      	orrs	r3, r1
 80050e4:	40c2      	lsrs	r2, r0
 80050e6:	616b      	str	r3, [r5, #20]
 80050e8:	9201      	str	r2, [sp, #4]
 80050ea:	9b01      	ldr	r3, [sp, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf14      	ite	ne
 80050f0:	2102      	movne	r1, #2
 80050f2:	2101      	moveq	r1, #1
 80050f4:	61ab      	str	r3, [r5, #24]
 80050f6:	6129      	str	r1, [r5, #16]
 80050f8:	b1bc      	cbz	r4, 800512a <__d2b+0x8e>
 80050fa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80050fe:	4404      	add	r4, r0
 8005100:	6034      	str	r4, [r6, #0]
 8005102:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005108:	6018      	str	r0, [r3, #0]
 800510a:	4628      	mov	r0, r5
 800510c:	b003      	add	sp, #12
 800510e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005114:	e7d7      	b.n	80050c6 <__d2b+0x2a>
 8005116:	6169      	str	r1, [r5, #20]
 8005118:	e7e7      	b.n	80050ea <__d2b+0x4e>
 800511a:	a801      	add	r0, sp, #4
 800511c:	f7ff fd64 	bl	8004be8 <__lo0bits>
 8005120:	9b01      	ldr	r3, [sp, #4]
 8005122:	2101      	movs	r1, #1
 8005124:	616b      	str	r3, [r5, #20]
 8005126:	3020      	adds	r0, #32
 8005128:	e7e5      	b.n	80050f6 <__d2b+0x5a>
 800512a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800512e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005132:	6030      	str	r0, [r6, #0]
 8005134:	6918      	ldr	r0, [r3, #16]
 8005136:	f7ff fd37 	bl	8004ba8 <__hi0bits>
 800513a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800513e:	e7e2      	b.n	8005106 <__d2b+0x6a>
 8005140:	080059e2 	.word	0x080059e2
 8005144:	080059f3 	.word	0x080059f3

08005148 <__sflush_r>:
 8005148:	898a      	ldrh	r2, [r1, #12]
 800514a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514c:	4605      	mov	r5, r0
 800514e:	0710      	lsls	r0, r2, #28
 8005150:	460c      	mov	r4, r1
 8005152:	d457      	bmi.n	8005204 <__sflush_r+0xbc>
 8005154:	684b      	ldr	r3, [r1, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	dc04      	bgt.n	8005164 <__sflush_r+0x1c>
 800515a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	dc01      	bgt.n	8005164 <__sflush_r+0x1c>
 8005160:	2000      	movs	r0, #0
 8005162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005166:	2e00      	cmp	r6, #0
 8005168:	d0fa      	beq.n	8005160 <__sflush_r+0x18>
 800516a:	2300      	movs	r3, #0
 800516c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005170:	682f      	ldr	r7, [r5, #0]
 8005172:	6a21      	ldr	r1, [r4, #32]
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	d032      	beq.n	80051de <__sflush_r+0x96>
 8005178:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	075a      	lsls	r2, r3, #29
 800517e:	d505      	bpl.n	800518c <__sflush_r+0x44>
 8005180:	6863      	ldr	r3, [r4, #4]
 8005182:	1ac0      	subs	r0, r0, r3
 8005184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005186:	b10b      	cbz	r3, 800518c <__sflush_r+0x44>
 8005188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800518a:	1ac0      	subs	r0, r0, r3
 800518c:	2300      	movs	r3, #0
 800518e:	4602      	mov	r2, r0
 8005190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005192:	4628      	mov	r0, r5
 8005194:	6a21      	ldr	r1, [r4, #32]
 8005196:	47b0      	blx	r6
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	d106      	bne.n	80051ac <__sflush_r+0x64>
 800519e:	6829      	ldr	r1, [r5, #0]
 80051a0:	291d      	cmp	r1, #29
 80051a2:	d82b      	bhi.n	80051fc <__sflush_r+0xb4>
 80051a4:	4a28      	ldr	r2, [pc, #160]	; (8005248 <__sflush_r+0x100>)
 80051a6:	410a      	asrs	r2, r1
 80051a8:	07d6      	lsls	r6, r2, #31
 80051aa:	d427      	bmi.n	80051fc <__sflush_r+0xb4>
 80051ac:	2200      	movs	r2, #0
 80051ae:	6062      	str	r2, [r4, #4]
 80051b0:	6922      	ldr	r2, [r4, #16]
 80051b2:	04d9      	lsls	r1, r3, #19
 80051b4:	6022      	str	r2, [r4, #0]
 80051b6:	d504      	bpl.n	80051c2 <__sflush_r+0x7a>
 80051b8:	1c42      	adds	r2, r0, #1
 80051ba:	d101      	bne.n	80051c0 <__sflush_r+0x78>
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	b903      	cbnz	r3, 80051c2 <__sflush_r+0x7a>
 80051c0:	6560      	str	r0, [r4, #84]	; 0x54
 80051c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051c4:	602f      	str	r7, [r5, #0]
 80051c6:	2900      	cmp	r1, #0
 80051c8:	d0ca      	beq.n	8005160 <__sflush_r+0x18>
 80051ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051ce:	4299      	cmp	r1, r3
 80051d0:	d002      	beq.n	80051d8 <__sflush_r+0x90>
 80051d2:	4628      	mov	r0, r5
 80051d4:	f7ff fb44 	bl	8004860 <_free_r>
 80051d8:	2000      	movs	r0, #0
 80051da:	6360      	str	r0, [r4, #52]	; 0x34
 80051dc:	e7c1      	b.n	8005162 <__sflush_r+0x1a>
 80051de:	2301      	movs	r3, #1
 80051e0:	4628      	mov	r0, r5
 80051e2:	47b0      	blx	r6
 80051e4:	1c41      	adds	r1, r0, #1
 80051e6:	d1c8      	bne.n	800517a <__sflush_r+0x32>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0c5      	beq.n	800517a <__sflush_r+0x32>
 80051ee:	2b1d      	cmp	r3, #29
 80051f0:	d001      	beq.n	80051f6 <__sflush_r+0xae>
 80051f2:	2b16      	cmp	r3, #22
 80051f4:	d101      	bne.n	80051fa <__sflush_r+0xb2>
 80051f6:	602f      	str	r7, [r5, #0]
 80051f8:	e7b2      	b.n	8005160 <__sflush_r+0x18>
 80051fa:	89a3      	ldrh	r3, [r4, #12]
 80051fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005200:	81a3      	strh	r3, [r4, #12]
 8005202:	e7ae      	b.n	8005162 <__sflush_r+0x1a>
 8005204:	690f      	ldr	r7, [r1, #16]
 8005206:	2f00      	cmp	r7, #0
 8005208:	d0aa      	beq.n	8005160 <__sflush_r+0x18>
 800520a:	0793      	lsls	r3, r2, #30
 800520c:	bf18      	it	ne
 800520e:	2300      	movne	r3, #0
 8005210:	680e      	ldr	r6, [r1, #0]
 8005212:	bf08      	it	eq
 8005214:	694b      	ldreq	r3, [r1, #20]
 8005216:	1bf6      	subs	r6, r6, r7
 8005218:	600f      	str	r7, [r1, #0]
 800521a:	608b      	str	r3, [r1, #8]
 800521c:	2e00      	cmp	r6, #0
 800521e:	dd9f      	ble.n	8005160 <__sflush_r+0x18>
 8005220:	4633      	mov	r3, r6
 8005222:	463a      	mov	r2, r7
 8005224:	4628      	mov	r0, r5
 8005226:	6a21      	ldr	r1, [r4, #32]
 8005228:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800522c:	47e0      	blx	ip
 800522e:	2800      	cmp	r0, #0
 8005230:	dc06      	bgt.n	8005240 <__sflush_r+0xf8>
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	f04f 30ff 	mov.w	r0, #4294967295
 8005238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800523c:	81a3      	strh	r3, [r4, #12]
 800523e:	e790      	b.n	8005162 <__sflush_r+0x1a>
 8005240:	4407      	add	r7, r0
 8005242:	1a36      	subs	r6, r6, r0
 8005244:	e7ea      	b.n	800521c <__sflush_r+0xd4>
 8005246:	bf00      	nop
 8005248:	dfbffffe 	.word	0xdfbffffe

0800524c <_fflush_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	690b      	ldr	r3, [r1, #16]
 8005250:	4605      	mov	r5, r0
 8005252:	460c      	mov	r4, r1
 8005254:	b913      	cbnz	r3, 800525c <_fflush_r+0x10>
 8005256:	2500      	movs	r5, #0
 8005258:	4628      	mov	r0, r5
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	b118      	cbz	r0, 8005266 <_fflush_r+0x1a>
 800525e:	6a03      	ldr	r3, [r0, #32]
 8005260:	b90b      	cbnz	r3, 8005266 <_fflush_r+0x1a>
 8005262:	f7fe fb87 	bl	8003974 <__sinit>
 8005266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f3      	beq.n	8005256 <_fflush_r+0xa>
 800526e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005270:	07d0      	lsls	r0, r2, #31
 8005272:	d404      	bmi.n	800527e <_fflush_r+0x32>
 8005274:	0599      	lsls	r1, r3, #22
 8005276:	d402      	bmi.n	800527e <_fflush_r+0x32>
 8005278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800527a:	f7fe fc71 	bl	8003b60 <__retarget_lock_acquire_recursive>
 800527e:	4628      	mov	r0, r5
 8005280:	4621      	mov	r1, r4
 8005282:	f7ff ff61 	bl	8005148 <__sflush_r>
 8005286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005288:	4605      	mov	r5, r0
 800528a:	07da      	lsls	r2, r3, #31
 800528c:	d4e4      	bmi.n	8005258 <_fflush_r+0xc>
 800528e:	89a3      	ldrh	r3, [r4, #12]
 8005290:	059b      	lsls	r3, r3, #22
 8005292:	d4e1      	bmi.n	8005258 <_fflush_r+0xc>
 8005294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005296:	f7fe fc64 	bl	8003b62 <__retarget_lock_release_recursive>
 800529a:	e7dd      	b.n	8005258 <_fflush_r+0xc>

0800529c <_sbrk_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	2300      	movs	r3, #0
 80052a0:	4d05      	ldr	r5, [pc, #20]	; (80052b8 <_sbrk_r+0x1c>)
 80052a2:	4604      	mov	r4, r0
 80052a4:	4608      	mov	r0, r1
 80052a6:	602b      	str	r3, [r5, #0]
 80052a8:	f7fb fe64 	bl	8000f74 <_sbrk>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	d102      	bne.n	80052b6 <_sbrk_r+0x1a>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	b103      	cbz	r3, 80052b6 <_sbrk_r+0x1a>
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	20000380 	.word	0x20000380

080052bc <memcpy>:
 80052bc:	440a      	add	r2, r1
 80052be:	4291      	cmp	r1, r2
 80052c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80052c4:	d100      	bne.n	80052c8 <memcpy+0xc>
 80052c6:	4770      	bx	lr
 80052c8:	b510      	push	{r4, lr}
 80052ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ce:	4291      	cmp	r1, r2
 80052d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052d4:	d1f9      	bne.n	80052ca <memcpy+0xe>
 80052d6:	bd10      	pop	{r4, pc}

080052d8 <__assert_func>:
 80052d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052da:	4614      	mov	r4, r2
 80052dc:	461a      	mov	r2, r3
 80052de:	4b09      	ldr	r3, [pc, #36]	; (8005304 <__assert_func+0x2c>)
 80052e0:	4605      	mov	r5, r0
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68d8      	ldr	r0, [r3, #12]
 80052e6:	b14c      	cbz	r4, 80052fc <__assert_func+0x24>
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <__assert_func+0x30>)
 80052ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052ee:	9100      	str	r1, [sp, #0]
 80052f0:	462b      	mov	r3, r5
 80052f2:	4906      	ldr	r1, [pc, #24]	; (800530c <__assert_func+0x34>)
 80052f4:	f000 f842 	bl	800537c <fiprintf>
 80052f8:	f000 f852 	bl	80053a0 <abort>
 80052fc:	4b04      	ldr	r3, [pc, #16]	; (8005310 <__assert_func+0x38>)
 80052fe:	461c      	mov	r4, r3
 8005300:	e7f3      	b.n	80052ea <__assert_func+0x12>
 8005302:	bf00      	nop
 8005304:	20000064 	.word	0x20000064
 8005308:	08005b56 	.word	0x08005b56
 800530c:	08005b63 	.word	0x08005b63
 8005310:	08005b91 	.word	0x08005b91

08005314 <_calloc_r>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	fba1 5402 	umull	r5, r4, r1, r2
 800531a:	b934      	cbnz	r4, 800532a <_calloc_r+0x16>
 800531c:	4629      	mov	r1, r5
 800531e:	f7ff fb0f 	bl	8004940 <_malloc_r>
 8005322:	4606      	mov	r6, r0
 8005324:	b928      	cbnz	r0, 8005332 <_calloc_r+0x1e>
 8005326:	4630      	mov	r0, r6
 8005328:	bd70      	pop	{r4, r5, r6, pc}
 800532a:	220c      	movs	r2, #12
 800532c:	2600      	movs	r6, #0
 800532e:	6002      	str	r2, [r0, #0]
 8005330:	e7f9      	b.n	8005326 <_calloc_r+0x12>
 8005332:	462a      	mov	r2, r5
 8005334:	4621      	mov	r1, r4
 8005336:	f7fe fb96 	bl	8003a66 <memset>
 800533a:	e7f4      	b.n	8005326 <_calloc_r+0x12>

0800533c <__ascii_mbtowc>:
 800533c:	b082      	sub	sp, #8
 800533e:	b901      	cbnz	r1, 8005342 <__ascii_mbtowc+0x6>
 8005340:	a901      	add	r1, sp, #4
 8005342:	b142      	cbz	r2, 8005356 <__ascii_mbtowc+0x1a>
 8005344:	b14b      	cbz	r3, 800535a <__ascii_mbtowc+0x1e>
 8005346:	7813      	ldrb	r3, [r2, #0]
 8005348:	600b      	str	r3, [r1, #0]
 800534a:	7812      	ldrb	r2, [r2, #0]
 800534c:	1e10      	subs	r0, r2, #0
 800534e:	bf18      	it	ne
 8005350:	2001      	movne	r0, #1
 8005352:	b002      	add	sp, #8
 8005354:	4770      	bx	lr
 8005356:	4610      	mov	r0, r2
 8005358:	e7fb      	b.n	8005352 <__ascii_mbtowc+0x16>
 800535a:	f06f 0001 	mvn.w	r0, #1
 800535e:	e7f8      	b.n	8005352 <__ascii_mbtowc+0x16>

08005360 <__ascii_wctomb>:
 8005360:	4603      	mov	r3, r0
 8005362:	4608      	mov	r0, r1
 8005364:	b141      	cbz	r1, 8005378 <__ascii_wctomb+0x18>
 8005366:	2aff      	cmp	r2, #255	; 0xff
 8005368:	d904      	bls.n	8005374 <__ascii_wctomb+0x14>
 800536a:	228a      	movs	r2, #138	; 0x8a
 800536c:	f04f 30ff 	mov.w	r0, #4294967295
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	4770      	bx	lr
 8005374:	2001      	movs	r0, #1
 8005376:	700a      	strb	r2, [r1, #0]
 8005378:	4770      	bx	lr
	...

0800537c <fiprintf>:
 800537c:	b40e      	push	{r1, r2, r3}
 800537e:	b503      	push	{r0, r1, lr}
 8005380:	4601      	mov	r1, r0
 8005382:	ab03      	add	r3, sp, #12
 8005384:	4805      	ldr	r0, [pc, #20]	; (800539c <fiprintf+0x20>)
 8005386:	f853 2b04 	ldr.w	r2, [r3], #4
 800538a:	6800      	ldr	r0, [r0, #0]
 800538c:	9301      	str	r3, [sp, #4]
 800538e:	f000 f835 	bl	80053fc <_vfiprintf_r>
 8005392:	b002      	add	sp, #8
 8005394:	f85d eb04 	ldr.w	lr, [sp], #4
 8005398:	b003      	add	sp, #12
 800539a:	4770      	bx	lr
 800539c:	20000064 	.word	0x20000064

080053a0 <abort>:
 80053a0:	2006      	movs	r0, #6
 80053a2:	b508      	push	{r3, lr}
 80053a4:	f000 fa02 	bl	80057ac <raise>
 80053a8:	2001      	movs	r0, #1
 80053aa:	f7fb fd70 	bl	8000e8e <_exit>

080053ae <__sfputc_r>:
 80053ae:	6893      	ldr	r3, [r2, #8]
 80053b0:	b410      	push	{r4}
 80053b2:	3b01      	subs	r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	6093      	str	r3, [r2, #8]
 80053b8:	da07      	bge.n	80053ca <__sfputc_r+0x1c>
 80053ba:	6994      	ldr	r4, [r2, #24]
 80053bc:	42a3      	cmp	r3, r4
 80053be:	db01      	blt.n	80053c4 <__sfputc_r+0x16>
 80053c0:	290a      	cmp	r1, #10
 80053c2:	d102      	bne.n	80053ca <__sfputc_r+0x1c>
 80053c4:	bc10      	pop	{r4}
 80053c6:	f000 b933 	b.w	8005630 <__swbuf_r>
 80053ca:	6813      	ldr	r3, [r2, #0]
 80053cc:	1c58      	adds	r0, r3, #1
 80053ce:	6010      	str	r0, [r2, #0]
 80053d0:	7019      	strb	r1, [r3, #0]
 80053d2:	4608      	mov	r0, r1
 80053d4:	bc10      	pop	{r4}
 80053d6:	4770      	bx	lr

080053d8 <__sfputs_r>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	4606      	mov	r6, r0
 80053dc:	460f      	mov	r7, r1
 80053de:	4614      	mov	r4, r2
 80053e0:	18d5      	adds	r5, r2, r3
 80053e2:	42ac      	cmp	r4, r5
 80053e4:	d101      	bne.n	80053ea <__sfputs_r+0x12>
 80053e6:	2000      	movs	r0, #0
 80053e8:	e007      	b.n	80053fa <__sfputs_r+0x22>
 80053ea:	463a      	mov	r2, r7
 80053ec:	4630      	mov	r0, r6
 80053ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f2:	f7ff ffdc 	bl	80053ae <__sfputc_r>
 80053f6:	1c43      	adds	r3, r0, #1
 80053f8:	d1f3      	bne.n	80053e2 <__sfputs_r+0xa>
 80053fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080053fc <_vfiprintf_r>:
 80053fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005400:	460d      	mov	r5, r1
 8005402:	4614      	mov	r4, r2
 8005404:	4698      	mov	r8, r3
 8005406:	4606      	mov	r6, r0
 8005408:	b09d      	sub	sp, #116	; 0x74
 800540a:	b118      	cbz	r0, 8005414 <_vfiprintf_r+0x18>
 800540c:	6a03      	ldr	r3, [r0, #32]
 800540e:	b90b      	cbnz	r3, 8005414 <_vfiprintf_r+0x18>
 8005410:	f7fe fab0 	bl	8003974 <__sinit>
 8005414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005416:	07d9      	lsls	r1, r3, #31
 8005418:	d405      	bmi.n	8005426 <_vfiprintf_r+0x2a>
 800541a:	89ab      	ldrh	r3, [r5, #12]
 800541c:	059a      	lsls	r2, r3, #22
 800541e:	d402      	bmi.n	8005426 <_vfiprintf_r+0x2a>
 8005420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005422:	f7fe fb9d 	bl	8003b60 <__retarget_lock_acquire_recursive>
 8005426:	89ab      	ldrh	r3, [r5, #12]
 8005428:	071b      	lsls	r3, r3, #28
 800542a:	d501      	bpl.n	8005430 <_vfiprintf_r+0x34>
 800542c:	692b      	ldr	r3, [r5, #16]
 800542e:	b99b      	cbnz	r3, 8005458 <_vfiprintf_r+0x5c>
 8005430:	4629      	mov	r1, r5
 8005432:	4630      	mov	r0, r6
 8005434:	f000 f93a 	bl	80056ac <__swsetup_r>
 8005438:	b170      	cbz	r0, 8005458 <_vfiprintf_r+0x5c>
 800543a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800543c:	07dc      	lsls	r4, r3, #31
 800543e:	d504      	bpl.n	800544a <_vfiprintf_r+0x4e>
 8005440:	f04f 30ff 	mov.w	r0, #4294967295
 8005444:	b01d      	add	sp, #116	; 0x74
 8005446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544a:	89ab      	ldrh	r3, [r5, #12]
 800544c:	0598      	lsls	r0, r3, #22
 800544e:	d4f7      	bmi.n	8005440 <_vfiprintf_r+0x44>
 8005450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005452:	f7fe fb86 	bl	8003b62 <__retarget_lock_release_recursive>
 8005456:	e7f3      	b.n	8005440 <_vfiprintf_r+0x44>
 8005458:	2300      	movs	r3, #0
 800545a:	9309      	str	r3, [sp, #36]	; 0x24
 800545c:	2320      	movs	r3, #32
 800545e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005462:	2330      	movs	r3, #48	; 0x30
 8005464:	f04f 0901 	mov.w	r9, #1
 8005468:	f8cd 800c 	str.w	r8, [sp, #12]
 800546c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800561c <_vfiprintf_r+0x220>
 8005470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005474:	4623      	mov	r3, r4
 8005476:	469a      	mov	sl, r3
 8005478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800547c:	b10a      	cbz	r2, 8005482 <_vfiprintf_r+0x86>
 800547e:	2a25      	cmp	r2, #37	; 0x25
 8005480:	d1f9      	bne.n	8005476 <_vfiprintf_r+0x7a>
 8005482:	ebba 0b04 	subs.w	fp, sl, r4
 8005486:	d00b      	beq.n	80054a0 <_vfiprintf_r+0xa4>
 8005488:	465b      	mov	r3, fp
 800548a:	4622      	mov	r2, r4
 800548c:	4629      	mov	r1, r5
 800548e:	4630      	mov	r0, r6
 8005490:	f7ff ffa2 	bl	80053d8 <__sfputs_r>
 8005494:	3001      	adds	r0, #1
 8005496:	f000 80a9 	beq.w	80055ec <_vfiprintf_r+0x1f0>
 800549a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800549c:	445a      	add	r2, fp
 800549e:	9209      	str	r2, [sp, #36]	; 0x24
 80054a0:	f89a 3000 	ldrb.w	r3, [sl]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 80a1 	beq.w	80055ec <_vfiprintf_r+0x1f0>
 80054aa:	2300      	movs	r3, #0
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295
 80054b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054b4:	f10a 0a01 	add.w	sl, sl, #1
 80054b8:	9304      	str	r3, [sp, #16]
 80054ba:	9307      	str	r3, [sp, #28]
 80054bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054c0:	931a      	str	r3, [sp, #104]	; 0x68
 80054c2:	4654      	mov	r4, sl
 80054c4:	2205      	movs	r2, #5
 80054c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ca:	4854      	ldr	r0, [pc, #336]	; (800561c <_vfiprintf_r+0x220>)
 80054cc:	f7fe fb4a 	bl	8003b64 <memchr>
 80054d0:	9a04      	ldr	r2, [sp, #16]
 80054d2:	b9d8      	cbnz	r0, 800550c <_vfiprintf_r+0x110>
 80054d4:	06d1      	lsls	r1, r2, #27
 80054d6:	bf44      	itt	mi
 80054d8:	2320      	movmi	r3, #32
 80054da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054de:	0713      	lsls	r3, r2, #28
 80054e0:	bf44      	itt	mi
 80054e2:	232b      	movmi	r3, #43	; 0x2b
 80054e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054e8:	f89a 3000 	ldrb.w	r3, [sl]
 80054ec:	2b2a      	cmp	r3, #42	; 0x2a
 80054ee:	d015      	beq.n	800551c <_vfiprintf_r+0x120>
 80054f0:	4654      	mov	r4, sl
 80054f2:	2000      	movs	r0, #0
 80054f4:	f04f 0c0a 	mov.w	ip, #10
 80054f8:	9a07      	ldr	r2, [sp, #28]
 80054fa:	4621      	mov	r1, r4
 80054fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005500:	3b30      	subs	r3, #48	; 0x30
 8005502:	2b09      	cmp	r3, #9
 8005504:	d94d      	bls.n	80055a2 <_vfiprintf_r+0x1a6>
 8005506:	b1b0      	cbz	r0, 8005536 <_vfiprintf_r+0x13a>
 8005508:	9207      	str	r2, [sp, #28]
 800550a:	e014      	b.n	8005536 <_vfiprintf_r+0x13a>
 800550c:	eba0 0308 	sub.w	r3, r0, r8
 8005510:	fa09 f303 	lsl.w	r3, r9, r3
 8005514:	4313      	orrs	r3, r2
 8005516:	46a2      	mov	sl, r4
 8005518:	9304      	str	r3, [sp, #16]
 800551a:	e7d2      	b.n	80054c2 <_vfiprintf_r+0xc6>
 800551c:	9b03      	ldr	r3, [sp, #12]
 800551e:	1d19      	adds	r1, r3, #4
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	9103      	str	r1, [sp, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	bfbb      	ittet	lt
 8005528:	425b      	neglt	r3, r3
 800552a:	f042 0202 	orrlt.w	r2, r2, #2
 800552e:	9307      	strge	r3, [sp, #28]
 8005530:	9307      	strlt	r3, [sp, #28]
 8005532:	bfb8      	it	lt
 8005534:	9204      	strlt	r2, [sp, #16]
 8005536:	7823      	ldrb	r3, [r4, #0]
 8005538:	2b2e      	cmp	r3, #46	; 0x2e
 800553a:	d10c      	bne.n	8005556 <_vfiprintf_r+0x15a>
 800553c:	7863      	ldrb	r3, [r4, #1]
 800553e:	2b2a      	cmp	r3, #42	; 0x2a
 8005540:	d134      	bne.n	80055ac <_vfiprintf_r+0x1b0>
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	3402      	adds	r4, #2
 8005546:	1d1a      	adds	r2, r3, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	9203      	str	r2, [sp, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	bfb8      	it	lt
 8005550:	f04f 33ff 	movlt.w	r3, #4294967295
 8005554:	9305      	str	r3, [sp, #20]
 8005556:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005620 <_vfiprintf_r+0x224>
 800555a:	2203      	movs	r2, #3
 800555c:	4650      	mov	r0, sl
 800555e:	7821      	ldrb	r1, [r4, #0]
 8005560:	f7fe fb00 	bl	8003b64 <memchr>
 8005564:	b138      	cbz	r0, 8005576 <_vfiprintf_r+0x17a>
 8005566:	2240      	movs	r2, #64	; 0x40
 8005568:	9b04      	ldr	r3, [sp, #16]
 800556a:	eba0 000a 	sub.w	r0, r0, sl
 800556e:	4082      	lsls	r2, r0
 8005570:	4313      	orrs	r3, r2
 8005572:	3401      	adds	r4, #1
 8005574:	9304      	str	r3, [sp, #16]
 8005576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800557a:	2206      	movs	r2, #6
 800557c:	4829      	ldr	r0, [pc, #164]	; (8005624 <_vfiprintf_r+0x228>)
 800557e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005582:	f7fe faef 	bl	8003b64 <memchr>
 8005586:	2800      	cmp	r0, #0
 8005588:	d03f      	beq.n	800560a <_vfiprintf_r+0x20e>
 800558a:	4b27      	ldr	r3, [pc, #156]	; (8005628 <_vfiprintf_r+0x22c>)
 800558c:	bb1b      	cbnz	r3, 80055d6 <_vfiprintf_r+0x1da>
 800558e:	9b03      	ldr	r3, [sp, #12]
 8005590:	3307      	adds	r3, #7
 8005592:	f023 0307 	bic.w	r3, r3, #7
 8005596:	3308      	adds	r3, #8
 8005598:	9303      	str	r3, [sp, #12]
 800559a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800559c:	443b      	add	r3, r7
 800559e:	9309      	str	r3, [sp, #36]	; 0x24
 80055a0:	e768      	b.n	8005474 <_vfiprintf_r+0x78>
 80055a2:	460c      	mov	r4, r1
 80055a4:	2001      	movs	r0, #1
 80055a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80055aa:	e7a6      	b.n	80054fa <_vfiprintf_r+0xfe>
 80055ac:	2300      	movs	r3, #0
 80055ae:	f04f 0c0a 	mov.w	ip, #10
 80055b2:	4619      	mov	r1, r3
 80055b4:	3401      	adds	r4, #1
 80055b6:	9305      	str	r3, [sp, #20]
 80055b8:	4620      	mov	r0, r4
 80055ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055be:	3a30      	subs	r2, #48	; 0x30
 80055c0:	2a09      	cmp	r2, #9
 80055c2:	d903      	bls.n	80055cc <_vfiprintf_r+0x1d0>
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0c6      	beq.n	8005556 <_vfiprintf_r+0x15a>
 80055c8:	9105      	str	r1, [sp, #20]
 80055ca:	e7c4      	b.n	8005556 <_vfiprintf_r+0x15a>
 80055cc:	4604      	mov	r4, r0
 80055ce:	2301      	movs	r3, #1
 80055d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80055d4:	e7f0      	b.n	80055b8 <_vfiprintf_r+0x1bc>
 80055d6:	ab03      	add	r3, sp, #12
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	462a      	mov	r2, r5
 80055dc:	4630      	mov	r0, r6
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <_vfiprintf_r+0x230>)
 80055e0:	a904      	add	r1, sp, #16
 80055e2:	f7fd fd8b 	bl	80030fc <_printf_float>
 80055e6:	4607      	mov	r7, r0
 80055e8:	1c78      	adds	r0, r7, #1
 80055ea:	d1d6      	bne.n	800559a <_vfiprintf_r+0x19e>
 80055ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055ee:	07d9      	lsls	r1, r3, #31
 80055f0:	d405      	bmi.n	80055fe <_vfiprintf_r+0x202>
 80055f2:	89ab      	ldrh	r3, [r5, #12]
 80055f4:	059a      	lsls	r2, r3, #22
 80055f6:	d402      	bmi.n	80055fe <_vfiprintf_r+0x202>
 80055f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055fa:	f7fe fab2 	bl	8003b62 <__retarget_lock_release_recursive>
 80055fe:	89ab      	ldrh	r3, [r5, #12]
 8005600:	065b      	lsls	r3, r3, #25
 8005602:	f53f af1d 	bmi.w	8005440 <_vfiprintf_r+0x44>
 8005606:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005608:	e71c      	b.n	8005444 <_vfiprintf_r+0x48>
 800560a:	ab03      	add	r3, sp, #12
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	462a      	mov	r2, r5
 8005610:	4630      	mov	r0, r6
 8005612:	4b06      	ldr	r3, [pc, #24]	; (800562c <_vfiprintf_r+0x230>)
 8005614:	a904      	add	r1, sp, #16
 8005616:	f7fe f811 	bl	800363c <_printf_i>
 800561a:	e7e4      	b.n	80055e6 <_vfiprintf_r+0x1ea>
 800561c:	08005c93 	.word	0x08005c93
 8005620:	08005c99 	.word	0x08005c99
 8005624:	08005c9d 	.word	0x08005c9d
 8005628:	080030fd 	.word	0x080030fd
 800562c:	080053d9 	.word	0x080053d9

08005630 <__swbuf_r>:
 8005630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005632:	460e      	mov	r6, r1
 8005634:	4614      	mov	r4, r2
 8005636:	4605      	mov	r5, r0
 8005638:	b118      	cbz	r0, 8005642 <__swbuf_r+0x12>
 800563a:	6a03      	ldr	r3, [r0, #32]
 800563c:	b90b      	cbnz	r3, 8005642 <__swbuf_r+0x12>
 800563e:	f7fe f999 	bl	8003974 <__sinit>
 8005642:	69a3      	ldr	r3, [r4, #24]
 8005644:	60a3      	str	r3, [r4, #8]
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	071a      	lsls	r2, r3, #28
 800564a:	d525      	bpl.n	8005698 <__swbuf_r+0x68>
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	b31b      	cbz	r3, 8005698 <__swbuf_r+0x68>
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	6922      	ldr	r2, [r4, #16]
 8005654:	b2f6      	uxtb	r6, r6
 8005656:	1a98      	subs	r0, r3, r2
 8005658:	6963      	ldr	r3, [r4, #20]
 800565a:	4637      	mov	r7, r6
 800565c:	4283      	cmp	r3, r0
 800565e:	dc04      	bgt.n	800566a <__swbuf_r+0x3a>
 8005660:	4621      	mov	r1, r4
 8005662:	4628      	mov	r0, r5
 8005664:	f7ff fdf2 	bl	800524c <_fflush_r>
 8005668:	b9e0      	cbnz	r0, 80056a4 <__swbuf_r+0x74>
 800566a:	68a3      	ldr	r3, [r4, #8]
 800566c:	3b01      	subs	r3, #1
 800566e:	60a3      	str	r3, [r4, #8]
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	6022      	str	r2, [r4, #0]
 8005676:	701e      	strb	r6, [r3, #0]
 8005678:	6962      	ldr	r2, [r4, #20]
 800567a:	1c43      	adds	r3, r0, #1
 800567c:	429a      	cmp	r2, r3
 800567e:	d004      	beq.n	800568a <__swbuf_r+0x5a>
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	07db      	lsls	r3, r3, #31
 8005684:	d506      	bpl.n	8005694 <__swbuf_r+0x64>
 8005686:	2e0a      	cmp	r6, #10
 8005688:	d104      	bne.n	8005694 <__swbuf_r+0x64>
 800568a:	4621      	mov	r1, r4
 800568c:	4628      	mov	r0, r5
 800568e:	f7ff fddd 	bl	800524c <_fflush_r>
 8005692:	b938      	cbnz	r0, 80056a4 <__swbuf_r+0x74>
 8005694:	4638      	mov	r0, r7
 8005696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005698:	4621      	mov	r1, r4
 800569a:	4628      	mov	r0, r5
 800569c:	f000 f806 	bl	80056ac <__swsetup_r>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d0d5      	beq.n	8005650 <__swbuf_r+0x20>
 80056a4:	f04f 37ff 	mov.w	r7, #4294967295
 80056a8:	e7f4      	b.n	8005694 <__swbuf_r+0x64>
	...

080056ac <__swsetup_r>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	4b2a      	ldr	r3, [pc, #168]	; (8005758 <__swsetup_r+0xac>)
 80056b0:	4605      	mov	r5, r0
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	460c      	mov	r4, r1
 80056b6:	b118      	cbz	r0, 80056c0 <__swsetup_r+0x14>
 80056b8:	6a03      	ldr	r3, [r0, #32]
 80056ba:	b90b      	cbnz	r3, 80056c0 <__swsetup_r+0x14>
 80056bc:	f7fe f95a 	bl	8003974 <__sinit>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056c6:	0718      	lsls	r0, r3, #28
 80056c8:	d422      	bmi.n	8005710 <__swsetup_r+0x64>
 80056ca:	06d9      	lsls	r1, r3, #27
 80056cc:	d407      	bmi.n	80056de <__swsetup_r+0x32>
 80056ce:	2309      	movs	r3, #9
 80056d0:	602b      	str	r3, [r5, #0]
 80056d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056d6:	f04f 30ff 	mov.w	r0, #4294967295
 80056da:	81a3      	strh	r3, [r4, #12]
 80056dc:	e034      	b.n	8005748 <__swsetup_r+0x9c>
 80056de:	0758      	lsls	r0, r3, #29
 80056e0:	d512      	bpl.n	8005708 <__swsetup_r+0x5c>
 80056e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056e4:	b141      	cbz	r1, 80056f8 <__swsetup_r+0x4c>
 80056e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056ea:	4299      	cmp	r1, r3
 80056ec:	d002      	beq.n	80056f4 <__swsetup_r+0x48>
 80056ee:	4628      	mov	r0, r5
 80056f0:	f7ff f8b6 	bl	8004860 <_free_r>
 80056f4:	2300      	movs	r3, #0
 80056f6:	6363      	str	r3, [r4, #52]	; 0x34
 80056f8:	89a3      	ldrh	r3, [r4, #12]
 80056fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056fe:	81a3      	strh	r3, [r4, #12]
 8005700:	2300      	movs	r3, #0
 8005702:	6063      	str	r3, [r4, #4]
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	6023      	str	r3, [r4, #0]
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	f043 0308 	orr.w	r3, r3, #8
 800570e:	81a3      	strh	r3, [r4, #12]
 8005710:	6923      	ldr	r3, [r4, #16]
 8005712:	b94b      	cbnz	r3, 8005728 <__swsetup_r+0x7c>
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800571a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800571e:	d003      	beq.n	8005728 <__swsetup_r+0x7c>
 8005720:	4621      	mov	r1, r4
 8005722:	4628      	mov	r0, r5
 8005724:	f000 f883 	bl	800582e <__smakebuf_r>
 8005728:	89a0      	ldrh	r0, [r4, #12]
 800572a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800572e:	f010 0301 	ands.w	r3, r0, #1
 8005732:	d00a      	beq.n	800574a <__swsetup_r+0x9e>
 8005734:	2300      	movs	r3, #0
 8005736:	60a3      	str	r3, [r4, #8]
 8005738:	6963      	ldr	r3, [r4, #20]
 800573a:	425b      	negs	r3, r3
 800573c:	61a3      	str	r3, [r4, #24]
 800573e:	6923      	ldr	r3, [r4, #16]
 8005740:	b943      	cbnz	r3, 8005754 <__swsetup_r+0xa8>
 8005742:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005746:	d1c4      	bne.n	80056d2 <__swsetup_r+0x26>
 8005748:	bd38      	pop	{r3, r4, r5, pc}
 800574a:	0781      	lsls	r1, r0, #30
 800574c:	bf58      	it	pl
 800574e:	6963      	ldrpl	r3, [r4, #20]
 8005750:	60a3      	str	r3, [r4, #8]
 8005752:	e7f4      	b.n	800573e <__swsetup_r+0x92>
 8005754:	2000      	movs	r0, #0
 8005756:	e7f7      	b.n	8005748 <__swsetup_r+0x9c>
 8005758:	20000064 	.word	0x20000064

0800575c <_raise_r>:
 800575c:	291f      	cmp	r1, #31
 800575e:	b538      	push	{r3, r4, r5, lr}
 8005760:	4604      	mov	r4, r0
 8005762:	460d      	mov	r5, r1
 8005764:	d904      	bls.n	8005770 <_raise_r+0x14>
 8005766:	2316      	movs	r3, #22
 8005768:	6003      	str	r3, [r0, #0]
 800576a:	f04f 30ff 	mov.w	r0, #4294967295
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005772:	b112      	cbz	r2, 800577a <_raise_r+0x1e>
 8005774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005778:	b94b      	cbnz	r3, 800578e <_raise_r+0x32>
 800577a:	4620      	mov	r0, r4
 800577c:	f000 f830 	bl	80057e0 <_getpid_r>
 8005780:	462a      	mov	r2, r5
 8005782:	4601      	mov	r1, r0
 8005784:	4620      	mov	r0, r4
 8005786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800578a:	f000 b817 	b.w	80057bc <_kill_r>
 800578e:	2b01      	cmp	r3, #1
 8005790:	d00a      	beq.n	80057a8 <_raise_r+0x4c>
 8005792:	1c59      	adds	r1, r3, #1
 8005794:	d103      	bne.n	800579e <_raise_r+0x42>
 8005796:	2316      	movs	r3, #22
 8005798:	6003      	str	r3, [r0, #0]
 800579a:	2001      	movs	r0, #1
 800579c:	e7e7      	b.n	800576e <_raise_r+0x12>
 800579e:	2400      	movs	r4, #0
 80057a0:	4628      	mov	r0, r5
 80057a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057a6:	4798      	blx	r3
 80057a8:	2000      	movs	r0, #0
 80057aa:	e7e0      	b.n	800576e <_raise_r+0x12>

080057ac <raise>:
 80057ac:	4b02      	ldr	r3, [pc, #8]	; (80057b8 <raise+0xc>)
 80057ae:	4601      	mov	r1, r0
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	f7ff bfd3 	b.w	800575c <_raise_r>
 80057b6:	bf00      	nop
 80057b8:	20000064 	.word	0x20000064

080057bc <_kill_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	2300      	movs	r3, #0
 80057c0:	4d06      	ldr	r5, [pc, #24]	; (80057dc <_kill_r+0x20>)
 80057c2:	4604      	mov	r4, r0
 80057c4:	4608      	mov	r0, r1
 80057c6:	4611      	mov	r1, r2
 80057c8:	602b      	str	r3, [r5, #0]
 80057ca:	f7fb fb50 	bl	8000e6e <_kill>
 80057ce:	1c43      	adds	r3, r0, #1
 80057d0:	d102      	bne.n	80057d8 <_kill_r+0x1c>
 80057d2:	682b      	ldr	r3, [r5, #0]
 80057d4:	b103      	cbz	r3, 80057d8 <_kill_r+0x1c>
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	bd38      	pop	{r3, r4, r5, pc}
 80057da:	bf00      	nop
 80057dc:	20000380 	.word	0x20000380

080057e0 <_getpid_r>:
 80057e0:	f7fb bb3e 	b.w	8000e60 <_getpid>

080057e4 <__swhatbuf_r>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	460c      	mov	r4, r1
 80057e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ec:	4615      	mov	r5, r2
 80057ee:	2900      	cmp	r1, #0
 80057f0:	461e      	mov	r6, r3
 80057f2:	b096      	sub	sp, #88	; 0x58
 80057f4:	da0c      	bge.n	8005810 <__swhatbuf_r+0x2c>
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	2100      	movs	r1, #0
 80057fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80057fe:	bf0c      	ite	eq
 8005800:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005804:	2340      	movne	r3, #64	; 0x40
 8005806:	2000      	movs	r0, #0
 8005808:	6031      	str	r1, [r6, #0]
 800580a:	602b      	str	r3, [r5, #0]
 800580c:	b016      	add	sp, #88	; 0x58
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	466a      	mov	r2, sp
 8005812:	f000 f849 	bl	80058a8 <_fstat_r>
 8005816:	2800      	cmp	r0, #0
 8005818:	dbed      	blt.n	80057f6 <__swhatbuf_r+0x12>
 800581a:	9901      	ldr	r1, [sp, #4]
 800581c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005820:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005824:	4259      	negs	r1, r3
 8005826:	4159      	adcs	r1, r3
 8005828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800582c:	e7eb      	b.n	8005806 <__swhatbuf_r+0x22>

0800582e <__smakebuf_r>:
 800582e:	898b      	ldrh	r3, [r1, #12]
 8005830:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005832:	079d      	lsls	r5, r3, #30
 8005834:	4606      	mov	r6, r0
 8005836:	460c      	mov	r4, r1
 8005838:	d507      	bpl.n	800584a <__smakebuf_r+0x1c>
 800583a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800583e:	6023      	str	r3, [r4, #0]
 8005840:	6123      	str	r3, [r4, #16]
 8005842:	2301      	movs	r3, #1
 8005844:	6163      	str	r3, [r4, #20]
 8005846:	b002      	add	sp, #8
 8005848:	bd70      	pop	{r4, r5, r6, pc}
 800584a:	466a      	mov	r2, sp
 800584c:	ab01      	add	r3, sp, #4
 800584e:	f7ff ffc9 	bl	80057e4 <__swhatbuf_r>
 8005852:	9900      	ldr	r1, [sp, #0]
 8005854:	4605      	mov	r5, r0
 8005856:	4630      	mov	r0, r6
 8005858:	f7ff f872 	bl	8004940 <_malloc_r>
 800585c:	b948      	cbnz	r0, 8005872 <__smakebuf_r+0x44>
 800585e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005862:	059a      	lsls	r2, r3, #22
 8005864:	d4ef      	bmi.n	8005846 <__smakebuf_r+0x18>
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	f043 0302 	orr.w	r3, r3, #2
 800586e:	81a3      	strh	r3, [r4, #12]
 8005870:	e7e3      	b.n	800583a <__smakebuf_r+0xc>
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	6020      	str	r0, [r4, #0]
 8005876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800587a:	81a3      	strh	r3, [r4, #12]
 800587c:	9b00      	ldr	r3, [sp, #0]
 800587e:	6120      	str	r0, [r4, #16]
 8005880:	6163      	str	r3, [r4, #20]
 8005882:	9b01      	ldr	r3, [sp, #4]
 8005884:	b15b      	cbz	r3, 800589e <__smakebuf_r+0x70>
 8005886:	4630      	mov	r0, r6
 8005888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800588c:	f000 f81e 	bl	80058cc <_isatty_r>
 8005890:	b128      	cbz	r0, 800589e <__smakebuf_r+0x70>
 8005892:	89a3      	ldrh	r3, [r4, #12]
 8005894:	f023 0303 	bic.w	r3, r3, #3
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	81a3      	strh	r3, [r4, #12]
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	431d      	orrs	r5, r3
 80058a2:	81a5      	strh	r5, [r4, #12]
 80058a4:	e7cf      	b.n	8005846 <__smakebuf_r+0x18>
	...

080058a8 <_fstat_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	2300      	movs	r3, #0
 80058ac:	4d06      	ldr	r5, [pc, #24]	; (80058c8 <_fstat_r+0x20>)
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	f7fb fb38 	bl	8000f2a <_fstat>
 80058ba:	1c43      	adds	r3, r0, #1
 80058bc:	d102      	bne.n	80058c4 <_fstat_r+0x1c>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	b103      	cbz	r3, 80058c4 <_fstat_r+0x1c>
 80058c2:	6023      	str	r3, [r4, #0]
 80058c4:	bd38      	pop	{r3, r4, r5, pc}
 80058c6:	bf00      	nop
 80058c8:	20000380 	.word	0x20000380

080058cc <_isatty_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	2300      	movs	r3, #0
 80058d0:	4d05      	ldr	r5, [pc, #20]	; (80058e8 <_isatty_r+0x1c>)
 80058d2:	4604      	mov	r4, r0
 80058d4:	4608      	mov	r0, r1
 80058d6:	602b      	str	r3, [r5, #0]
 80058d8:	f7fb fb36 	bl	8000f48 <_isatty>
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	d102      	bne.n	80058e6 <_isatty_r+0x1a>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	b103      	cbz	r3, 80058e6 <_isatty_r+0x1a>
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	20000380 	.word	0x20000380

080058ec <_init>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	bf00      	nop
 80058f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f2:	bc08      	pop	{r3}
 80058f4:	469e      	mov	lr, r3
 80058f6:	4770      	bx	lr

080058f8 <_fini>:
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	bf00      	nop
 80058fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fe:	bc08      	pop	{r3}
 8005900:	469e      	mov	lr, r3
 8005902:	4770      	bx	lr
